(if (try (\ e : (C -> Bool) . b) with (try false with true)) then (\ b : ((B -> Bot) -> ((Top -> Bot) -> (B -> Top))) . (try a with b)) else (\ b : (C -> Bool) . (\ d : C . false)))
(try (try (\ d : C . (if a then c else true)) with (if (if true then error else error) then (if (\ b : Bool . a) then (\ d : B . false) else b) else (try error with error))) with ((if (try false with true) then (if error then a else c) else (if error then true else true)) (try a with false)))
(try ((\ e : (Bot -> (C -> A)) . (if (try a with true) then error else b)) (try (if c then true else a) with b)) with ((if (\ e : Top . true) then true else (error true)) (\ a : A . false)))
(((a (try error with b)) (\ a : Bool . false)) (if (if error then false else a) then (try b with a) else (\ b : A . error)))
(try (\ b : (B -> (Bool -> Bool)) . (\ c : A . c)) with (try (error error) with (if b then c else b)))
(if ((if b then true else error) (error true)) then (if (if error then false else error) then (true true) else (\ d : Bool . false)) else (try (a error) with (\ b : A . a)))
(\ e : (((Top -> Bot) -> C) -> (Bool -> Bot)) . (\ d : ((Bool -> Bot) -> Bool) . (if (false true) then (if b then c else a) else (\ b : C . a))))
((if (if error then a else (error a)) then (if c then false else a) else (try true with false)) (if ((try error with (a a)) (\ b : (Bool -> Top) . (\ a : Bool . b))) then (\ c : B . (if false then c else c)) else (\ d : (A -> Bot) . (if true then b else (\ b : Top . c)))))
(if (if (\ b : Bot . c) then (try false with false) else (try (try error with b) with (try c with false))) then (try (\ a : A . (\ b : Top . true)) with (c c)) else ((try (if false then c else a) with (\ d : C . (try b with error))) (try (\ e : Bot . (try b with true)) with (error error))))
(\ e : ((Bot -> A) -> (Bot -> Top)) . ((try true with a) (if (if c then true else c) then (\ b : Bot . false) else (try false with error))))
((try (if (try error with true) then (\ a : A . false) else (try a with b)) with (\ b : (C -> A) . b)) (try (try (\ d : C . true) with b) with (b error)))
(\ c : ((C -> (A -> Bool)) -> (C -> (Top -> Bot))) . (if (if (if b then (if c then b else b) else (\ b : B . a)) then (\ b : A . c) else (if true then true else b)) then (if (try (b true) with (true error)) then (\ b : (B -> B) . (\ c : C . error)) else (\ e : Bot . error)) else (\ d : (B -> C) . ((\ b : C . false) b))))
(\ e : ((Bot -> Bot) -> (Top -> B)) . (try (if a then b else true) with (false a)))
(\ e : ((Bot -> (A -> Bot)) -> (Bot -> B)) . ((try (\ c : B . false) with (\ c : Bool . a)) (try (if b then true else a) with c)))
(try (if (try c with (error a)) then (if (if b then a else (try error with c)) then (try error with b) else (\ d : C . error)) else (\ b : (Top -> A) . a)) with (try (\ c : B . (a b)) with (false c)))
(\ d : ((B -> B) -> ((B -> Bool) -> Top)) . (if (true false) then (if b then c else b) else (if error then true else false)))
(\ d : (((Top -> A) -> Bot) -> ((Bool -> Bool) -> (Bot -> Top))) . (try (false b) with (try (if c then true else c) with (\ b : Bot . c))))
(try ((false (if c then true else false)) (if error then true else c)) with (if (true false) then (if c then false else false) else (\ d : C . b)))
(if (\ b : ((Top -> Bool) -> (B -> C)) . (try c with (if false then error else error))) then (\ b : (((A -> C) -> A) -> (C -> Bot)) . (true (try a with false))) else ((try error with c) (try (true false) with (if b then a else c))))
(if (if (\ b : (C -> Bot) . (true false)) then (try true with false) else (\ c : (B -> Bot) . true)) then ((if a then b else true) (try a with true)) else (\ a : (Bool -> Bool) . (\ e : C . (c a))))
(\ c : (((Bot -> C) -> Top) -> (Top -> (C -> Top))) . ((try (try (\ a : Bot . false) with true) with (if a then true else false)) (if (try error with c) then b else b)))
(try (try (try (try false with true) with (try error with a)) with (\ a : (Bot -> Bool) . b)) with (if (if (try true with false) then (try false with error) else a) then ((try error with false) c) else (error true)))
(\ c : ((C -> Bool) -> (Top -> C)) . (if (try (\ b : Top . b) with (c c)) then (if c then b else (c b)) else (try (false error) with (try c with true))))
(if ((try false with c) (if b then true else a)) then ((try a with error) (if error then error else error)) else (if (\ b : C . c) then (try (if c then c else true) with c) else (try a with c)))
(if (\ c : ((Top -> Bot) -> C) . (if (if a then error else true) then a else false)) then ((try (try true with true) with (\ b : Top . false)) (try (\ c : (Bool -> Top) . true) with (try true with false))) else (\ d : ((C -> A) -> C) . (if a then b else true)))
(if ((\ c : Top . b) (\ c : (Bool -> Bot) . (if true then false else false))) then (if (a false) then (if a then a else b) else (c c)) else ((try ((\ b : C . error) (a b)) with (\ e : Bool . b)) (\ c : (Bot -> A) . b)))
(if ((error (if b then error else error)) (error (error a))) then (if ((\ b : B . (c true)) (a a)) then (if b then b else (try false with b)) else ((try error with c) (try error with error))) else ((if true then a else error) (\ a : Bot . b)))
(try (try ((try error with b) (\ b : B . a)) with ((error false) (try c with c))) with (if (true (error b)) then ((try b with false) (b a)) else (try (\ c : Top . c) with true)))
(try (try ((c b) (try true with true)) with (if a then false else (\ e : B . error))) with (if (\ a : (C -> Bot) . (\ a : C . b)) then (\ d : A . true) else (if true then (if error then b else error) else false)))
(try (try (if b then false else c) with (\ a : (Top -> (Bool -> B)) . (false true))) with (if (error b) then (\ b : Top . false) else (if true then c else error)))
(if ((if (\ e : A . error) then a else b) (try error with false)) then ((try false with (try true with true)) (\ a : (C -> Bool) . (\ e : Bool . true))) else (\ e : ((Top -> C) -> A) . (\ b : (C -> (Bot -> B)) . (try false with b))))
((if (try (if true then true else error) with (try c with true)) then (if true then true else a) else (\ c : (Bot -> Bot) . true)) (try (if true then (if b then true else c) else error) with (\ b : (A -> Bot) . ((false c) error))))
(\ e : (((A -> Top) -> B) -> (Bot -> (Bot -> Bool))) . (\ a : ((B -> Bool) -> (Top -> (A -> Bool))) . (a (try c with b))))
(if (if (\ b : Top . (if error then a else error)) then (if b then true else error) else (try b with b)) then (try (false c) with (error (\ e : Bool . a))) else ((if c then a else true) (\ d : B . a)))
(if (if (\ d : Top . c) then (try error with error) else (\ d : Top . b)) then (try (\ a : (Top -> Bool) . (true true)) with (if (try a with (if true then b else a)) then (if true then b else a) else (\ c : (A -> A) . (\ b : Top . true)))) else (try (if c then false else c) with (\ d : (Bot -> A) . error)))
(\ b : (((Bot -> B) -> (Bool -> Bot)) -> ((B -> A) -> A)) . ((try (try (try b with true) with error) with (\ c : Bot . false)) ((if a then error else true) (\ d : A . error))))
(if (try (\ c : (C -> B) . (try error with true)) with (\ e : (C -> B) . true)) then (if ((\ a : (Top -> Bool) . (try b with true)) (if b then false else a)) then (\ c : Bool . (try error with true)) else (try (if false then error else b) with false)) else (((if a then true else true) (b true)) (if (error (try b with b)) then (error c) else (\ c : Top . a))))
(\ b : ((A -> Bool) -> ((B -> Bot) -> Bool)) . (\ c : (Top -> Top) . (if false then true else true)))
((if ((error b) a) then (\ d : ((Top -> Bot) -> Bool) . (c (if false then error else error))) else (\ c : B . true)) (try (if (try a with error) then (if c then b else a) else (try c with (try b with c))) with (\ a : Top . c)))
(\ b : ((Bool -> Bool) -> (A -> C)) . (if (if (c a) then (c a) else (try true with a)) then (try (if c then b else c) with (try false with error)) else ((\ b : Bot . error) (try a with (c c)))))
(if (try (if b then c else a) with (if false then true else b)) then (\ c : ((Top -> B) -> Bot) . ((if b then error else b) (\ d : B . b))) else (((false true) (\ a : (Bot -> Bool) . true)) (try false with true)))
(\ b : ((((Bool -> A) -> A) -> (C -> Bot)) -> ((C -> A) -> (Bool -> B))) . (\ a : (Top -> (Bool -> Top)) . (false b)))
(\ b : (((Bool -> A) -> (Bool -> Top)) -> ((B -> B) -> (Bot -> Bool))) . (if (b (\ c : C . error)) then (if c then true else false) else (true (\ a : A . c))))
(if ((if (b true) then false else c) ((if b then a else true) (try a with true))) then (try (true b) with (if b then true else error)) else (try (\ e : Bot . true) with (false error)))
(\ e : ((B -> (C -> Top)) -> (B -> Bool)) . (if (if c then (true c) else (error error)) then (c c) else ((try a with b) (b error))))
(try (if (\ a : (B -> C) . error) then (false a) else (if true then c else error)) with (try (try b with error) with (try b with (true error))))
(if (try (\ d : (Top -> C) . (if a then c else b)) with (if (a (b b)) then (try a with (try error with true)) else ((true false) (b error)))) then (if (\ d : A . false) then (if (try false with c) then b else (if false then error else true)) else (a error)) else (try (\ a : (C -> Top) . (\ e : C . a)) with (if false then a else false)))
((if (false b) then ((try a with a) error) else (if c then true else b)) (\ b : (Top -> Bool) . (try a with true)))
((try (\ a : (C -> B) . (\ e : Bool . b)) with (try (\ c : Bot . a) with true)) (\ b : (B -> A) . (try (\ d : Bot . a) with false)))
(\ d : ((C -> B) -> ((Bot -> C) -> (Top -> B))) . (\ c : ((B -> A) -> (C -> Bool)) . (\ e : (Bool -> Top) . (try true with false))))
((if ((if true then false else b) (if b then error else a)) then (if (try true with true) then (if c then a else c) else false) else (b b)) (\ d : (((Bot -> Top) -> (C -> B)) -> (Bot -> Bot)) . (try b with b)))
(if (\ e : (B -> Top) . ((\ a : Top . true) (if b then a else b))) then (\ e : ((B -> A) -> (Bool -> Bool)) . (c error)) else (try (\ c : (A -> Top) . b) with (if (if b then b else (\ a : A . b)) then (try b with a) else (try (try error with true) with false))))
(try (\ e : (B -> Top) . (\ c : Bot . false)) with (\ b : ((C -> A) -> Bot) . (\ b : ((C -> C) -> (Bot -> Bool)) . (\ c : B . true))))
(((try (error a) with error) (\ e : Bool . (false b))) (\ d : ((Top -> Bot) -> A) . (false false)))
(if (\ a : ((Top -> Bool) -> (A -> Top)) . (if b then (if c then error else c) else (\ d : C . b))) then (\ b : (Top -> Bot) . ((if b then error else true) (if error then a else a))) else ((\ a : (Bot -> C) . (c true)) (if (if a then false else false) then error else a)))
((if (false (error b)) then (error a) else (if error then true else c)) (try (false b) with (if false then c else b)))
(if (((error true) c) ((try false with error) (\ e : C . b))) then ((error false) (if c then true else error)) else (try (\ b : Top . c) with (\ c : A . c)))
(if (\ b : ((B -> B) -> (Bot -> Top)) . (\ a : (A -> C) . (c true))) then (try (try b with (\ d : C . error)) with (if (if error then error else true) then (\ b : B . error) else (if true then (try true with true) else (try error with true)))) else (try (if (c true) then (\ d : Bool . true) else b) with (try (try true with a) with (if c then error else b))))
(if ((error a) (\ b : (Top -> Top) . error)) then (if (\ e : (B -> Top) . a) then (\ d : Bool . a) else (b b)) else ((if false then true else b) (try true with error)))
((try (\ a : B . true) with (\ e : B . a)) (\ d : (B -> B) . (error error)))
(try (if (try (try true with a) with (if b then b else c)) then (if false then (if true then false else b) else (\ a : C . error)) else (\ e : B . false)) with (if (\ b : C . (try error with b)) then (try (\ c : Bool . b) with (if true then error else false)) else (\ d : ((Top -> Bool) -> C) . (\ c : (C -> Bool) . c))))
(if (if (try (\ d : Top . (try a with true)) with (if (\ d : Bool . true) then b else b)) then (try (try a with true) with (false a)) else (if false then false else (b false))) then (try (true error) with (if false then error else error)) else (if (if (try error with false) then (\ b : C . true) else (\ e : Bot . b)) then (\ e : Bool . b) else (if (\ b : Bot . a) then b else true)))
((\ c : ((A -> B) -> (C -> B)) . (error error)) (try (try (try error with false) with false) with (try (if c then (false false) else (false false)) with (if error then c else c))))
(try ((b false) (c b)) with ((try (\ a : (A -> B) . true) with (a error)) ((if true then error else c) (\ b : A . c))))
(if (\ c : (Top -> Bool) . (try error with true)) then (if (if error then a else (try error with a)) then (if ((try false with c) a) then (if (try c with true) then true else (error error)) else (c error)) else (true a)) else (if (if b then (if c then true else true) else false) then (\ a : (C -> Top) . a) else (if (if true then false else b) then (try false with false) else c)))
((if (\ d : (B -> A) . c) then (\ d : (B -> B) . (\ e : Bot . c)) else (try c with c)) ((\ d : (Top -> Top) . error) (try (try true with a) with (try error with true))))
(try (try (\ b : B . true) with (b b)) with (if (\ e : (Top -> (Bot -> B)) . (\ a : B . b)) then ((\ b : Bool . b) (try true with (true a))) else (try ((c b) (\ b : B . true)) with (a a))))
(\ c : (((C -> Top) -> ((Bot -> B) -> (A -> B))) -> (Bool -> C)) . (if (if (\ d : (Top -> Bot) . (if false then b else b)) then (a c) else (try a with false)) then (try (c true) with (try c with false)) else (\ b : Bool . (try b with a))))
(try (((\ b : C . c) (\ d : Bool . c)) (if (if c then false else a) then (error error) else (\ b : B . error))) with (try (a c) with (\ d : C . false)))
((if (if b then false else true) then (if false then a else c) else (\ a : (C -> Bot) . (a a))) (if ((try b with false) (\ a : Bool . b)) then (true b) else (\ c : (Bool -> A) . b)))
(try (try (try (try c with c) with (\ d : Bot . true)) with (\ e : (Bool -> Bool) . (if error then error else true))) with (try (if true then b else (try a with a)) with (\ a : (C -> Bool) . (try (try true with true) with (false false)))))
((if (\ d : (C -> Bool) . (if b then b else c)) then ((error false) false) else (false true)) (try (\ d : (Top -> A) . (try c with c)) with (if b then b else (try false with c))))
(if (try ((true true) c) with (if (c c) then (if a then false else b) else true)) then (\ a : ((B -> Bool) -> B) . ((if true then false else true) (a a))) else ((try (\ c : B . b) with (error true)) (if b then error else error)))
((\ d : ((C -> Bool) -> Top) . ((\ e : B . a) false)) (\ e : (Bot -> C) . (\ d : (A -> C) . (if b then false else a))))
(if (try (a true) with (b a)) then ((\ c : C . (try c with error)) (b a)) else (if (error error) then (if (try true with true) then (try c with c) else error) else (true (if b then false else false))))
(try (\ d : ((B -> A) -> Bool) . (\ c : (Bool -> B) . (\ e : Top . true))) with (if (if b then false else c) then (if true then c else error) else (\ e : (C -> Bool) . (error false))))
((try (\ a : (B -> A) . (if c then false else a)) with (\ e : (Bot -> A) . (\ e : Bool . error))) ((try true with (\ e : Bot . a)) (try error with a)))
(if ((\ e : A . a) (((\ e : Top . false) (if error then false else true)) (try b with false))) then ((\ a : Bot . (c true)) (if (\ e : B . true) then error else a)) else (if ((if a then false else false) (\ d : (Bool -> B) . error)) then (\ b : (Bot -> B) . (\ c : Bool . error)) else (\ b : (A -> C) . (try error with error))))
((if (\ a : (C -> Bool) . (c (try c with true))) then (try error with b) else (\ d : (Bot -> Top) . ((\ d : Bot . true) true))) ((if c then b else c) (\ c : (Bool -> A) . error)))
(if (\ d : ((Top -> C) -> Top) . ((a error) (if b then a else true))) then ((\ e : Bot . false) ((\ d : Bool . c) (\ c : Bot . c))) else (if (if (\ c : B . true) then (try error with error) else b) then (if (try (try false with false) with c) then ((if error then error else c) (if error then error else true)) else (\ b : Top . (if c then c else true))) else (\ c : C . (\ c : Top . c))))
(\ d : (((Top -> Bool) -> (A -> (Top -> Bot))) -> ((C -> Top) -> B)) . (try (\ b : (Bool -> Top) . (false (try b with error))) with (try (try c with error) with (a true))))
(((try (\ e : Bot . (if b then true else a)) with (try false with b)) (if (if a then c else false) then (if a then true else error) else b)) (if (\ c : (Bot -> B) . (if error then c else b)) then ((\ c : Top . true) b) else (false c)))
(try (try (error (\ e : A . true)) with (\ c : Bool . b)) with (try (if false then (try b with true) else true) with (a false)))
(if (((if error then error else false) (if false then (\ c : C . true) else (if false then true else a))) ((\ c : Bool . true) (false false))) then (\ e : ((Bot -> Top) -> (C -> Top)) . (if (c error) then (try c with c) else (try a with c))) else ((false a) (try c with b)))
((try (try b with false) with (\ e : Bool . (try error with error))) ((try error with (\ e : C . b)) (\ c : C . b)))
(((true false) (\ e : A . (error b))) (\ e : ((C -> B) -> C) . (try (if a then true else c) with error)))
((try (try c with (false b)) with ((\ e : Bot . b) (if (if true then true else error) then a else (\ e : Bool . true)))) (\ d : (A -> Bool) . (\ a : A . a)))
(\ e : (((B -> A) -> (B -> A)) -> ((A -> C) -> (A -> B))) . (if (\ c : (Top -> Bot) . (try false with b)) then (try c with true) else (\ c : (B -> Top) . true)))
(try (if (\ e : (B -> B) . (c a)) then (try (if false then a else b) with (if false then false else false)) else (try a with a)) with (if (try (try false with c) with (try false with a)) then (try true with a) else (if true then true else true)))
(\ e : ((A -> (B -> Bool)) -> ((B -> B) -> (C -> C))) . (if (try (if error then true else error) with (true false)) then (\ a : ((A -> C) -> Top) . ((try false with b) error)) else (\ d : Top . (if c then true else a))))
((if (if (try true with a) then (\ c : (Bool -> Bool) . (\ c : Bool . error)) else (try (false false) with (\ c : Bool . a))) then ((false c) (false (\ a : C . true))) else (if (try b with error) then (if error then b else (if true then false else c)) else (c (try true with b)))) (\ e : (B -> Bot) . (try b with b)))
(if ((try a with (if false then c else a)) (if (\ d : Top . c) then false else false)) then (\ d : (Top -> (C -> A)) . (try a with (if b then true else true))) else (try (\ e : B . error) with (true false)))
(((\ c : (Top -> B) . (if true then false else a)) (try (false b) with (\ c : (Bool -> A) . (if false then b else c)))) (if (if true then true else b) then (try true with error) else (\ b : A . b)))
(if ((if (\ d : B . true) then a else (a b)) (\ a : Bot . false)) then (try (a (try false with error)) with (true false)) else (try (b b) with (if error then b else true)))
(if (if ((try (\ e : B . true) with (true true)) (try b with a)) then (if (\ e : B . b) then (try (\ c : Bot . b) with c) else (if a then (if c then false else b) else false)) else (\ a : (A -> Bool) . (a true))) then ((a (\ b : Bot . a)) (if true then a else a)) else (((try false with false) (\ b : Top . b)) ((c c) error)))
(try (try (true a) with (\ a : A . (try false with b))) with (if ((try c with true) (if b then (b true) else b)) then (\ b : C . false) else (if (if a then c else true) then (if false then b else false) else (\ e : A . c))))
(try (if (if (a c) then c else (\ a : B . true)) then (try (c false) with (if error then b else c)) else (try error with c)) with ((try (if error then c else false) with (\ d : B . b)) (try error with a)))
(if (try (\ b : ((Bool -> B) -> Bool) . (try (try false with b) with (b true))) with (try (try (\ e : Bool . true) with c) with (try error with true))) then ((if a then true else false) (\ d : A . error)) else ((\ d : (Top -> A) . false) (if (try a with false) then (b a) else (\ a : Top . (try c with b)))))
((if (try (true b) with (\ e : Bool . error)) then ((if (try b with true) then (if false then a else c) else true) (try error with true)) else (try a with (error b))) (\ a : (Top -> (Bot -> Bot)) . (\ d : Bool . a)))
(try ((b (false b)) (if error then c else a)) with (if (\ a : (A -> (C -> C)) . (if a then error else a)) then (if ((\ b : Bool . false) a) then (try error with false) else (try error with true)) else (try c with (\ a : B . c))))
(\ d : (((Top -> Top) -> ((Top -> C) -> (Bool -> Bool))) -> ((Top -> Bot) -> C)) . (try (((\ a : Bool . c) (\ d : A . c)) (try b with false)) with (\ c : (Bot -> Bool) . error)))
(\ c : (((B -> Bool) -> (C -> Bot)) -> ((Bot -> A) -> ((C -> B) -> C))) . (try (if c then b else a) with (try false with (try b with c))))
(\ d : (((Top -> A) -> (Bot -> Bool)) -> (A -> (A -> B))) . (\ b : (B -> B) . (\ e : Bool . true)))
((\ a : (((Bool -> B) -> (Bool -> Bot)) -> (Bool -> C)) . ((try error with true) ((if true then b else error) error))) (try ((c b) a) with (try (b error) with a)))
(try (try (if false then c else a) with (try error with false)) with ((try (if true then a else error) with false) (\ e : (Top -> Bool) . (c error))))
(if ((if (try b with true) then (if b then false else false) else (a a)) (\ c : (Top -> B) . (false (if b then true else b)))) then (if (c true) then (\ e : Bot . error) else (if b then c else a)) else ((if (if (\ b : B . b) then (false false) else a) then ((\ d : B . a) (\ b : B . b)) else (try c with a)) (if (a a) then (\ a : (Bot -> Top) . b) else (try true with c))))
(if (if (try (try b with false) with b) then (\ b : Bot . b) else ((error (if error then c else true)) (try c with b))) then (try ((true c) true) with (\ d : A . error)) else (try (\ e : (C -> Bot) . (if true then a else c)) with ((\ e : B . false) true)))
(\ a : (((C -> Bool) -> A) -> ((Bool -> Bot) -> (Bool -> Bool))) . (((c c) (false c)) (try (if error then (\ c : C . c) else (try error with error)) with (try b with c))))
(try (\ c : (Bot -> Bool) . (\ b : Bool . b)) with ((if false then false else (try error with error)) (\ b : Top . c)))
(\ a : ((Bot -> B) -> ((A -> Bot) -> (Bot -> Bot))) . ((if b then true else c) (\ a : (B -> Bot) . (\ c : Bool . a))))
(try (\ e : (Bool -> B) . (\ d : (Top -> C) . (\ c : Top . false))) with (try (\ a : (B -> Bool) . (try true with c)) with (\ a : (Top -> B) . b)))
(\ a : (((C -> C) -> ((Bool -> C) -> C)) -> (Bot -> Top)) . (try (if (if false then error else c) then (try true with a) else c) with (if (\ d : Bot . error) then (\ d : Bool . b) else (try b with c))))
((try ((b a) (\ a : Top . false)) with (false c)) ((if b then false else b) (if true then true else a)))
(try (\ d : (A -> (A -> Top)) . (try true with error)) with ((if b then (false false) else a) (if true then (try true with b) else true)))
(\ c : ((Bot -> B) -> (Bool -> Bool)) . (if (if false then (a b) else a) then (if false then (\ b : C . b) else (try c with true)) else (if true then (try c with true) else false)))
(if (try (a false) with (if (try b with false) then true else error)) then (try (c error) with (try b with true)) else (if (\ e : (A -> B) . (\ d : Top . (if b then false else false))) then (try (if b then true else false) with b) else (try false with true)))
((if (if true then false else true) then (true c) else ((\ d : B . b) error)) (((try a with a) (try b with c)) (if false then false else (error c))))
(\ a : (((B -> Bot) -> C) -> ((Bot -> A) -> (Bool -> Bot))) . (if (try error with b) then (\ a : (Bot -> Bot) . (try error with true)) else (\ b : ((Bool -> A) -> Bot) . (if error then (if b then true else true) else (try b with true)))))
(try (if (\ a : A . a) then (\ c : Bot . false) else (\ d : Top . true)) with ((\ b : C . true) (\ a : Bot . b)))
(\ a : (((Bool -> Bool) -> ((Bool -> C) -> B)) -> ((Top -> B) -> (C -> Bool))) . ((if (if error then b else error) then a else c) (error (if a then a else a))))
(if (\ b : ((A -> C) -> (C -> Bool)) . (if b then true else c)) then (try (try (if a then a else false) with true) with (\ b : Top . error)) else (if (\ a : (C -> Bot) . (false b)) then (\ a : (Top -> Bot) . (\ e : (Bool -> Bool) . c)) else (\ b : ((C -> B) -> (Bool -> C)) . (a error))))
((\ b : ((Bool -> B) -> C) . (a (error a))) (try (try false with a) with (try (try true with true) with true)))
((if (\ c : A . b) then (\ b : B . a) else (try error with false)) ((if b then (\ e : B . error) else c) (try a with (\ d : C . b))))
(((\ d : ((B -> Top) -> (Bot -> B)) . (try c with error)) ((if c then error else a) (b true))) (if (if (\ b : B . a) then a else (if b then error else a)) then (\ a : (C -> Bot) . a) else (try b with (a a))))
((\ d : ((Bot -> A) -> (B -> A)) . (if true then true else (if a then false else b))) ((if (\ c : C . error) then (\ b : C . false) else (true error)) (if (if c then true else b) then (try c with true) else (\ c : B . error))))
(\ e : (((B -> Bot) -> Bot) -> (B -> (A -> Top))) . (\ e : (Bot -> C) . (try (try true with b) with (if false then error else true))))
((try (\ d : (Top -> C) . (try true with error)) with (\ c : B . c)) ((\ c : (Bool -> C) . (if c then false else true)) ((\ d : (Bot -> Bool) . (try error with b)) (try (if c then error else false) with b))))
((try (try c with true) with (try (if a then c else error) with (\ e : Bool . false))) (\ e : (Bool -> Bot) . (try a with error)))
((try (if c then error else b) with (\ e : C . a)) (\ b : ((Bool -> Bool) -> (Top -> Bot)) . (\ e : (A -> C) . c)))
(if (\ b : ((C -> A) -> Bot) . (\ c : C . false)) then (try (\ d : (A -> Top) . (try false with false)) with ((try c with error) true)) else (\ c : (Bool -> A) . (b true)))
(try ((if (\ c : Top . false) then b else false) (try (try (try error with error) with (try a with c)) with (try (error true) with (try true with true)))) with (if (b error) then (\ c : A . true) else (if b then error else b)))
(if (if (\ c : ((Bool -> C) -> Top) . (try (try true with c) with a)) then ((if false then true else c) (try true with c)) else (\ a : A . true)) then (try (if c then (c error) else (\ a : Top . false)) with (try (\ d : C . false) with (try (if true then false else true) with true))) else (\ d : (A -> (A -> C)) . (\ c : A . a)))
(try (try (b a) with (if (try error with a) then (error a) else c)) with (try (if (try a with false) then true else error) with (try (if error then b else a) with (try (if error then error else c) with error))))
((try (\ d : (A -> Top) . (if error then false else false)) with (try false with (try error with b))) (if (try (error a) with (try a with true)) then (try (a error) with (try a with error)) else (try (\ b : Bool . c) with (if b then error else b))))
(\ b : (((Bool -> A) -> (Top -> A)) -> ((Bot -> Bot) -> (Bool -> (Bool -> Bot)))) . (\ d : (Bot -> C) . (c true)))
(try (if (\ a : ((Bot -> Bool) -> (B -> Top)) . (\ e : Bot . b)) then (\ b : ((Bot -> Bool) -> (A -> Bool)) . (if true then (if c then b else error) else error)) else (\ d : (Bool -> Bot) . a)) with (\ d : (A -> (B -> Bot)) . (c c)))
(if (if (if (try (if false then false else true) with b) then (if error then a else error) else (if error then false else error)) then (if true then c else (try a with b)) else (\ c : Top . (b a))) then (try (try a with (try false with b)) with (\ c : Bot . false)) else ((if a then true else (false error)) (\ a : A . (if a then true else c))))
(\ c : ((B -> Top) -> ((A -> Top) -> A)) . (try (try (\ b : B . b) with (a (if a then c else true))) with ((if a then false else true) (if c then false else (if c then false else b)))))
(\ b : (((Top -> C) -> (Top -> Bool)) -> (Bool -> Top)) . ((error true) (error false)))
(try (if ((try true with b) (try a with a)) then (try (if false then b else error) with (if a then c else false)) else (try (try error with c) with (try c with false))) with (if (b true) then (c a) else (false true)))
(((if a then false else true) (try a with true)) (\ b : (A -> Bool) . (error c)))
(try (try (\ d : Bool . true) with (try true with false)) with ((try false with (b b)) (try (c error) with (\ e : A . b))))
(try ((\ b : B . a) (if (if a then c else error) then (try true with b) else (try a with false))) with (try (\ e : (Bot -> (Bool -> Top)) . (\ c : (C -> B) . (if true then b else false))) with (try (if error then error else c) with (false true))))
(\ a : ((Bot -> C) -> (A -> Bool)) . (\ c : ((A -> A) -> B) . (if (false c) then (if (\ e : Top . false) then (true b) else (if false then false else a)) else (try error with a))))
(if ((\ a : (A -> Bot) . false) (b true)) then (if (try false with true) then (if false then (try b with b) else (\ e : Top . a)) else (\ e : B . error)) else (try (if true then a else a) with (\ c : (C -> Bool) . true)))
((try (if (try true with true) then (if a then b else true) else error) with (if (true error) then (false c) else error)) (((try c with error) (\ d : Bot . b)) (if (\ a : (Bot -> A) . true) then (try c with a) else (\ e : B . b))))
(try (\ e : ((B -> Top) -> (Top -> C)) . (c (if false then a else a))) with (if (try true with (\ a : A . false)) then (\ c : Bool . (try false with c)) else (if false then error else b)))
(try ((a false) (try c with (c c))) with (\ c : (A -> Bot) . (c true)))
(((\ a : (Top -> Top) . (if b then error else error)) (if false then (try true with b) else (if a then error else c))) (try (\ b : (A -> B) . (if c then false else c)) with (b false)))
(if ((b b) (\ d : (C -> A) . (if true then b else a))) then (try (error error) with (((\ a : B . true) a) (if false then a else true))) else (try ((c a) false) with (\ d : Top . c)))
(\ e : (((Bool -> Bool) -> ((Top -> Top) -> (C -> C))) -> (Bool -> (B -> Top))) . (\ e : (Top -> B) . (false (c a))))
(if (if (try (b b) with a) then (if (b b) then (try c with true) else (try b with error)) else (try (try error with true) with b)) then (\ b : ((B -> A) -> A) . (\ a : Bool . c)) else (\ b : ((C -> B) -> (Bot -> B)) . (try false with error)))
(if (\ d : ((B -> A) -> ((A -> Bot) -> Top)) . (if (try a with error) then (if (\ e : Bot . a) then (b false) else (try c with true)) else (error c))) then (if (if b then false else true) then (try a with false) else (try b with (try true with true))) else (if ((b b) (\ e : C . b)) then (true b) else (false (\ e : A . c))))
(if (try (try (try true with false) with true) with (if (\ a : Top . true) then (b c) else (\ d : C . true))) then ((if (\ b : Bot . true) then (try (try false with true) with (\ d : B . false)) else (try c with true)) (if c then error else (try b with a))) else (\ d : (B -> (Top -> A)) . (try c with c)))
((try ((try c with error) a) with (\ b : (Top -> Bot) . true)) ((true c) (\ c : (Bot -> B) . b)))
(try (try (try (if false then c else b) with c) with (\ b : C . (try c with true))) with ((try (\ a : C . b) with ((\ a : A . false) (\ c : Bool . a))) (try (if (try false with false) then (c c) else true) with (a a))))
((\ a : ((Bot -> A) -> (Top -> Bot)) . (\ d : A . (if true then true else c))) ((\ c : (Top -> Bot) . (c error)) (\ d : (Bot -> Bot) . (if true then a else false))))
((if ((if b then false else c) (b b)) then (\ b : (Top -> C) . (try a with error)) else (try error with b)) ((try true with (\ e : Bool . b)) (\ a : ((Top -> Bool) -> (Bool -> Top)) . (\ c : Bot . false))))
(\ b : (((C -> B) -> (Bot -> B)) -> (B -> Bot)) . ((if error then b else a) (if true then a else error)))
(if (((\ a : B . b) (\ b : A . false)) (\ e : C . c)) then (try ((try true with (c true)) (a b)) with (try (\ a : Top . (if b then error else b)) with (a true))) else (\ e : (Bool -> (Bool -> Bot)) . (if error then b else error)))
(if (if (error b) then (try true with error) else (if (c a) then (\ c : Bool . a) else a)) then (if (if a then a else true) then (b error) else (\ b : (Bool -> Bot) . c)) else (if (\ e : (C -> A) . b) then (\ a : C . c) else (try (if (try b with a) then (try true with error) else (c c)) with (\ c : Top . (try c with a)))))
((\ a : ((B -> Top) -> (Bot -> C)) . (\ c : (C -> A) . (if error then false else c))) (if (\ b : (Top -> Bot) . (if b then a else true)) then (if (b b) then (try b with c) else (try (error true) with (\ b : Top . c))) else (try true with b)))
(try (try (if c then false else (if false then true else error)) with (\ a : (Bot -> (Top -> Bot)) . (if (c a) then (\ a : A . error) else (try b with true)))) with ((try (a b) with true) (try (\ e : C . b) with (if b then error else a))))
(try ((if (try c with true) then error else c) (\ b : (B -> Bool) . (try error with true))) with ((\ a : (C -> Bool) . (\ b : Bot . error)) (if (if true then c else b) then (\ c : (Bot -> B) . error) else (\ b : Bool . c))))
(\ a : (((A -> B) -> (Top -> Bot)) -> ((B -> A) -> (Bool -> Bool))) . (if (try (\ c : B . c) with (try b with (if error then false else c))) then (\ c : (Top -> Bool) . (try true with true)) else (if ((\ d : Top . c) (if false then false else true)) then (try (try false with a) with (\ c : Bool . b)) else (error a))))
(\ b : ((Top -> (Bot -> B)) -> (A -> (Bool -> B))) . (if (if (\ c : Bool . a) then c else true) then (if error then false else c) else ((\ a : B . error) (b error))))
(try (\ b : ((C -> Bool) -> (Bool -> A)) . (if true then (if c then b else a) else a)) with (if (\ b : (Bool -> A) . true) then (error (error error)) else (\ c : Bool . c)))
((try (if (try false with error) then (try b with error) else (if error then true else b)) with ((try error with error) (\ e : Bool . b))) (\ a : ((A -> Top) -> Bot) . (if b then error else false)))
(if (\ c : ((C -> Bool) -> (Bot -> C)) . (try (if c then c else error) with (\ e : Bool . false))) then (try ((try a with true) (if c then true else c)) with (false true)) else (try (if (if true then error else error) then (if c then true else true) else (false false)) with (if (true c) then (true b) else (try true with false))))
(try ((try true with false) (try (\ e : (B -> Bool) . a) with (if (try b with false) then error else c))) with (if (\ a : (A -> C) . (if c then true else true)) then (\ d : Bool . (error b)) else (\ e : Bot . (try b with c))))
((if (\ c : (A -> C) . b) then (try (\ a : C . a) with (c c)) else (try (true true) with (if c then error else true))) (try (if a then error else true) with (try c with false)))
(\ e : ((Bool -> (B -> Bot)) -> ((Bot -> A) -> (Top -> A))) . (try (try true with (\ b : A . b)) with (\ d : B . b)))
((((false true) (\ e : Top . c)) ((error error) (b false))) (try (if b then true else true) with (if c then false else false)))
(if ((try (try true with true) with (\ a : B . a)) (c c)) then (\ b : ((B -> A) -> (Bot -> Bot)) . ((if b then error else error) (b error))) else (\ d : (B -> (Bool -> Bot)) . ((false error) (\ a : C . false))))
(try (try (if b then (\ d : Bool . c) else false) with ((b a) (try c with true))) with (if (c a) then (\ a : Top . (if error then a else c)) else (true b)))
(if (try ((if error then a else false) (if a then a else a)) with (\ c : Bot . (\ d : Bot . a))) then (if (try (error a) with ((error a) (if b then true else a))) then ((try a with false) (try (if false then a else b) with (try c with c))) else (try b with (false true))) else (if (if a then true else b) then (if error then false else error) else (\ a : Bool . error)))
(if ((try (if true then false else error) with (try (try false with error) with (\ b : C . true))) (if (try error with true) then error else (if a then c else a))) then (\ b : (Bool -> C) . (\ b : A . error)) else (if ((\ a : Bot . error) false) then (\ c : B . error) else (try a with b)))
(if (try ((if a then true else a) (\ a : B . true)) with (\ a : ((Bool -> C) -> A) . (\ d : Bot . b))) then ((\ a : Bot . b) (\ e : (B -> Bot) . (try b with a))) else (try (if false then false else a) with (try a with a)))
(if (if (\ e : C . false) then (\ d : Bool . b) else (\ c : C . a)) then (\ c : (A -> (Bot -> Bool)) . (if c then c else c)) else (((try b with b) c) (\ e : Bot . (b true))))
((if ((if c then c else true) (if (\ a : Bot . a) then (false true) else false)) then (try (if c then a else c) with (c c)) else (\ b : (Top -> Bool) . (c false))) (try ((b b) false) with (try a with a)))
((if (\ e : (C -> A) . (try a with c)) then (b (true b)) else (try (if (if error then a else true) then (if true then b else b) else false) with (\ e : Top . b))) (\ a : (Top -> Bot) . (if true then c else b)))
(try ((\ d : (B -> Bot) . (if false then error else c)) (false false)) with ((\ c : A . b) (if ((c error) (try c with true)) then (\ b : (A -> A) . (false c)) else (a error))))
((try (try (b true) with true) with (a b)) ((if (\ a : A . error) then (\ e : Top . error) else ((if b then error else true) (c true))) ((\ a : B . false) (\ c : Top . c))))
(try (try (\ b : B . (if error then false else error)) with (\ e : (A -> Bot) . (if false then a else a))) with ((\ d : Top . false) (\ d : (B -> Bot) . (true true))))
(if (\ e : (Top -> B) . (try (\ e : Top . c) with true)) then (try (try true with (if b then error else true)) with (if (if false then true else true) then (try a with false) else (try false with true))) else (try (try b with false) with (try error with (\ d : C . true))))
(if (try (true error) with ((if c then false else c) (\ a : C . b))) then ((\ d : (C -> C) . true) (if (try (error b) with false) then (if (try error with c) then (\ c : C . true) else c) else (try true with error))) else (try (try b with true) with (false a)))
(\ a : ((Bot -> A) -> (Top -> C)) . (try (if (try b with c) then true else (\ c : A . true)) with (if (if error then error else b) then (try (\ e : B . a) with b) else (\ e : (B -> B) . error))))
(\ a : (((A -> (C -> Bot)) -> ((Bot -> A) -> (Bool -> Bool))) -> ((Bot -> Top) -> (Top -> Bot))) . (if (if (try false with b) then (if false then true else false) else b) then (\ c : (B -> B) . true) else (if a then error else a)))
(if ((if (\ a : C . a) then false else (\ b : A . false)) (if (try false with c) then false else (try error with true))) then (if (\ c : C . false) then ((\ a : Bot . a) (\ b : Top . error)) else (if error then c else a)) else (\ c : (B -> C) . (try false with (if true then c else c))))
(((\ b : C . (try c with a)) (try error with c)) (\ e : (Top -> Bool) . (try a with false)))
(try (try (\ b : Bot . a) with (b b)) with (if (\ c : B . b) then (true b) else (try (true c) with (true error))))
(try (if (if (if true then a else c) then error else false) then (try true with true) else (try (if error then a else a) with true)) with (if (if c then b else true) then (try a with true) else (error true)))
(if (\ b : (Bot -> C) . ((try (if b then c else c) with (\ b : Bot . c)) (try (\ d : B . a) with (try a with true)))) then ((\ c : Bool . a) (\ e : (Bool -> B) . (if c then error else a))) else (if (if (\ c : Top . false) then (if error then false else a) else (b (try false with false))) then (try (\ b : B . b) with (\ e : C . true)) else (if true then (if a then true else c) else (error false))))
(\ b : (((Bot -> Bot) -> C) -> (B -> Bool)) . ((\ b : Top . (try error with c)) (\ c : Top . (try false with a))))
(try ((if (try (\ b : A . true) with error) then (\ b : Bool . (error true)) else (a false)) (try (try true with error) with (\ d : C . true))) with (if (false true) then (\ e : B . b) else (if c then (try b with a) else a)))
((try (try error with error) with (try (\ a : Bool . false) with (a false))) ((try (if error then false else false) with true) (try (try error with false) with true)))
(try (((if true then c else false) (false (\ a : A . b))) (try (\ b : B . a) with (\ c : Top . error))) with (try (if (\ c : Top . c) then (true c) else false) with (error false)))
(\ b : ((Top -> C) -> ((Bool -> C) -> C)) . (try (b error) with (try false with true)))
(\ b : (((Top -> Top) -> (A -> A)) -> (Bot -> A)) . ((try b with a) (if a then c else a)))
(try (if (\ c : Bool . (try true with c)) then (error (if b then false else c)) else (if (\ c : B . c) then false else c)) with (\ c : (B -> (C -> Bool)) . (\ c : C . true)))
(if (\ d : (C -> Top) . (if (try c with a) then b else (\ d : Bool . error))) then (if (\ d : B . false) then (\ a : A . true) else (if false then b else false)) else (try (if false then (\ a : B . c) else a) with (try true with c)))
((try (error c) with (\ a : Bool . (\ d : Bot . b))) (try ((\ d : B . false) false) with ((if error then (if a then false else a) else b) (if true then a else error))))
(\ c : ((((Bool -> Bool) -> (Bot -> Bool)) -> (Top -> Bot)) -> ((C -> Bool) -> (Bool -> Top))) . (if (\ a : C . b) then (if c then error else false) else (try c with c)))
(try (try (if a then false else c) with (\ c : (Top -> A) . (try false with error))) with (\ c : (B -> C) . ((a a) error)))
(\ c : ((C -> Bot) -> ((A -> C) -> (B -> A))) . (if (if c then error else true) then (try false with error) else (\ d : Bot . error)))
(if (try (true b) with ((try error with false) (\ d : (Top -> Top) . (try a with b)))) then (if ((\ c : B . c) (if error then (try c with false) else (error true))) then (\ a : (A -> Bool) . (try a with true)) else (\ d : (Bot -> Bool) . (error error))) else ((try true with a) (true (if false then b else false))))
(if (\ d : (C -> Bot) . ((try b with (\ c : B . error)) (try false with (a false)))) then (if (\ a : (B -> Top) . (\ d : A . b)) then (\ c : A . a) else ((if true then false else false) (\ d : Bool . true))) else ((if false then b else (if c then a else true)) (if (if true then error else b) then (try false with true) else (if (if b then error else b) then c else (if c then true else c)))))
((if ((c true) b) then (\ a : ((Bool -> Bool) -> (B -> C)) . (try (try a with false) with (try error with b))) else (\ c : (Bot -> A) . (\ d : Bot . b))) (\ c : ((B -> Bool) -> Top) . (false true)))
(\ a : ((B -> A) -> (B -> (C -> Top))) . ((try (\ b : B . b) with (\ c : A . false)) (if (c true) then (if false then c else error) else (try (try b with b) with error))))
(try ((try true with b) (\ e : (Bot -> C) . false)) with (try ((\ e : B . b) (try c with b)) with (c b)))
(if (try (if (if a then a else b) then true else (if error then a else false)) with (try (try a with b) with b)) then (try (if c then c else c) with (\ d : (Bool -> Top) . (try true with b))) else ((if (\ a : (A -> B) . a) then (try (try c with b) with b) else (try (if error then false else true) with (true a))) (\ a : (A -> Bot) . (if c then true else b))))
(\ e : (((A -> Bool) -> Bot) -> (B -> Bool)) . (try (try false with c) with (\ a : B . true)))
(\ c : ((((Top -> Top) -> (Top -> B)) -> ((Bot -> Top) -> (Bool -> B))) -> ((C -> B) -> (Bool -> A))) . (((try false with false) (if (\ b : C . b) then (false a) else c)) ((try (try true with b) with true) (try (b error) with error))))
(if (if ((if true then false else true) true) then (if b then false else false) else (\ b : (B -> A) . (try error with true))) then ((if (if error then c else true) then (\ e : Bool . c) else (try false with false)) ((\ a : Top . error) (if b then b else a))) else (\ c : (A -> (C -> A)) . (try (try c with a) with (if error then b else c))))
(\ c : (((Bool -> B) -> A) -> ((C -> C) -> (A -> B))) . (\ b : (((B -> Top) -> C) -> ((C -> A) -> A)) . (try false with (\ d : Bool . b))))
(if (\ c : ((Top -> Bot) -> Bot) . (\ c : (A -> Bot) . (try a with error))) then (\ b : ((C -> Bot) -> C) . (try (\ d : Bool . error) with (error false))) else (try (\ e : B . a) with ((if (if b then true else c) then c else (\ d : A . error)) (a c))))
(if (\ d : (Bool -> C) . (try false with b)) then (if (\ e : (Top -> C) . a) then (error error) else (\ d : B . true)) else ((if (if a then a else true) then (if b then error else true) else (true (if true then b else false))) (if (\ d : Top . b) then a else error)))
(try (if (\ c : (A -> Top) . (\ c : Top . b)) then (\ c : (Bot -> Bot) . (\ b : Bool . true)) else (try ((try a with error) c) with (\ c : Top . a))) with (if (if c then error else b) then (try false with true) else (\ a : Bot . a)))
((if (error error) then (if false then false else false) else (if false then true else (true a))) (try (if true then b else false) with (try (a error) with false)))
(\ e : (((Bot -> A) -> B) -> (Bot -> B)) . (try (\ a : (Top -> Top) . (if true then false else b)) with (try (\ b : (B -> A) . true) with (if error then a else false))))
(if ((false false) (if (c a) then (\ b : Top . b) else (error error))) then (if (\ d : (A -> A) . (if a then (try a with false) else a)) then (try (\ e : (B -> Bot) . (if a then b else c)) with (\ b : Bot . a)) else (b (\ b : Bool . false))) else (if (if (true c) then a else c) then (if (\ a : Top . c) then (if b then a else b) else error) else (if error then (\ e : Bool . c) else (try b with a))))
(try ((\ e : A . (try c with error)) (try c with c)) with (try (if (if error then false else a) then error else false) with ((\ d : Bot . (\ b : A . b)) ((if false then a else false) (if c then false else true)))))
(\ a : ((A -> A) -> (Bot -> (C -> Bool))) . (\ e : (A -> (C -> Top)) . (\ d : (Bool -> C) . (try b with error))))
(((c error) (\ b : C . c)) (try (if false then b else a) with (\ c : (C -> A) . (a error))))
(if (\ d : (A -> (A -> C)) . (if (\ a : Bot . c) then (\ e : Top . c) else error)) then (if (\ b : A . error) then (if (if c then b else a) then (if error then a else c) else (try b with true)) else (try false with (if false then c else error))) else (try (try (try c with b) with error) with (try (\ c : Bot . (\ e : Bool . c)) with (\ c : Bot . true))))
(\ e : (((B -> Bot) -> Top) -> (Bool -> (Top -> Bool))) . (if (\ c : (Bool -> A) . c) then (if true then b else b) else ((if error then a else false) (\ c : Bool . error))))
(if (if (if (if c then (if true then false else b) else false) then (if c then error else c) else (error true)) then (error (if b then b else c)) else (try (\ c : C . true) with true)) then (\ c : ((Bot -> A) -> (Top -> A)) . (\ d : (Bot -> B) . b)) else (\ e : ((B -> C) -> Top) . (try true with a)))
(if (if (if a then b else a) then (\ a : (B -> B) . a) else (if a then (if a then true else error) else (if b then a else a))) then (if (try (\ a : B . error) with c) then (a a) else (\ a : (Top -> (C -> C)) . (false (\ c : C . c)))) else (\ e : ((Top -> Top) -> Bool) . (if (\ e : Bot . c) then c else c)))
((try ((try (false b) with (if false then true else false)) (try (try b with false) with (\ d : A . error))) with (try (\ e : B . false) with true)) ((try c with b) (b (\ b : A . a))))
(if (if (try false with c) then (\ c : Bot . error) else (false true)) then ((if (\ e : Bool . b) then (if c then error else c) else (if a then b else b)) ((\ c : Top . a) (a false))) else ((false b) (if false then true else c)))
(try (\ e : (C -> Bool) . (try (\ c : Bool . c) with a)) with (try (if (\ b : A . true) then true else (b false)) with (if b then (true a) else a)))
(try (try ((if true then b else c) false) with (if (b false) then (try true with c) else (if true then c else true))) with (\ d : ((A -> B) -> Top) . (\ a : Bool . a)))
(if (if (error b) then (if a then error else c) else (\ e : (Bool -> Bot) . (\ b : A . a))) then (\ d : ((Top -> Top) -> (C -> C)) . (try true with true)) else (try ((\ d : Top . error) ((b false) c)) with (if (\ d : (Bool -> Bot) . true) then (if (\ d : B . false) then (try b with true) else false) else (if c then (c b) else a))))
(if (try (if (try error with true) then (\ e : Bool . true) else (try c with c)) with ((if false then false else a) (if false then error else b))) then (\ a : (A -> (Top -> Bot)) . (try (if a then (if a then a else error) else (c error)) with (if c then true else true))) else (if (if (\ e : A . true) then false else (\ d : C . b)) then ((\ b : Bot . false) (try a with c)) else (try (\ d : C . true) with (try error with true))))
(((if (try c with true) then (error a) else false) (if error then error else false)) ((try (\ a : Top . b) with c) (\ d : Bot . error)))
(if (if (try (true false) with error) then (if error then (try false with error) else (\ e : C . a)) else (try b with error)) then (if (if (b (\ a : Bool . true)) then ((try false with c) (try a with c)) else (error (try error with b))) then ((\ a : B . error) a) else (\ e : (Bool -> Bool) . true)) else (try (false true) with (\ a : Bot . error)))
(if (if ((\ e : Top . a) (\ d : B . false)) then (\ a : Bool . a) else ((\ e : B . (false b)) (error c))) then (if (\ d : (Bool -> Bot) . false) then (try c with (b c)) else (try (\ e : (A -> C) . error) with (if true then a else b))) else (try (try (c error) with (\ b : Bot . true)) with (if (try b with a) then false else false)))
(if (\ e : ((Top -> C) -> (C -> C)) . (try (if a then b else (true error)) with (if true then a else error))) then (try (if b then (\ e : Bot . false) else (if false then true else false)) with ((try a with error) (try error with (try error with b)))) else (try (try (try false with c) with b) with (try b with error)))
(if (\ e : (Bot -> A) . (b a)) then (if (try b with (\ d : A . b)) then (try true with b) else (error false)) else (if (try b with error) then (\ e : B . a) else (try c with true)))
(try (if (try (try (if c then a else false) with true) with (error true)) then (try error with false) else (\ b : ((C -> Bool) -> Top) . (false (\ a : Bool . b)))) with (((\ a : B . a) (if true then false else a)) (try (if (\ b : Bool . error) then (\ b : Bool . a) else error) with (try b with true))))
((((if (try a with false) then (if c then false else c) else (try true with c)) (try (try a with false) with (try b with false))) (try (\ c : C . (true true)) with (a (if b then c else true)))) (if (try c with false) then (b (if a then false else true)) else (if false then c else c)))
(((\ b : (A -> A) . ((if c then b else b) c)) (try a with a)) ((if (a c) then (\ c : B . (\ e : Bool . c)) else (try a with error)) (try (if c then error else false) with (true a))))
(\ e : ((C -> (C -> C)) -> ((Top -> Top) -> (A -> A))) . (if (try (if c then a else error) with false) then (\ b : ((Top -> B) -> C) . (try c with c)) else (try (true true) with (\ e : C . c))))
(try ((try true with (\ d : Bot . error)) (\ e : (A -> Top) . false)) with (try (\ e : (C -> B) . c) with ((\ b : (B -> B) . (if true then c else b)) (\ a : B . error))))
((((b b) (\ c : B . error)) (if (error error) then (try error with c) else (\ c : B . b))) (if (\ b : B . a) then (\ c : (Bot -> Top) . (c c)) else (a c)))
((\ a : ((Top -> C) -> (A -> A)) . (\ e : C . a)) (try (c (a b)) with (true a)))
(\ e : ((Top -> (C -> Bool)) -> ((A -> A) -> (A -> A))) . (if (try (if b then true else a) with c) then (if true then b else b) else (if (if b then error else true) then (if false then error else true) else a)))
((((\ e : C . a) (try error with false)) (if (try false with (if b then a else error)) then (false false) else (try c with (if false then true else a)))) (try (\ b : A . c) with (if a then error else false)))
(try (try (if (true error) then a else (if a then false else a)) with (a c)) with (try (true (true a)) with (try (\ e : Bool . error) with true)))
(\ c : ((A -> A) -> (Bool -> Bot)) . (try (\ b : ((Bool -> A) -> (C -> Bot)) . (try true with a)) with ((if error then false else error) false)))
(\ a : (((A -> (Top -> Bool)) -> (B -> C)) -> (Bot -> Bool)) . (\ c : ((Bot -> C) -> (Bool -> B)) . (try (a (\ a : Bool . b)) with (\ a : (Bool -> Bot) . (if c then error else c)))))
(\ d : ((Bot -> (A -> C)) -> (Top -> B)) . (try (if (a (\ e : Bot . b)) then (if false then false else true) else (if error then false else false)) with (\ a : (B -> C) . (\ b : B . a))))
(try ((if (\ c : C . false) then (try b with a) else true) ((if (if a then false else c) then (a true) else false) (\ b : (Top -> Top) . (c error)))) with ((\ e : Top . false) (if (\ a : Bool . error) then (false false) else true)))
(if (try (c (try c with false)) with ((\ d : Bot . error) true)) then (try (try a with c) with (\ d : A . c)) else (\ a : (Bot -> (Top -> Top)) . (if (true a) then (\ b : (A -> Top) . a) else (\ b : Bool . c))))
(\ e : ((Top -> A) -> (((Bot -> A) -> (B -> Bot)) -> (Bot -> Bot))) . (if (\ b : B . false) then (\ a : C . (if a then c else b)) else ((try c with false) (\ b : Bot . true))))
(try (try ((a error) (if a then c else false)) with (try (try a with a) with (\ b : (A -> Bool) . error))) with (if (false c) then (\ c : C . c) else ((try error with false) true)))
(\ e : ((Bool -> Top) -> (Bot -> A)) . (if (\ b : (B -> Bool) . (\ d : Top . true)) then (try b with true) else (true false)))
(if ((\ d : (B -> B) . false) (if a then a else error)) then (\ d : (A -> B) . (try (\ a : A . (if a then false else c)) with ((true a) b))) else (if (try false with b) then (if false then c else a) else (if (\ b : Bool . true) then (try b with false) else (try (if false then b else true) with true))))
((try (\ d : A . false) with (if false then error else error)) (try (if b then c else error) with (a a)))
(if ((\ d : B . b) (if c then (\ c : A . a) else c)) then ((if error then (if true then c else false) else true) (if c then true else (try a with false))) else (\ c : (A -> B) . (\ a : C . a)))
((if ((\ c : A . a) false) then (try b with false) else (if (c b) then c else (try true with error))) (try (if (\ c : C . c) then (if false then a else true) else true) with (if (if c then b else true) then (if true then a else true) else (\ e : C . false))))
(if (if (if false then (\ e : Bool . a) else (\ d : A . true)) then (try (try error with c) with (if (if true then error else true) then (try b with b) else (try false with error))) else (\ c : ((Bool -> Bool) -> (Bot -> C)) . (a (b false)))) then (try (try c with error) with (if c then (if false then false else true) else false)) else (try (if (error false) then (false true) else (\ c : C . true)) with (error true)))
(try (try (\ a : C . c) with (if a then error else b)) with (\ a : (C -> Bot) . (try true with b)))
(\ e : ((B -> A) -> (Bool -> C)) . ((if (if false then (\ a : Bot . false) else a) then ((b true) a) else (try (c a) with true)) (try (\ c : A . false) with c)))
(if ((a true) (c false)) then (try ((b b) (try false with (if a then true else a))) with ((if a then a else b) (if true then error else b))) else (\ a : ((Bool -> Bool) -> (C -> A)) . (\ e : B . (if error then false else error))))
(\ c : ((Bot -> C) -> (Top -> A)) . (\ e : ((A -> C) -> ((Top -> B) -> B)) . (if (try (if b then true else false) with b) then (\ b : (A -> Bot) . (if error then true else false)) else (c true))))
(if ((\ a : (C -> Bool) . false) (\ a : C . (a false))) then (\ e : (B -> B) . (if a then error else a)) else (if (if false then (try b with false) else (if true then c else a)) then (try a with true) else (false (try false with true))))
(if (if (try (false false) with (if a then a else c)) then (c a) else (\ e : Bot . true)) then (\ c : (B -> (C -> Bot)) . (\ d : Bool . (if c then a else error))) else (if (try error with error) then (try error with error) else (if (if error then c else true) then (if c then b else b) else b)))
(\ a : (((A -> Bot) -> ((Bot -> Top) -> (Bool -> Bool))) -> ((Bool -> Bool) -> B)) . (\ d : (Bot -> (B -> A)) . (\ b : (Bot -> B) . (\ e : (Top -> Top) . (\ d : B . c)))))
(try (if ((error true) (false a)) then ((a c) (try (\ a : Top . error) with (false c))) else (if (if b then a else c) then (error false) else (if (\ a : A . false) then a else false))) with (try (try c with error) with (if c then (try true with a) else (try false with true))))
(try (\ a : ((Bool -> Bot) -> (B -> Bool)) . (if (b (if a then false else false)) then (try false with true) else (\ e : (C -> Bool) . false))) with (if (try (try c with error) with a) then (\ c : A . true) else (try b with b)))
(\ a : (((B -> C) -> (B -> A)) -> ((A -> Top) -> (A -> Bot))) . (if (\ c : A . error) then ((if c then true else c) b) else (false (\ e : B . true))))
(try (\ b : (B -> Bot) . (try (if a then (try false with false) else (try error with error)) with (c (if b then false else c)))) with (try (try a with false) with ((\ d : Bot . b) (\ d : Top . false))))
(((try (if error then b else true) with (if true then (\ c : B . a) else (\ e : B . b))) (if (if a then false else c) then (c true) else ((if b then false else true) error))) (((c b) c) (try a with (try error with false))))
(if (if (try b with error) then (try (error a) with (\ b : Bot . error)) else (if a then (\ d : A . false) else (b a))) then (try (\ a : A . (\ b : A . true)) with (\ e : (A -> A) . false)) else (try (\ e : (Top -> Bool) . b) with (if (try false with error) then (if false then a else true) else (try c with true))))
((if (try c with (if false then true else true)) then (\ a : (B -> A) . (if true then (try true with a) else (try a with false))) else (\ a : (A -> B) . (\ d : C . a))) (\ b : (Bot -> Bool) . (\ a : Bool . a)))
((try (try false with (\ e : Bot . b)) with (error error)) (try (error false) with (try false with (\ c : Bool . c))))
(((if b then a else true) (try (c false) with b)) (((\ b : C . c) (\ c : Bool . error)) ((b (\ c : Top . a)) (if b then true else (if c then error else true)))))
(try (\ d : ((Bot -> Bool) -> Top) . (b c)) with (\ a : ((A -> Top) -> Bot) . (\ e : B . error)))
(\ c : ((Top -> Top) -> (A -> Bot)) . (\ c : (A -> A) . (try (b true) with b)))
(\ d : (((C -> Bot) -> Top) -> ((Bot -> A) -> (C -> Bool))) . (if (if a then error else false) then (try b with (false error)) else (\ e : A . b)))
(if ((try (try false with true) with error) (\ a : (C -> C) . b)) then (if (if (if b then false else c) then (a true) else (\ c : C . b)) then (try (if false then error else a) with b) else (\ b : C . a)) else (if (\ d : (Bot -> Bool) . (false c)) then (\ d : (Bot -> Top) . error) else (\ c : (Top -> C) . (\ d : Bot . error))))
(if (\ e : ((A -> Bot) -> (B -> C)) . ((\ c : Top . false) (try (\ c : Top . a) with (true a)))) then (if (try (try false with c) with (try c with a)) then (\ a : (Bot -> Top) . (try c with c)) else (\ b : (B -> C) . a)) else ((if (if true then true else error) then a else b) (if (try true with b) then a else error)))
(try (try (try (\ c : C . b) with (\ e : B . b)) with (try (if c then c else error) with b)) with (\ e : (A -> A) . (a c)))
(\ e : (((Bot -> Bool) -> Top) -> ((B -> Bot) -> B)) . ((a b) (\ d : (C -> Bool) . (if b then true else true))))
(try (try (error b) with (\ b : Bool . error)) with (if ((try c with c) (try a with c)) then ((if error then (if error then c else a) else (a b)) (try true with a)) else ((if b then c else a) (try c with a))))
(\ e : (((A -> (Bool -> Bot)) -> (A -> B)) -> ((B -> Top) -> (Bot -> A))) . ((try (c error) with (try a with b)) (try (\ c : Bot . b) with (if a then true else true))))
(try (if (\ b : (Bool -> Bot) . a) then (\ c : (C -> C) . (if (true true) then (\ b : A . error) else (b false))) else (b (\ d : Top . c))) with (if (try true with c) then (a true) else (a error)))
(\ e : (((Bool -> Bool) -> C) -> ((Top -> B) -> Bot)) . (try (if c then c else true) with (c b)))
(try ((if false then b else a) (\ c : ((Bot -> C) -> Bot) . (\ a : B . false))) with (if (if (if false then error else c) then (try b with a) else c) then (\ d : ((Bool -> A) -> (C -> Bot)) . (try (\ a : A . a) with (a error))) else (if (a a) then (try error with b) else (try false with true))))
(try (if (if (if a then error else error) then (try b with (try false with b)) else (\ a : B . b)) then (if (\ e : Top . b) then a else b) else (if (\ d : (A -> Top) . (try c with a)) then (\ c : B . true) else (\ b : Bool . false))) with ((try (try a with b) with (try true with false)) (\ e : (Top -> C) . (if c then a else error))))
(if (if (\ d : Bot . error) then ((a c) (if false then c else false)) else (\ e : (Top -> Bot) . (try false with true))) then (if (if a then c else b) then (if error then a else false) else (\ e : (A -> C) . c)) else (try (try true with b) with (try (if b then error else true) with false)))
(\ d : (((Bool -> Bool) -> (Bool -> Bot)) -> (Top -> (C -> B))) . ((\ d : A . (c b)) (if c then true else error)))
(\ e : (((A -> Top) -> (Bool -> Top)) -> ((Bool -> C) -> (A -> Bool))) . (try (\ e : (Top -> (B -> Bool)) . ((\ e : C . b) error)) with (try a with (error c))))
((if (try error with a) then (false false) else (\ d : B . false)) ((if (\ a : Bool . c) then a else (\ a : Top . c)) (if (\ c : A . a) then (if a then (true error) else (try a with true)) else (if a then false else false))))
(\ c : ((((C -> A) -> (A -> Bot)) -> (B -> A)) -> ((Bool -> B) -> (Bool -> B))) . (if (\ e : B . (try b with c)) then (if a then b else false) else (try false with c)))
(if (try (\ a : A . a) with (b error)) then (try ((if false then b else a) (c error)) with (if (try c with b) then true else b)) else (try (\ c : (Bot -> C) . (if b then a else b)) with (if a then false else a)))
((if (error a) then (\ a : Bot . false) else (try (try error with a) with b)) (\ b : (Top -> Bot) . (c false)))
((try (\ a : ((C -> B) -> C) . (false c)) with ((\ d : (Bool -> Bot) . a) (\ a : C . (true false)))) ((try true with a) (((\ a : Bool . error) error) (if (try true with false) then (false true) else (try error with false)))))
(\ c : (((Bot -> B) -> (Bool -> Top)) -> ((A -> C) -> (Bot -> A))) . ((false error) (\ a : A . a)))
(if ((\ b : B . (true false)) (if a then a else b)) then (\ e : (Top -> Bool) . (try (try true with b) with (try true with true))) else (try (if (if a then b else a) then c else false) with (if a then (b error) else (try c with false))))
(\ a : ((C -> Top) -> (A -> Top)) . (if (try (if false then a else b) with true) then (\ e : ((A -> B) -> (Top -> B)) . (true true)) else (if (if b then b else a) then (if b then error else b) else c)))
(\ d : ((Bool -> B) -> (Bool -> Bool)) . (if (c b) then (c (try error with a)) else (true (\ d : Bool . error))))
(((\ e : (Bot -> Bool) . (c a)) (\ a : Bot . error)) (try (try b with c) with (\ c : A . b)))
(try ((false error) (if true then false else true)) with (try (if (if (\ a : B . true) then true else (if false then c else b)) then (if true then true else b) else (if error then b else a)) with (if error then true else a)))
(try (if (\ c : ((Bot -> B) -> Bot) . (try error with true)) then ((if error then a else false) c) else ((b b) (\ b : B . false))) with (\ d : (C -> A) . (if (if c then b else false) then c else a)))
((\ b : (((Bool -> Top) -> Top) -> (B -> A)) . (((if c then false else b) (false error)) (if (if true then error else false) then (try false with true) else (true true)))) (\ e : (A -> C) . (if c then (if true then false else true) else true)))
((try (try (c b) with (try false with b)) with (if (\ e : Bot . a) then (try a with a) else (try true with c))) (if (c true) then (if a then (\ b : B . false) else c) else (try (if a then (false a) else (\ c : B . a)) with (false c))))
(try ((error c) (if b then (if error then false else error) else false)) with ((if false then (try a with b) else (if error then a else a)) (try a with false)))
((\ d : (C -> Bool) . (\ a : Bool . a)) (try (if (error b) then a else (try b with c)) with ((if b then false else false) false)))
(try (\ b : (Bot -> (C -> Bool)) . (\ b : A . a)) with (\ c : ((Bool -> A) -> ((B -> B) -> (A -> Bool))) . (\ b : (B -> C) . false)))
(\ c : ((B -> (Bool -> Bool)) -> (B -> A)) . ((try (\ b : Bot . b) with (try error with (try a with false))) ((\ c : B . error) a)))
((if (if (try error with c) then ((if b then true else c) b) else (\ e : (Bool -> Top) . (if b then b else error))) then (\ e : B . false) else (try a with a)) (if (if (c false) then (true false) else (try true with b)) then (try error with (try true with false)) else (b (true c))))
(if (((c a) (if (if c then false else error) then c else (\ e : A . c))) (if true then b else (try c with error))) then (\ c : ((Bot -> B) -> (Top -> B)) . (false true)) else (try (try false with (b b)) with (error c)))
(\ e : (((B -> A) -> (Top -> C)) -> ((Bot -> B) -> (Top -> B))) . (if (\ e : B . false) then (\ b : Bool . (try error with c)) else (\ b : Bot . (try error with c))))
(try (\ d : (A -> A) . (try (if b then error else false) with (\ a : Bot . b))) with ((try (try error with true) with (try c with b)) (\ c : ((Bot -> B) -> (C -> Top)) . (if (if true then b else error) then b else true))))
((if ((if true then error else a) a) then (\ b : (B -> Bool) . a) else (if (c c) then b else (a error))) (if (if (true true) then (a false) else (try true with c)) then (try b with c) else (if c then error else false)))
(\ e : ((C -> C) -> ((C -> (C -> Bot)) -> (B -> Bool))) . (\ c : ((Bot -> A) -> A) . (if (\ d : (B -> Bot) . c) then (if (a b) then (try c with true) else b) else (\ e : (Bool -> A) . (\ b : A . error)))))
((try (\ c : (A -> Bot) . ((false c) (try c with a))) with (try (try a with (b a)) with (if error then (try c with error) else (true true)))) (try (\ e : (A -> A) . (\ b : Bot . c)) with (if (if error then false else c) then (false true) else (error c))))
(if (try (if (a error) then (\ a : Top . a) else (if b then b else a)) with (\ a : (B -> Top) . (false c))) then (\ c : (B -> Bool) . (try false with a)) else (if (false c) then (if false then c else b) else (if (if false then error else false) then (if b then b else error) else (error c))))
(try ((a a) (try c with false)) with ((if (if a then (\ b : A . a) else c) then (if c then error else false) else (try a with false)) (try (if c then b else error) with (false c))))
(try (\ e : ((Bool -> Bool) -> ((Bot -> Top) -> (B -> A))) . (if (a (try a with error)) then (if (try false with a) then (try a with c) else error) else (try c with a))) with (if ((c error) a) then (try a with true) else (\ c : Bool . c)))
(if (try (try (\ a : Top . error) with (\ a : Bool . error)) with (if (\ d : (Bool -> Bool) . a) then (b (try false with error)) else (b b))) then (try (\ b : (A -> Bot) . (\ d : Top . (\ e : C . true))) with (\ d : (Bot -> A) . (try b with true))) else (\ c : ((Bool -> Top) -> C) . (try (false b) with (true b))))
(if (\ c : ((Bot -> A) -> (Bot -> (B -> B))) . (if (if (c c) then (if true then false else a) else (try c with true)) then (if error then (try b with a) else (if c then error else c)) else (true c))) then (if (if c then (\ c : Top . b) else (false a)) then ((try c with (if a then true else a)) (try a with a)) else (\ e : ((C -> Bool) -> (Bool -> A)) . (try a with (try error with a)))) else (if (try a with false) then ((c true) (try b with a)) else (\ e : Bool . b)))
(\ b : ((Bot -> A) -> ((Bot -> C) -> C)) . (try (if (if false then true else error) then (try c with true) else (\ e : B . true)) with (if (if false then c else error) then (true false) else (try true with error))))
((\ b : (Bot -> A) . (\ e : Bool . (if b then b else a))) (try (\ c : Top . a) with (\ a : Bot . true)))
(\ d : (((B -> A) -> Top) -> ((B -> Bool) -> ((Bot -> Bot) -> (Top -> Bot)))) . ((if true then c else (if true then b else true)) ((if c then b else error) error)))
((try ((false a) (try true with a)) with (try (if (false b) then (try true with c) else (if error then a else false)) with (if b then c else error))) ((\ d : (Bot -> A) . true) ((false false) error)))
(((if (true c) then (try a with c) else (\ b : C . true)) (\ d : (C -> Bot) . (if error then b else a))) (\ d : (Bot -> Top) . ((\ d : C . error) c)))
(\ c : ((B -> (B -> B)) -> (Top -> Top)) . ((try (\ a : Top . true) with (\ b : (Top -> Bot) . (a false))) (\ a : Bool . c)))
(\ b : ((B -> B) -> (Top -> Bot)) . (((\ d : (C -> Top) . false) (\ d : Bool . a)) (if (\ e : B . true) then c else (if false then b else c))))
(try (if (if (\ c : Bool . (\ d : C . b)) then (try (if error then false else c) with error) else ((\ d : Bot . false) (\ d : B . error))) then (try (try a with error) with (\ c : B . b)) else ((\ d : C . error) (error b))) with (if (\ c : (Bool -> B) . (if (\ a : A . error) then error else (\ e : Bot . true))) then (try (\ d : A . false) with error) else (\ e : ((C -> C) -> (Bool -> Top)) . (try (c false) with c))))
(((false (try a with b)) (if (\ a : Bot . c) then (if b then a else c) else (try true with (false c)))) (try (if (\ e : B . c) then error else c) with (if error then (\ e : Bool . a) else true)))
(try (if (if (c true) then (if c then (a b) else false) else (\ b : A . true)) then (try (try (\ c : B . true) with (c false)) with (try c with c)) else (\ c : (B -> Top) . (\ e : C . (false false)))) with (\ e : (Top -> (B -> C)) . (\ d : Bool . a)))
(((if error then true else c) (try (try (error c) with error) with (try (\ e : Bot . false) with error))) (if (if false then a else (\ b : C . error)) then (if (try false with false) then (\ a : C . true) else a) else ((false a) c)))
((\ a : ((A -> Bool) -> (C -> C)) . (try false with c)) (if ((\ b : (C -> Bot) . (\ c : C . false)) (if c then (try a with true) else c)) then ((try c with c) (try (try c with a) with false)) else ((try a with a) (\ d : Bot . c))))
((try (\ a : Top . false) with (if (try false with c) then (\ c : (B -> C) . (\ b : A . a)) else (try (try false with a) with (if c then a else b)))) (try (try (true a) with (\ c : Bot . a)) with (error (c b))))
(if ((b true) (if (\ a : B . error) then error else (try c with a))) then (if (\ c : (A -> Bool) . error) then (\ e : (C -> B) . error) else (if b then a else false)) else (if (try b with true) then (if a then a else c) else (\ c : Bool . error)))
(\ b : (((C -> Bool) -> (C -> Bool)) -> ((Top -> Top) -> (C -> Bool))) . ((try (if (if b then false else c) then (try a with error) else false) with ((try b with c) b)) (try (if b then (try true with b) else error) with (try (false b) with b))))
(if (if (if true then c else c) then (try (if a then b else true) with (try true with false)) else (((a false) (try a with error)) (try c with a))) then (if (try (try true with a) with (try error with b)) then (if (b c) then (if false then a else b) else (try (false a) with a)) else (try (b (\ b : C . b)) with (try a with false))) else ((if (\ a : C . a) then b else b) (if (if (if false then a else b) then a else c) then (if a then true else (\ b : C . error)) else (\ d : Bool . false))))
(if ((\ a : Top . (\ a : C . false)) (\ d : Bool . error)) then (try (a b) with (try error with error)) else (\ d : (Bool -> (A -> Bool)) . (try c with false)))
((try (\ c : (A -> A) . (try false with c)) with (try a with (if c then b else b))) (try (try (if c then a else b) with (try c with false)) with (if error then false else false)))
(\ c : (((A -> Bool) -> (Top -> (B -> C))) -> ((C -> Bot) -> (Bool -> Top))) . ((error false) (if (if false then error else false) then (\ d : A . a) else (\ a : C . false))))
(try (\ e : ((Bool -> B) -> (Bool -> Bool)) . (if (true c) then (\ c : Bot . c) else (error (c c)))) with (try (\ b : C . error) with ((\ c : B . a) (if error then false else false))))
(try ((if error then false else a) (\ b : A . error)) with (try (b true) with (\ a : Bool . c)))
(((try (if error then error else true) with (try false with true)) (\ d : ((B -> C) -> Bot) . (if error then a else error))) ((a (try a with error)) (b a)))
(\ e : (((C -> C) -> (Top -> (Top -> A))) -> ((Bot -> A) -> (B -> A))) . (try (b false) with (b error)))
((\ e : (((Bool -> A) -> (B -> Bool)) -> (Bot -> B)) . (try (if c then error else true) with (if error then a else error))) (if (try false with (if error then a else true)) then (\ d : (B -> B) . b) else (if false then a else (try b with b))))
(if (try (try (true c) with b) with (try a with a)) then (try ((false b) false) with (if b then a else error)) else (\ c : (C -> C) . (\ a : (Bool -> C) . (c error))))
(if ((c (\ d : Bool . a)) (\ e : C . false)) then (\ b : (Bool -> B) . (try c with true)) else ((if true then error else c) (\ d : A . a)))
((\ c : (Top -> Bool) . (try (b true) with false)) ((if b then error else c) ((\ a : Bool . c) (if false then a else false))))
((try (try a with c) with (try a with a)) ((\ c : Bot . b) (try a with c)))
(\ d : (((B -> C) -> Bot) -> (((Bool -> Bool) -> Bool) -> (A -> Bot))) . ((try c with true) (if b then error else c)))
(if (if (try (try true with error) with (if b then c else c)) then (\ e : ((Bool -> Top) -> (Bool -> Bot)) . (error error)) else (try (if c then false else c) with (\ a : A . false))) then ((\ e : (A -> Bot) . (try false with (try c with true))) ((if b then b else true) (a a))) else (\ c : (C -> A) . ((false b) (\ e : (B -> Bot) . (try error with c)))))
(if (try (if error then b else false) with (if a then a else c)) then (((try (false a) with (if c then false else a)) (try false with error)) (try (if true then a else b) with (a b))) else (try (\ d : ((A -> Top) -> (B -> A)) . (a error)) with ((try false with error) (try (try true with a) with (\ a : B . a)))))
(if (if (\ e : Bool . (\ a : Bool . false)) then (if (if true then b else false) then a else b) else (if (if (error error) then (if b then error else b) else a) then (c (\ e : B . c)) else (try c with true))) then (\ c : (Top -> B) . (if (\ e : Bot . b) then error else true)) else (try (\ d : Bool . (\ d : B . b)) with (try (\ e : A . c) with (if c then b else c))))
(if (\ a : ((B -> Bool) -> (A -> (C -> B))) . (\ e : ((Bool -> Bot) -> B) . (true a))) then (try (try ((if b then a else a) (if c then c else false)) with (if (if c then error else error) then (c true) else b)) with (try a with false)) else (((b false) (if a then b else false)) (if (false c) then (\ e : B . (error b)) else (try c with error))))
(((try (try error with a) with (if (true false) then (\ c : A . false) else b)) (if (try b with b) then b else (error c))) (if ((c c) ((a a) (b false))) then (if (if true then true else false) then (c b) else (if error then b else true)) else (if (try true with a) then (true (try b with c)) else (\ a : Top . b))))
(\ e : ((C -> B) -> (B -> A)) . (if (b a) then (if false then error else false) else (\ d : Bot . true)))
(if ((\ e : (Bool -> C) . a) (if (try c with false) then ((a error) c) else (b c))) then (\ b : ((Bot -> Top) -> (Bot -> Bool)) . (try b with false)) else (\ b : ((Bool -> A) -> (Top -> Bool)) . (try (if c then b else b) with c)))
((\ a : (Bot -> B) . (if c then true else false)) (try ((\ b : C . c) (\ a : Top . error)) with (try false with true)))
(\ d : (((C -> Bool) -> (Top -> Top)) -> ((Bool -> Top) -> (Top -> B))) . ((if (error c) then ((false true) (c a)) else (\ c : Bool . c)) (if true then (if c then false else true) else c)))
(\ b : ((Bool -> Bool) -> (Bot -> C)) . (\ c : (Bool -> C) . (if true then c else b)))
(((if (try error with c) then false else (c a)) (false error)) ((\ e : (A -> Top) . (\ b : (Top -> C) . (try c with c))) (\ c : C . a)))
(if (\ b : ((A -> B) -> (Bool -> Bool)) . (if true then error else c)) then (if (if false then c else error) then (if error then c else b) else (\ e : A . a)) else (\ b : (Bot -> (Top -> A)) . (\ c : B . a)))
(\ d : ((Bool -> A) -> (Top -> B)) . (\ a : ((Top -> C) -> (Top -> Bot)) . (\ b : Bot . (c b))))
((try (try (false a) with b) with (\ d : B . b)) (\ d : (A -> Bot) . (if c then (if b then false else true) else a)))
((if (if (try c with (\ e : Top . c)) then (try a with a) else (a a)) then ((if c then (\ a : Top . false) else false) (if false then error else b)) else (\ e : ((Bool -> Bool) -> Bot) . (if (if b then b else false) then a else (c error)))) ((\ b : B . a) (c b)))
(\ d : ((Top -> B) -> (Top -> (B -> Bool))) . ((if b then a else b) (\ e : (Bot -> Bool) . false)))
(try (\ c : ((A -> Bool) -> C) . (\ c : (Bool -> Bot) . (if true then c else error))) with (try (\ a : Bool . error) with (try b with b)))
(try ((try (b true) with (if a then true else true)) (\ a : (Bot -> Bot) . (error true))) with (\ d : (Bot -> A) . (if (\ e : B . b) then c else a)))
(try (try (\ c : B . false) with (if c then b else error)) with (\ d : (((C -> B) -> A) -> (Bool -> A)) . (if (b a) then (if a then b else a) else b)))
(if (if (if b then a else a) then (if (a false) then b else (if c then a else c)) else (\ c : A . b)) then ((if true then a else c) (\ e : (Bool -> C) . false)) else (\ d : (B -> Top) . (if a then (try true with error) else a)))
((\ e : (B -> A) . (c false)) (((\ c : Bool . b) true) ((try false with c) a)))
((if (if c then (false a) else (try true with b)) then (false true) else (try b with c)) (\ e : (Bool -> Bool) . (try error with a)))
(try (try (\ b : Top . (\ c : B . c)) with (try c with false)) with (try (if error then error else b) with (a a)))
(try (try (if (try (b true) with (b true)) then (b error) else (if (true b) then (try error with error) else b)) with (\ a : Bool . (error a))) with (\ c : (Bool -> A) . (if b then error else (try error with a))))
((try (try (a b) with ((false a) (if a then true else true))) with ((if b then c else error) (\ e : B . b))) ((if c then (true error) else c) (b false)))
(if ((\ e : (B -> Top) . (if false then (false true) else a)) (if (if b then false else a) then (\ e : (Bool -> Top) . (if false then error else c)) else (\ d : (Bool -> A) . c))) then (\ c : (Bool -> Bool) . (\ a : Bot . false)) else ((try (if c then error else false) with false) (\ c : (C -> B) . true)))
(\ c : ((Bool -> Top) -> ((Top -> Top) -> (Bot -> B))) . (((\ c : Bool . b) (try false with b)) (false error)))
(try (\ d : (Bool -> (Bool -> Top)) . (try (\ e : Top . a) with (if error then b else false))) with (\ b : (Bot -> Top) . (b (if false then false else a))))
(\ b : (((B -> B) -> (Bot -> C)) -> ((A -> Bool) -> (A -> Top))) . (if (if b then (c b) else (try false with a)) then (\ b : (C -> Bot) . (c b)) else (if (try c with error) then false else (if b then b else a))))
(if (((if b then false else b) false) (true a)) then (if (\ e : A . error) then (\ c : Bool . a) else ((false error) (\ a : C . error))) else (try (\ c : (Bot -> C) . (if b then false else c)) with (if a then true else error)))
(try (if (try b with c) then (error true) else (b a)) with (try (\ a : Bool . false) with (if error then false else true)))
(\ d : ((Top -> Bot) -> (Bot -> Top)) . (\ c : ((Top -> A) -> (B -> A)) . (try (\ e : Top . false) with (if false then error else c))))
(if (try ((try true with error) true) with (\ d : ((A -> Bot) -> (C -> C)) . (\ c : Bool . (if true then false else true)))) then (try ((\ c : A . true) (try b with error)) with (if (true error) then (c true) else (if c then c else c))) else (\ e : ((Top -> Bool) -> (Bool -> Bot)) . ((try c with a) (false error))))
(try (\ e : ((A -> (A -> Bot)) -> (Bot -> Bool)) . (if (\ b : Bot . b) then (\ a : Bool . error) else (false true))) with (try (b false) with (try c with (true error))))
((try (\ c : (A -> B) . (\ e : A . true)) with (if a then c else (if a then a else a))) (try (\ b : (C -> (Bot -> Bool)) . (\ c : B . false)) with (try (try c with (if error then true else false)) with (error b))))
(try ((if (error error) then c else true) (try true with false)) with (if (\ a : Top . b) then ((false true) (if error then a else false)) else (try (\ c : (Bool -> Bool) . a) with (try c with false))))
(\ a : ((C -> A) -> ((B -> Top) -> (Bool -> B))) . (try (a (c error)) with (\ d : (Bool -> C) . (true false))))
(if (\ d : (A -> Top) . (\ c : (B -> Top) . b)) then (((\ e : Bool . false) (a false)) (if (if true then false else c) then (if (error false) then false else false) else (\ b : Bool . a))) else (if (if (try a with a) then c else false) then (try (try error with b) with (if b then b else b)) else ((try (try b with false) with a) (a b))))
(((if (try b with b) then a else error) (false c)) ((if false then false else error) (try error with c)))
(try (try (if a then error else (if true then true else true)) with (if (try a with a) then (try false with error) else (try a with c))) with (try (\ b : C . true) with (try a with false)))
(\ c : (((Top -> Bot) -> ((Bool -> C) -> (B -> B))) -> (((A -> C) -> (B -> C)) -> (Bot -> (Top -> A)))) . (((if a then a else c) (try (\ d : Bool . a) with (if a then error else a))) (\ e : C . true)))
(\ d : (((B -> A) -> (Bool -> Top)) -> ((Bot -> B) -> ((Bool -> B) -> Bool))) . (\ e : (B -> (A -> Top)) . (try false with (\ e : B . a))))
(((\ c : (Top -> Bot) . b) (try (if a then c else false) with false)) ((\ d : (B -> A) . (\ a : A . false)) (try (if c then false else true) with (if a then a else error))))
(try (try (false b) with ((try true with true) a)) with ((if true then false else error) (\ c : (Top -> A) . false)))
(\ c : ((Bot -> C) -> (B -> C)) . (try (try (try c with error) with (if c then b else (\ b : A . a))) with (try c with error)))
(\ e : ((A -> (B -> Bool)) -> (A -> A)) . (\ c : ((B -> Bool) -> (Top -> C)) . (false false)))
(((\ e : B . a) (try true with c)) (try (try (error false) with (error c)) with (if error then c else true)))
(if (\ c : ((C -> Top) -> (C -> B)) . ((if false then a else error) c)) then ((c error) (try b with c)) else ((try c with true) (try c with true)))
(if (try (\ d : (C -> A) . (try c with true)) with (b (error b))) then (try ((try (try false with false) with a) (if (if a then error else false) then false else (true c))) with (if (if false then error else false) then ((if a then true else error) (\ d : B . false)) else (c a))) else (try (try c with true) with ((try true with b) c)))
(\ e : (((B -> Bot) -> A) -> ((Top -> Bot) -> (Bool -> B))) . (try ((if a then error else error) (true false)) with ((\ b : (C -> Bot) . (\ a : Top . c)) (\ c : Top . b))))
(\ e : ((B -> Top) -> (Top -> Top)) . ((a a) (b b)))
(try (try (if (if c then b else a) then (\ d : C . error) else c) with ((if false then a else true) (\ d : A . c))) with (if (\ b : B . error) then (c (c true)) else (try error with false)))
((try (try (if error then false else c) with (try (try error with error) with (if true then error else c))) with (if (if c then b else a) then error else a)) (try ((error b) (a false)) with (try error with (a true))))
(try (if (try false with error) then ((\ a : C . error) true) else ((\ a : Bool . c) (if error then a else c))) with (try (if b then a else b) with ((try c with a) (try c with a))))
(try ((\ b : A . false) (try error with (if b then b else false))) with ((if false then c else a) (if error then a else true)))
(try ((if (if true then false else true) then error else b) (if true then a else b)) with (if (if a then false else a) then (try (\ a : Top . a) with (if true then c else b)) else ((\ a : Top . false) c)))
(if ((\ e : B . a) (if (b error) then (try true with true) else (if c then error else true))) then (try (\ c : Bool . b) with (\ d : Top . error)) else (try (true a) with (\ e : B . true)))
(if (\ e : (((C -> B) -> (B -> C)) -> (Top -> Top)) . (\ e : (Bool -> A) . (\ b : A . c))) then (if (\ a : (Bool -> A) . b) then (c (\ c : Top . false)) else (\ e : C . (try b with true))) else (\ b : ((Bool -> C) -> (Bot -> Bool)) . (if c then a else b)))
(try ((\ c : (Bool -> C) . error) (\ e : Bot . true)) with (if (if (\ d : (B -> A) . (\ c : B . false)) then (\ b : Top . false) else (if false then c else true)) then (if a then (true false) else c) else (error true)))
(try ((a true) (if a then a else error)) with (((try false with b) (\ c : Bool . true)) (if false then (try c with b) else (\ c : A . c))))
(\ c : (((Bot -> Top) -> (Bool -> A)) -> (C -> A)) . (\ d : ((Bot -> A) -> ((Bot -> Top) -> (A -> A))) . (try b with b)))
(\ d : ((Top -> C) -> (Bot -> A)) . (\ b : ((C -> B) -> ((B -> Top) -> A)) . (try (if (try c with error) then error else (error error)) with (\ a : A . c))))
(try ((if error then (b c) else true) (if (\ e : C . error) then (try c with c) else (\ e : Bot . true))) with (\ b : (A -> (A -> B)) . (c false)))
(try (\ e : ((A -> B) -> (B -> B)) . (if (error a) then (if true then false else error) else (try error with b))) with (try (try (try error with error) with (\ c : Top . true)) with (try (\ d : A . a) with (try (try c with false) with b))))
(\ b : ((Bot -> B) -> (Bot -> (C -> B))) . (try (if false then true else b) with (if b then a else b)))
(\ e : (((B -> Bot) -> (Bool -> Bot)) -> ((Bot -> C) -> (Top -> Top))) . (((c b) false) (b false)))
(if (\ a : ((Bot -> Top) -> B) . (error (if a then false else true))) then ((if (try b with false) then (if (\ a : Bool . c) then (try c with true) else (c c)) else (\ a : C . true)) (try (if (try true with a) then false else c) with (try true with b))) else ((false error) (true true)))
(try (\ b : (Top -> (Top -> Top)) . (\ a : B . true)) with (try (if error then error else true) with (\ d : (B -> B) . c)))
((try (if (\ b : A . error) then (if (try a with false) then (\ d : A . error) else (\ e : Bot . false)) else (if error then b else a)) with (\ d : (C -> Bot) . (\ a : B . b))) (if (try true with (false c)) then ((try error with false) (a b)) else ((try (try c with b) with (error true)) (if true then true else error))))
(\ b : ((Bool -> Bool) -> (Bot -> (B -> B))) . ((try (false b) with error) (if ((try b with false) (try c with error)) then (c true) else (a error))))
((try (try c with b) with (try false with true)) (\ c : (B -> Top) . (if (\ e : Top . c) then (c b) else (try a with b))))
(try (\ e : (C -> Bot) . (error true)) with (try (try c with (if c then c else error)) with (\ b : Top . (if c then true else b))))
((\ e : ((Bot -> Bool) -> B) . (error false)) (\ c : (Top -> Bool) . (try error with a)))
(\ b : ((A -> (Bot -> A)) -> (C -> A)) . (if (try (\ c : C . b) with (b b)) then (\ a : (Bool -> A) . error) else (\ e : A . false)))
(if (if (if c then a else true) then (\ a : (B -> (Bool -> Top)) . (\ c : (C -> C) . error)) else (if (try c with false) then (a error) else b)) then (try (\ d : Bool . c) with (error (false true))) else (if (c (\ b : A . true)) then (try (if (error false) then error else false) with (c false)) else (\ d : (Top -> Top) . (b b))))
(if (if (\ e : (Bool -> Bot) . (try a with true)) then (\ d : C . error) else (\ a : Bot . b)) then ((if (if c then c else b) then (try (\ b : B . error) with c) else (try c with c)) (if error then (if c then c else a) else b)) else (\ a : ((Top -> Top) -> (Top -> C)) . (\ b : ((C -> Top) -> A) . (if b then true else true))))
(try (\ d : ((A -> A) -> ((C -> A) -> (Bot -> Top))) . (\ c : (C -> Bool) . b)) with ((a (try false with false)) ((true error) true)))
(if ((try false with true) (\ d : (Top -> Bot) . (c true))) then (\ e : (Top -> A) . (try true with b)) else (if (try false with b) then (try error with error) else (if false then (a true) else (if true then error else false))))
((try (\ a : (B -> C) . false) with (((if true then error else c) false) (error error))) (\ c : ((Bot -> C) -> (Bot -> B)) . (\ e : Bool . error)))
(if (try (try (b true) with false) with (\ d : Bool . error)) then (try ((false a) (\ c : (C -> Bool) . error)) with ((c a) (false error))) else (((a (\ a : B . c)) (\ b : Bot . error)) (try b with (\ b : Bot . error))))
((try ((error error) b) with ((\ b : A . true) error)) (try (try (if true then a else false) with (\ b : Bool . (try false with false))) with (if (false error) then true else (error c))))
((\ e : (Top -> Bool) . (\ a : C . false)) (try ((if false then c else a) (try a with error)) with (if a then error else a)))
((if (try error with true) then (\ b : ((B -> A) -> (Top -> A)) . (try (if c then error else false) with b)) else (false b)) ((c c) (\ a : B . (c b))))
(((if (if c then a else false) then error else (error a)) (a (\ d : B . error))) ((false error) (try c with (try b with true))))
((\ d : ((Top -> Bot) -> Top) . (if (try error with error) then true else (try a with a))) (((\ d : B . error) (try a with false)) (if b then error else c)))
(\ b : ((C -> C) -> (Bot -> C)) . (try (try c with false) with (\ b : B . c)))
(try (((\ c : Bot . false) (if false then true else false)) (try (\ a : Top . b) with true)) with (\ a : (B -> Bool) . ((if b then false else false) (false (try c with c)))))
(if (try (try false with error) with (\ c : Bool . false)) then (if (true false) then (c b) else (\ b : A . (try false with error))) else (try (if (try error with b) then (try (b error) with (error a)) else (if true then error else a)) with (\ c : (Bot -> A) . (\ d : Top . c))))
(if ((if true then b else a) ((try b with a) (\ d : Bool . a))) then (\ a : (C -> B) . (if false then b else false)) else (\ a : (B -> C) . (\ b : Bool . c)))
(if (\ b : (A -> B) . (if (try c with error) then (a true) else true)) then (\ c : (B -> C) . (\ c : Bool . true)) else (((\ c : A . true) (\ e : Bot . false)) (if (if false then error else b) then (\ e : Bot . c) else (try false with error))))
(if (if (try (if a then c else c) with b) then (b false) else (if c then c else true)) then (\ a : ((Top -> Bool) -> (Top -> (Bool -> A))) . (try (\ b : A . true) with (try false with (try c with b)))) else ((try (try b with (\ d : C . a)) with (c true)) ((if error then error else true) (try true with true))))
(\ e : ((Bool -> B) -> (Top -> (B -> C))) . (try (\ d : C . (\ c : Top . c)) with (\ c : ((Bool -> Top) -> (Bool -> A)) . (if error then c else b))))
(\ e : ((Bool -> (C -> C)) -> (Bot -> B)) . ((try (c b) with (try false with error)) ((try a with a) c)))
(\ c : ((C -> Bot) -> (Bool -> (B -> B))) . (if (if (true (if c then error else c)) then ((true false) (\ c : B . true)) else (\ b : (A -> A) . false)) then (try b with (\ b : Top . c)) else (true (error a))))
(if (try (error a) with (try true with c)) then (try ((if a then a else error) (\ b : C . a)) with (\ c : (Top -> Bot) . (if b then true else a))) else (if (try false with c) then (if error then error else a) else (try a with false)))
(if (if (try false with c) then (if (c a) then (error (if b then a else b)) else (\ e : Top . a)) else ((\ d : A . (\ a : Bool . error)) (if b then (false b) else b))) then (try (\ e : (C -> Top) . (\ c : A . true)) with (\ b : (B -> B) . c)) else (try (\ b : A . c) with (try b with b)))
((if (try (try true with c) with (b b)) then (\ b : C . (error true)) else (\ a : (C -> A) . (if b then c else c))) (try (try (if error then false else b) with (try error with c)) with ((try b with b) (\ b : A . error))))
(\ b : ((B -> Bot) -> (Bool -> C)) . (\ e : ((Bool -> B) -> B) . (if b then (try b with a) else false)))
((\ d : ((C -> A) -> (Bot -> B)) . (try (try false with false) with (\ d : Top . a))) ((\ c : Bot . true) (if false then (try b with error) else false)))
(\ a : ((Bot -> (A -> Bot)) -> (Top -> (Top -> B))) . (((if b then c else c) (try (false c) with b)) (\ a : (Top -> A) . (\ c : (C -> B) . b))))
(if ((b b) ((\ a : (B -> B) . a) (try (true error) with c))) then (if (c b) then (\ b : Bool . (c false)) else (true (try b with true))) else ((if (try c with true) then (try error with c) else (if (if c then a else b) then (\ e : Bot . c) else error)) (if (if error then true else c) then (if (error false) then (\ b : C . b) else (try b with false)) else (try a with (error error)))))
(try (if (try (if error then c else c) with (try (\ b : A . false) with b)) then ((\ e : B . b) (try b with b)) else (\ d : (Bot -> B) . c)) with (\ b : (Bot -> A) . (false (if b then b else a))))
(if (\ c : (C -> Top) . (if true then (\ a : C . c) else (try b with false))) then (if (\ e : (Bool -> A) . true) then (a c) else (true c)) else ((if (if error then a else true) then (\ e : Bool . b) else a) (if (\ d : Bool . error) then (\ d : B . error) else (\ b : C . b))))
(if (if (\ e : (A -> A) . (\ a : Bool . c)) then (if (c true) then true else (true b)) else (if c then b else (\ e : Bot . error))) then ((if false then true else (true c)) ((\ c : Bot . error) (if c then b else true))) else (((true b) (a false)) (if c then a else c)))
(\ b : ((Bot -> (B -> Bot)) -> ((Bot -> C) -> (A -> Bot))) . ((c error) (error c)))
(if (try (try (error (c a)) with ((if b then true else b) (if error then b else true))) with (if (try a with c) then (\ e : Top . true) else (try c with false))) then (try (try (if false then error else c) with false) with (\ b : (Top -> C) . (try b with a))) else (if (if a then false else a) then (\ c : (C -> B) . (error b)) else (\ e : Top . true)))
(if (if (false false) then (\ c : Top . false) else (if (\ e : B . false) then (if c then c else a) else (false c))) then (try (if true then c else (b b)) with (false (a b))) else (if (\ a : (Bool -> A) . (try (\ b : C . a) with (\ e : C . b))) then (if error then (b false) else error) else (if (\ d : (Bot -> Bot) . (a b)) then (if error then error else true) else ((try c with error) (\ a : Top . error)))))
(((if true then a else c) (if (\ a : A . c) then (\ d : B . a) else (if c then error else b))) (try (\ a : Bool . true) with (\ c : Bot . b)))
(try (if (error false) then (error c) else ((\ a : C . false) (false a))) with (if (try (\ e : A . a) with (\ c : (Top -> Bool) . b)) then ((\ c : Top . b) true) else ((\ b : Bot . error) (error c))))
(\ d : (((B -> Bot) -> B) -> (Bool -> Top)) . (if (try (true c) with b) then (false error) else (\ e : B . true)))
((try (\ e : C . a) with (try false with b)) (if (try (try b with a) with (\ b : A . c)) then (if (\ a : Top . c) then (if a then true else false) else (\ c : B . a)) else (a (try false with c))))
(try ((if (try (if c then false else a) with false) then (if a then c else b) else (c b)) (if ((if true then true else true) (if true then c else b)) then (if b then c else true) else (try b with b))) with ((try (if false then b else b) with (try false with b)) (try (if a then (c false) else (b false)) with (b true))))
(try (try (if c then b else a) with (try (if b then false else error) with (if c then c else false))) with (if (try (\ d : B . error) with ((b false) true)) then (try b with (if b then c else error)) else (if (if c then b else true) then (\ e : (Top -> A) . true) else (if a then error else a))))
((if ((if false then a else b) (try false with c)) then (try (\ c : Bool . true) with (try b with a)) else (try (try false with a) with (\ b : Bot . a))) (\ c : (C -> A) . (a true)))
(((if (if (true error) then b else (\ c : Bot . c)) then (if a then b else a) else (\ e : Bot . c)) (try (if a then error else false) with (try (a b) with (if b then error else true)))) ((\ c : C . error) (try c with true)))
(\ e : (((Top -> Bot) -> (Bool -> C)) -> (Bot -> (A -> Top))) . (\ b : (Top -> (A -> Bool)) . ((if (try c with true) then (b true) else true) (a true))))
(try (try (if false then b else (if a then false else error)) with (if true then (b b) else (try true with false))) with (((try false with true) a) (\ e : (C -> A) . a)))
(((\ e : A . b) (try c with a)) (\ e : (Bot -> Top) . (if (if c then error else true) then (try true with a) else ((if a then b else a) b))))
(if ((\ e : (C -> Top) . (\ b : B . c)) (\ d : (A -> Top) . a)) then (\ e : ((Bot -> (B -> A)) -> (C -> Bot)) . (try b with (try a with b))) else (if (try error with true) then (true false) else (try b with false)))
(\ b : (((Top -> C) -> (Bot -> Top)) -> ((Bot -> A) -> A)) . (\ b : ((B -> C) -> Top) . (try c with (\ a : Bool . c))))
(\ c : ((((Top -> A) -> (B -> C)) -> (A -> B)) -> ((Bool -> Bool) -> (Bot -> Bot))) . (try ((if b then false else false) c) with (if false then c else error)))
(\ b : ((B -> (Bot -> Bot)) -> (B -> Bool)) . (\ c : (((A -> C) -> (A -> A)) -> ((B -> Bot) -> C)) . (if (try (\ d : Bool . error) with (try false with c)) then ((if error then error else true) a) else (\ d : Bool . error))))
(\ e : (((Bot -> Bool) -> (Top -> Top)) -> ((B -> A) -> ((B -> Top) -> (Bool -> A)))) . (try ((if false then b else b) true) with (if c then b else a)))
(try (if ((if (if true then b else true) then true else false) (b c)) then (try true with (\ c : A . a)) else (try (try a with b) with (c false))) with (\ b : (((A -> A) -> B) -> ((Bot -> B) -> Bool)) . (\ e : (A -> B) . (try (if c then b else true) with (if b then error else b)))))
(try (try (try c with c) with ((\ d : B . false) (c c))) with (if (try true with error) then (\ b : (Top -> Bool) . a) else (try error with false)))
(\ e : (((Bool -> B) -> (C -> A)) -> ((A -> A) -> C)) . (if (try (true error) with (try (\ d : Bool . error) with (if a then error else false))) then (\ b : (B -> Top) . (\ b : (Bool -> A) . true)) else ((\ a : Bot . a) (\ b : Top . false))))
(try (\ c : ((Bot -> C) -> A) . ((try true with a) (try c with (if true then error else b)))) with (if (if c then c else error) then (if b then c else b) else (if c then (false false) else (false c))))
((\ d : ((Top -> Top) -> (Top -> C)) . ((if c then false else true) b)) (try (\ e : Top . a) with (error true)))
(\ a : (((Bot -> A) -> (A -> B)) -> ((C -> Bot) -> (B -> Bool))) . (\ e : ((Bool -> Top) -> (C -> C)) . (if (try (error false) with (\ a : C . false)) then (a (\ d : C . c)) else (\ b : Bot . a))))
(\ a : ((Top -> Bool) -> (((Top -> Bot) -> B) -> ((A -> Bot) -> B))) . (if (false true) then (\ c : (A -> A) . (\ e : Bot . error)) else (\ a : Top . b)))
(\ d : (((Bool -> B) -> ((Bool -> A) -> B)) -> (Bot -> C)) . (if ((\ b : Bot . true) (try c with a)) then (if c then (if b then c else c) else (try false with b)) else ((a false) a)))
(try (if (if (\ c : A . a) then c else c) then (try (if error then c else a) with (if c then true else false)) else ((\ e : B . a) a)) with (if ((try error with true) (try error with true)) then (a (if c then b else b)) else (try (b true) with (\ c : B . c))))
(if (\ c : ((Bool -> Bool) -> (A -> A)) . (if false then c else a)) then ((((if error then true else b) a) (if false then false else a)) (if (\ c : (Bool -> Bot) . false) then (try b with c) else (if error then a else error))) else (\ d : (Bot -> (A -> Bool)) . (if (c c) then (\ e : Bool . false) else (true b))))
(if (\ c : (C -> B) . (a true)) then (\ a : (B -> (Top -> Top)) . (if (try true with b) then (\ c : B . true) else true)) else ((\ a : ((Bool -> A) -> (A -> Bot)) . (if false then (\ e : Bot . error) else (\ e : A . error))) ((try error with true) error)))
((if (if a then c else (if b then a else a)) then (try error with b) else (\ b : (Bool -> Bot) . (try true with c))) (\ b : ((A -> C) -> (C -> (A -> Bool))) . (error false)))
(try ((try c with false) (\ d : (Top -> A) . true)) with ((b false) (\ e : Bot . a)))
(\ e : (((B -> B) -> (B -> B)) -> ((B -> C) -> Top)) . (\ b : (((Top -> B) -> (A -> C)) -> (B -> Bool)) . (try (if c then false else b) with true)))
((if (try (if b then b else b) with (try a with true)) then (\ d : C . error) else (try true with c)) ((\ b : (Top -> Top) . (if true then c else error)) (\ a : Bool . b)))
(if (if (try (true (if true then error else true)) with (\ a : Bot . b)) then (if (try false with a) then (if (try b with b) then error else a) else (if b then c else (\ a : Top . c))) else (if b then (error false) else a)) then (if (\ a : (Bot -> A) . true) then (try a with error) else (false c)) else (\ c : (Bot -> C) . (\ e : (B -> (C -> A)) . (try (true true) with c))))
((\ d : (B -> C) . (\ b : (A -> A) . error)) ((error (try a with b)) (\ b : A . error)))
(try (if ((if a then true else b) c) then ((if false then true else error) false) else (if true then (if a then c else b) else (if c then c else a))) with (if (try (try true with false) with c) then (try (\ e : Top . true) with (true a)) else (a false)))
(\ d : ((Top -> (B -> A)) -> ((Bot -> B) -> A)) . (try ((if b then true else c) false) with (\ e : A . false)))
((try (try (\ e : A . a) with (if a then c else c)) with (\ e : (Bot -> Bot) . (try c with a))) (if (try (if (if b then error else error) then (try true with b) else true) with ((if true then b else false) b)) then ((if error then b else true) (c true)) else (try b with b)))
(\ a : ((C -> Top) -> (Bool -> A)) . (try ((if true then false else true) (try false with (\ e : Bool . error))) with (if c then (if a then b else false) else (\ c : Top . b))))
(\ d : ((A -> Bot) -> (C -> C)) . ((if true then true else (c false)) (false b)))
(try (\ b : (Bool -> B) . (a (if error then a else true))) with (try (if (if error then c else true) then (\ c : C . (if true then error else a)) else (\ c : Bot . true)) with (\ c : A . error)))
((try (try (\ e : A . true) with (if a then a else error)) with (\ c : (Bool -> C) . a)) ((try (if error then error else b) with (try error with c)) (\ b : Bool . true)))
(if (if (if (b (\ a : Bot . error)) then (try c with a) else (if c then c else error)) then (try (\ e : (B -> A) . (try false with c)) with (\ e : Bool . (try false with a))) else ((\ e : A . a) (try error with error))) then (((c true) c) ((if (if true then false else true) then error else (try true with false)) (try c with b))) else (if (\ a : Top . false) then (\ c : C . false) else (try true with b)))
(\ c : (((Top -> B) -> (Top -> B)) -> ((Bot -> C) -> A)) . ((if (try true with false) then a else b) (c true)))
(try (if (if a then false else a) then (try b with (try false with true)) else (try false with true)) with (\ c : (Top -> Bot) . (try (try c with false) with c)))
(\ c : (((Top -> Bool) -> Bot) -> (Bool -> Bool)) . ((if a then (\ e : Top . a) else c) (try c with b)))
(\ d : ((Top -> Bool) -> (Bool -> Bool)) . ((if (if a then true else false) then (try true with error) else false) (if error then (if false then b else false) else (true a))))
(try ((\ d : C . b) (if c then (try true with a) else c)) with (if (\ e : C . b) then (try (try (\ b : C . c) with (false c)) with (\ c : Bot . (try true with error))) else (try a with c)))
(if (if (if (try b with b) then (try (try error with a) with error) else (\ a : Bot . true)) then (\ c : B . true) else (\ a : (Top -> Bool) . (if true then (if error then b else b) else true))) then (try (((\ c : A . a) b) (if (if b then a else a) then error else (try a with false))) with (\ d : ((Bool -> C) -> (C -> Bot)) . (if true then b else error))) else (if ((b error) (\ c : A . (false error))) then (\ a : (Bot -> Bool) . (a (error b))) else (if (try error with (\ c : B . b)) then (c true) else (try a with false))))
(try (\ a : ((Top -> B) -> (Bot -> (Bool -> Top))) . (\ c : (C -> Bool) . false)) with (try (\ c : (Top -> C) . (if error then a else (b false))) with ((a b) (try error with (try false with a)))))
(\ b : (((A -> B) -> (C -> Bot)) -> ((B -> Bool) -> (Bool -> C))) . ((error c) (if a then error else error)))
(if ((try ((try false with true) b) with (if false then false else error)) (\ c : (Bool -> Bot) . b)) then (\ a : (A -> Bot) . (\ c : (C -> Top) . (true b))) else ((try (try c with b) with true) (try a with false)))
(if (try (\ b : Bot . true) with (\ d : (Top -> Bool) . error)) then (if ((try c with b) (\ e : Top . true)) then (try (c b) with true) else ((try a with error) (try true with error))) else (((a error) (error false)) (\ e : (B -> B) . (\ d : A . b))))
(\ a : (((C -> Bool) -> (Bool -> C)) -> (Top -> Bot)) . ((\ b : (A -> Bool) . error) (if (\ b : Bot . error) then (\ d : B . a) else error)))
(if (try ((try (\ d : Top . a) with (c error)) (c b)) with (\ c : Bot . false)) then (\ d : (Bot -> C) . (\ c : Bool . a)) else ((false false) (if b then b else b)))
(try (try (false error) with (try (try c with c) with false)) with (try (try (true true) with a) with (try (\ b : A . error) with ((if b then error else false) false))))
((\ a : (B -> Bool) . ((if true then (b a) else (c b)) (c a))) ((try error with b) (\ b : (B -> Bot) . true)))
(try (try (if (try a with c) then false else false) with (\ d : B . false)) with ((try (try true with (if c then a else true)) with (if true then b else false)) (try error with true)))
(((try true with b) (\ a : A . error)) (\ b : (Bool -> (Bool -> Bot)) . (\ c : ((Top -> Bot) -> (Bot -> Top)) . (\ c : Bot . b))))
(\ a : ((C -> Top) -> ((Top -> C) -> B)) . ((try false with a) (\ a : (Bot -> Top) . false)))
((if (\ d : (Bot -> A) . (error true)) then (if (\ e : Bool . error) then (if c then false else c) else (try true with b)) else ((if c then false else error) (if false then a else true))) (\ e : ((Bot -> Bot) -> ((C -> Top) -> (Bool -> Bot))) . (\ e : (C -> (Top -> Top)) . (try (true a) with (try c with c)))))
(\ e : ((Bot -> C) -> ((Bot -> Top) -> Bot)) . (try (\ c : C . a) with (if b then a else a)))
(\ e : ((((Top -> B) -> (Bool -> A)) -> (C -> Top)) -> (Bool -> (Top -> Bot))) . (if (try (c false) with (try b with error)) then (if (if true then false else error) then (\ b : B . a) else (if (false a) then error else false)) else (if ((a error) (b b)) then (try c with false) else (true error))))
(try ((if c then error else false) (b false)) with (\ c : ((Bool -> (B -> C)) -> (Bot -> Top)) . ((\ b : A . false) (a c))))
((if (if (\ d : A . c) then (b b) else true) then (\ d : C . (if a then false else false)) else (\ e : B . false)) (\ a : (B -> (Bot -> C)) . (if (\ d : C . b) then (try false with error) else (try a with a))))
(if (if (if (if true then error else a) then b else (\ b : B . b)) then (\ e : Bool . false) else (if a then false else (b true))) then (try (if error then error else a) with (\ a : Bot . false)) else (try ((error a) (if error then true else true)) with (error false)))
(try (if (\ d : Bool . a) then (\ a : B . true) else (if error then b else a)) with (if (error false) then (if a then false else true) else (\ a : Bool . error)))
(if (try (\ d : (Bool -> C) . true) with (if (if false then c else error) then (if a then true else false) else (try c with b))) then ((if b then true else a) (b false)) else (\ b : (Bot -> Bool) . (try c with false)))
((\ d : (B -> Top) . (\ a : C . false)) (try (\ a : (Top -> C) . (if (\ a : A . c) then (try true with c) else c)) with (try (b c) with (if error then error else a))))
(((\ d : A . c) (if (\ c : A . b) then (\ d : (Bool -> Bot) . a) else (try error with error))) (try (try (\ d : B . true) with true) with ((try (\ b : Bool . error) with (if true then a else error)) (try b with c))))
(try (try (false c) with (try false with (try a with true))) with ((a a) (\ d : (Bool -> A) . (c c))))
(\ c : ((B -> B) -> (Bool -> Top)) . (\ d : ((Top -> Top) -> (B -> A)) . ((b b) (\ e : A . true))))
((\ c : ((B -> B) -> A) . (\ e : B . c)) (\ c : (Bool -> Top) . (a c)))
(\ b : ((((C -> Bot) -> (B -> C)) -> ((B -> C) -> (Bool -> Bot))) -> ((Bool -> Top) -> (Bool -> Bool))) . (try (\ d : Bot . true) with (try true with error)))
(try (\ d : ((A -> Top) -> (Bot -> Top)) . (if (c error) then (try b with true) else (a true))) with (\ b : (Bot -> C) . (\ a : (B -> Bool) . true)))
(\ a : ((Bot -> Bool) -> ((Bool -> B) -> Bot)) . (\ c : (Bot -> A) . (\ e : B . c)))
((try (c false) with (a c)) (\ d : (Top -> Top) . (if c then a else error)))
(((if c then false else a) (\ c : (Bot -> A) . (try (try error with a) with b))) (if (try true with error) then (true error) else (try (false a) with b)))
(\ d : ((A -> Top) -> (A -> Top)) . ((try true with b) (if true then (if false then error else b) else false)))
(if (try (b error) with (c true)) then (if (false (try error with error)) then ((try (\ b : Bot . b) with c) (try a with (if c then error else true))) else (true error)) else (if (\ a : Bot . c) then (a false) else (\ a : C . error)))
(if (if (false (try true with true)) then (\ d : (A -> B) . (if true then c else a)) else (if c then (if false then b else error) else (if error then true else a))) then (\ b : ((Top -> Bot) -> (B -> A)) . (try (try error with c) with a)) else (try (try true with (try c with false)) with (if true then b else (if a then error else a))))
((try (try c with c) with (\ b : C . b)) (\ b : (((Bot -> Bot) -> C) -> (Bot -> C)) . (try (\ e : C . true) with (c c))))
(try (try (error (\ c : B . false)) with (if true then c else false)) with ((try (if (b error) then (error a) else false) with ((c error) (a true))) (try (try false with (\ e : Bool . error)) with (if (try error with error) then (if b then true else false) else b))))
(\ a : (((Bot -> Bot) -> (A -> A)) -> ((Bool -> Bool) -> B)) . (\ c : ((B -> (A -> B)) -> (A -> C)) . ((b false) (try false with true))))
(\ a : ((A -> Bool) -> (((B -> Top) -> A) -> (A -> A))) . (\ c : ((Bool -> Bool) -> ((Bool -> C) -> (Bot -> Bool))) . (if (\ b : Bot . error) then (if (try error with error) then b else false) else (if (if b then true else true) then (error true) else error))))
((if (try (\ d : A . b) with a) then (try b with false) else (try (\ b : B . b) with error)) ((c true) (\ a : Top . error)))
(((b c) (error c)) ((try (\ c : C . false) with false) (try (try error with b) with (a true))))
(if (\ c : (C -> Bot) . (if b then a else c)) then (\ e : (Bot -> Bot) . (if false then b else error)) else (if (try (try true with false) with (\ c : Top . true)) then (if (if (if a then true else error) then (if c then true else true) else c) then (try b with a) else (\ d : B . true)) else ((if a then b else c) (if a then false else a))))
(if (\ b : ((Bool -> B) -> (Bool -> B)) . ((error false) (try true with c))) then (try (false a) with (\ d : B . (try c with c))) else (try (try (try false with c) with a) with (\ c : A . a)))
(try (\ e : ((Bool -> B) -> (Bool -> A)) . ((true a) (if c then c else false))) with (try (try b with c) with (\ b : Bot . true)))
(if (try (\ d : (Bool -> Top) . (c a)) with (try b with (try a with b))) then (if ((try (\ b : C . false) with a) (a false)) then ((\ b : Bool . true) c) else (if error then (\ a : A . true) else (error a))) else (try (if true then false else c) with (if a then (error a) else b)))
((((try (if a then false else a) with (if true then error else b)) (if (\ d : B . c) then (try error with b) else (try c with false))) (\ d : ((C -> A) -> (Top -> B)) . (c c))) (try (\ a : ((Bot -> A) -> A) . (if false then b else true)) with (try (if a then c else true) with (a (if error then true else error)))))
((\ c : ((Top -> Bot) -> Bool) . (try (true b) with (\ b : Bool . false))) (try (if c then b else (if b then b else a)) with (if (b true) then error else true)))
(\ b : ((B -> Bool) -> (Bool -> Top)) . (try (try (a false) with c) with (try b with false)))
(try (try (try a with a) with (try (try c with true) with a)) with (\ b : (Bool -> Bool) . (error error)))
(\ e : (((C -> Top) -> (Bool -> Bool)) -> (Top -> Bool)) . (if (try (try c with true) with (if a then c else error)) then (try false with b) else (\ d : (C -> C) . error)))
(try ((try (\ a : Top . error) with true) (\ b : B . a)) with (try (try (if false then a else false) with (if error then b else c)) with ((try true with false) (\ a : A . b))))
(if ((if c then a else false) (false c)) then (\ e : (((Top -> B) -> Top) -> (A -> C)) . (\ c : (B -> A) . error)) else (if (if false then true else c) then (try (\ c : B . c) with (if c then a else b)) else (if (try false with b) then a else error)))
(\ b : ((Bot -> Bot) -> ((C -> C) -> B)) . (\ a : (A -> B) . ((if (try a with false) then (try b with b) else (if a then c else true)) (error b))))
(\ b : (((C -> A) -> (Top -> Bool)) -> (C -> Bool)) . (try (try (try a with true) with (\ b : Bool . error)) with (\ e : (Bot -> B) . (try true with b))))
(try (try (a (try c with false)) with (\ a : Bot . a)) with (\ c : ((B -> A) -> A) . (try true with a)))
(\ b : (((C -> Bool) -> Top) -> ((Bool -> Bool) -> (Bot -> Bot))) . (try (if (if true then c else c) then (error c) else (if a then false else a)) with (try (try (\ c : Bool . true) with (\ b : Bot . b)) with (\ c : Bool . true))))
(\ d : ((A -> (Top -> Bool)) -> (Top -> (C -> Top))) . (\ e : ((Top -> B) -> B) . (if true then b else false)))
(\ d : (((A -> A) -> (B -> Top)) -> (C -> Bot)) . (if ((try false with (\ d : A . c)) (\ c : A . c)) then (if (try (\ c : B . false) with (try b with false)) then (error error) else (true true)) else (try c with (\ a : C . a))))
(if (\ a : ((Top -> A) -> (B -> Top)) . (\ d : (Top -> Top) . (error a))) then (try (if c then false else false) with (try c with c)) else (if (try c with a) then (\ e : (A -> A) . error) else (\ c : Bool . error)))
(((\ b : (B -> C) . (\ a : C . false)) (if (\ e : Bot . false) then (false true) else b)) (try (try (try c with a) with (\ b : B . false)) with (if a then c else a)))
((if (if (try a with b) then a else false) then (if (\ c : Bot . error) then a else (c b)) else (try c with (\ d : Bool . false))) (try (try a with (try b with false)) with (try b with a)))
(\ d : ((((A -> Bot) -> Top) -> ((C -> C) -> Bot)) -> (Bot -> (C -> C))) . (if (try (\ b : C . (\ a : Top . error)) with (c (b true))) then ((\ d : A . c) (\ d : A . (try c with false))) else (if (\ c : Bot . true) then a else error)))
(\ e : ((Bot -> A) -> (Bot -> A)) . (\ d : (Bot -> A) . (\ b : B . c)))
(try ((if (if false then b else a) then (\ b : A . c) else b) ((a error) (false (if c then false else a)))) with (try (try a with (\ e : Top . b)) with (try (false false) with (try a with false))))
(\ c : ((Bool -> Bool) -> (Bot -> Bool)) . (((error b) a) (try b with false)))
(((\ e : (C -> B) . (if c then a else a)) (if true then c else (false false))) (\ d : (B -> Bot) . (\ b : (C -> Top) . error)))
(\ d : ((Bot -> B) -> (A -> A)) . (try (((try b with c) (c false)) (try a with true)) with (try (\ b : Bot . false) with (error false))))
((if (if b then (\ a : Bot . c) else (c true)) then (false (try error with b)) else (if a then false else c)) (\ e : ((B -> Top) -> (Bool -> C)) . ((c c) (try a with a))))
((if (\ a : ((Top -> Bool) -> (Bot -> Bool)) . (try b with false)) then (try false with a) else ((if a then b else c) (c b))) (if (try b with (try false with error)) then (\ c : A . false) else (try a with b)))
(try (\ a : (B -> (Top -> B)) . (\ c : Top . (try a with c))) with (if (try a with (\ c : Top . error)) then (\ d : ((A -> A) -> (Top -> C)) . (if true then false else c)) else (\ e : (Bool -> A) . (c a))))
((\ a : ((Top -> Top) -> (Bot -> A)) . (false c)) (\ c : ((C -> B) -> B) . ((try b with b) (false a))))
(if (try (try a with c) with (\ e : (C -> Bot) . (\ a : A . (\ c : C . error)))) then (if (if (try a with false) then (if true then true else error) else (try a with b)) then (true (\ a : C . c)) else (if true then error else b)) else (\ a : ((A -> Bool) -> ((Top -> B) -> (Top -> B))) . (\ a : (C -> C) . a)))
(try (\ e : (Bot -> Bool) . (try (try b with error) with (try true with false))) with (if ((if true then error else a) (if c then true else (if a then false else error))) then (if c then true else false) else ((false c) (try c with true))))
(if (try (if true then b else true) with (\ a : A . (error false))) then (try (try true with true) with (try (\ a : B . a) with (if c then (if a then a else c) else (if a then true else true)))) else (try (try (error c) with ((error a) false)) with (if false then a else (try error with a))))
(if (if (\ c : (Bool -> Bool) . (try false with false)) then (if c then false else true) else (if true then (\ c : B . error) else error)) then (\ a : ((B -> (Top -> Top)) -> (B -> A)) . (try (\ d : Top . a) with (if error then (try error with true) else error))) else (if (\ b : (Bool -> A) . (if c then a else error)) then ((if (if c then false else a) then false else (try false with b)) (\ a : A . error)) else ((false a) (false a))))
(if ((error c) (if (try c with true) then (if (\ e : B . true) then b else (\ c : Top . error)) else (\ e : (Top -> Bool) . b))) then (\ d : ((B -> Bool) -> C) . (if (\ d : Bool . true) then (\ a : C . c) else (false error))) else (\ b : ((A -> B) -> (C -> Top)) . (if (try (try b with a) with b) then (false c) else (\ e : (B -> Bot) . c))))
(try ((try b with b) (\ d : A . false)) with (try (try b with false) with (try a with c)))
(if (try (\ d : B . error) with (\ e : A . a)) then (\ e : ((Bool -> (Bool -> C)) -> ((C -> Bot) -> Bot)) . ((if error then false else true) (if true then c else true))) else (if (try b with c) then (\ e : Bot . b) else (if (if b then true else false) then (\ e : B . true) else (if false then a else b))))
((\ c : (A -> A) . (try (\ a : C . c) with b)) (\ c : (Bool -> Bot) . (true a)))
(if ((try true with a) (try true with c)) then (if (if (try error with false) then (\ e : Bot . false) else (if false then false else a)) then (false b) else (true (\ d : Top . b))) else (try (if b then (true b) else (try c with error)) with (b true)))
(try (if (try false with a) then (try (\ b : Top . a) with (if false then false else a)) else (try ((if a then true else error) (\ a : C . a)) with (try b with error))) with (((\ d : B . a) c) ((\ c : Bool . c) (b c))))
((\ a : (Bool -> C) . (if error then a else a)) (\ a : ((C -> Bool) -> (Bot -> C)) . (try (try error with c) with (if c then c else false))))
(try (if (try (try b with a) with a) then ((try true with b) error) else (try false with error)) with ((try (\ a : Bool . c) with error) (\ b : ((C -> Bot) -> (Bool -> A)) . (if a then true else false))))
(try (try (try c with false) with ((\ d : A . false) false)) with (try (try (if b then a else error) with b) with (\ b : (B -> B) . (\ e : (Bool -> B) . b))))
(\ b : (((B -> Bool) -> (Top -> Bot)) -> (Bot -> A)) . (\ e : ((Bot -> B) -> Bool) . (false c)))
((try (\ c : (C -> Top) . ((b false) c)) with (try false with (b true))) (try (if (if a then true else false) then (if a then c else true) else b) with (\ c : A . (try error with c))))
(\ e : ((Bool -> Top) -> ((Top -> Top) -> Top)) . (\ c : ((C -> A) -> Bool) . (if (c c) then true else a)))
(if (\ c : ((Bot -> Bool) -> Top) . (((try error with false) (try error with b)) (if true then c else true))) then (\ c : ((C -> Bot) -> ((C -> C) -> A)) . (if (true error) then (\ a : (Bot -> A) . a) else (error error))) else ((try (c c) with (false false)) (try b with c)))
(((a (if c then true else b)) (if (c a) then true else (\ a : Bot . true))) (try (c c) with (try true with true)))
(\ c : (((Top -> Top) -> (C -> Bool)) -> (B -> A)) . (try (if error then b else true) with (\ c : (B -> C) . (if b then true else false))))
(\ c : ((Bot -> (C -> B)) -> ((C -> A) -> (Bool -> A))) . (try (if c then error else true) with (b c)))
((\ a : (B -> (A -> Top)) . (if error then b else (error b))) (if (try a with (\ c : Bool . b)) then (if error then a else b) else (if (if b then a else error) then (\ b : C . false) else (if error then c else true))))
(try (if (try (if (\ d : Bot . false) then (\ b : Bot . b) else (try a with false)) with ((error true) (try false with b))) then (if (if a then error else false) then (\ b : Bot . (true error)) else (if (c error) then (if error then false else error) else error)) else (if (try (\ e : Bool . a) with (\ c : Bool . b)) then (\ d : C . c) else (\ d : (A -> Top) . (try a with b)))) with ((\ c : (B -> C) . (b (b error))) (try (\ c : Bool . c) with (\ e : Bot . (\ b : Top . false)))))
(\ d : ((C -> B) -> ((Bool -> Bot) -> (C -> C))) . (\ a : (((Bot -> A) -> A) -> (B -> A)) . (if (\ a : A . true) then (\ c : A . (try false with b)) else (if true then b else b))))
(\ b : ((C -> C) -> (B -> Top)) . (\ a : ((Bot -> (C -> C)) -> (C -> (C -> A))) . (try (true false) with (true b))))
(\ a : ((C -> A) -> ((A -> Top) -> B)) . ((if c then false else c) (\ c : A . false)))
(try (if ((\ e : A . c) (false false)) then (((if true then a else false) (false b)) (\ c : Bool . (if false then b else b))) else (if a then a else false)) with (\ c : ((Top -> C) -> Top) . (if (try true with a) then false else (if a then error else c))))
((try (if c then (try b with c) else (true c)) with (\ e : ((A -> A) -> (A -> B)) . (if (if error then c else c) then (try c with error) else (\ d : Top . true)))) (try (try c with (b c)) with (if b then false else b)))
(\ c : (((Top -> Bool) -> (B -> C)) -> ((C -> B) -> (B -> Bool))) . (((if false then b else false) (try true with false)) (if c then (\ d : Top . c) else false)))
((if ((\ d : C . b) (if error then false else (c error))) then (\ d : (Top -> Bot) . (if b then a else (error a))) else (\ a : ((Bool -> Bool) -> Bot) . (if false then false else true))) (try (try b with (a false)) with (true (try false with a))))
(\ c : (((C -> Bot) -> ((A -> Bot) -> (Bool -> C))) -> ((B -> B) -> (Bot -> C))) . (try ((try true with true) (try (if error then false else b) with (if b then b else a))) with ((\ e : (A -> A) . (b a)) (try a with c))))
(try ((\ a : (Top -> Bool) . (try false with b)) (try c with (if a then false else c))) with (if ((if c then b else true) false) then (if (c true) then (try error with a) else true) else (if ((\ e : B . false) b) then (try false with false) else (try false with a))))
(if ((a a) (try (if b then true else false) with (a c))) then (if (\ a : (C -> Bool) . b) then ((if (if a then c else c) then false else false) (if c then false else a)) else ((c false) (if error then c else true))) else (try ((if true then (\ b : Bot . false) else (try error with a)) (try b with error)) with (if (error (try a with a)) then (try false with error) else (a false))))
(if ((\ d : (Bool -> Top) . (\ d : C . (error error))) (\ a : (B -> Top) . (b b))) then ((false (if error then error else b)) (if (false a) then (try c with false) else (try error with c))) else (try (if (try a with b) then (false a) else (try (try true with a) with a)) with ((\ c : C . c) (\ a : Bot . c))))
(if (try (if (if false then b else b) then (try error with true) else (if true then a else true)) with (\ b : (B -> B) . (if true then false else (if b then false else b)))) then ((\ c : Bool . false) (try a with c)) else (\ d : (B -> (Top -> Bot)) . (try b with c)))
(\ d : ((((Top -> Bool) -> Bool) -> ((A -> C) -> C)) -> ((C -> A) -> C)) . ((try error with b) (try (\ d : Top . true) with true)))
(if (((if c then false else c) (\ c : B . true)) (\ e : A . (if true then false else c))) then (if (if (if error then true else b) then false else b) then (false (if false then error else a)) else (\ a : A . c)) else (((try (if true then error else error) with (try error with a)) (\ d : C . error)) (try (if b then true else c) with a)))
(try (\ b : ((Top -> C) -> C) . (try b with true)) with (if (\ c : (A -> C) . (try a with b)) then (\ e : (A -> A) . (if (\ b : C . false) then error else error)) else (if false then true else a)))
((if ((a (try true with false)) (error true)) then ((\ a : (Bool -> A) . b) (\ b : (C -> C) . (try true with false))) else ((false false) (\ e : Top . error))) (if (\ a : Bot . (\ e : C . true)) then (\ c : ((Bool -> Bool) -> (Bot -> A)) . (c c)) else (((try b with a) (try true with b)) (\ b : B . b))))
(\ d : ((B -> (Bool -> Top)) -> (B -> A)) . (try (\ b : (Top -> B) . (try true with error)) with (\ c : C . (if c then b else a))))
(try (\ b : (Bool -> Bot) . (\ d : C . error)) with (if (try false with (error true)) then (if true then c else b) else (\ e : (A -> A) . (a false))))
(\ b : (((Top -> A) -> B) -> (Bool -> Top)) . (if (try (if c then c else a) with c) then ((if (a true) then a else true) (try c with b)) else (try (\ d : B . true) with (try true with c))))
(if (if (a false) then (try c with (a true)) else (if true then false else (\ e : Bot . true))) then (if ((if true then c else true) (if b then (a a) else (try error with error))) then (if (false b) then (b b) else c) else (\ b : (Bot -> (A -> Top)) . (try c with (try b with false)))) else (if (try true with (\ b : B . b)) then (\ e : B . error) else (a b)))
(\ b : ((Top -> Top) -> (C -> Top)) . ((false b) (if (try c with error) then c else a)))
(try (\ b : (Bool -> Bool) . (if false then c else c)) with (if (if (b false) then (if b then b else false) else (if true then b else c)) then (if (\ c : C . error) then (if error then (try true with c) else a) else (if error then c else b)) else (if (try true with error) then (try a with true) else (c b))))
(if (try (b true) with (if (a error) then (\ d : Bot . true) else (try false with true))) then (if ((true true) b) then (try (error (try error with b)) with ((b error) a)) else (a b)) else ((try (if true then false else true) with (a b)) (if (try (try false with c) with (if b then b else a)) then (if false then error else true) else (try a with true))))
(\ e : (((B -> Top) -> A) -> ((A -> (A -> Bool)) -> (B -> (A -> B)))) . (try (c b) with (b error)))
(try (\ d : (Bot -> B) . (\ d : Bot . (if c then a else error))) with (if ((if false then false else true) false) then (try (if a then c else a) with (try a with true)) else (try false with (c false))))
(if (\ e : ((A -> A) -> ((Top -> Top) -> (C -> A))) . ((if c then b else (if error then true else true)) (if c then b else b))) then ((if (try false with c) then (\ d : C . a) else (try true with true)) (\ d : (Bool -> Bool) . (try true with false))) else (\ c : ((B -> B) -> C) . (try b with c)))
(if ((try a with error) (a error)) then (\ b : (((Top -> A) -> Bool) -> (Bool -> B)) . (try (try a with true) with (\ b : (Top -> C) . c))) else (if (if error then a else b) then (b (try error with c)) else (if a then c else (true error))))
((\ e : (C -> (C -> C)) . ((\ c : Top . a) (if true then c else c))) ((a true) (b error)))
(if (\ a : ((C -> B) -> (C -> A)) . (\ c : B . (try b with b))) then (if (try true with error) then (\ e : (Top -> Bool) . (try true with a)) else (\ a : (B -> Top) . (try (\ b : B . false) with false))) else (try ((if false then c else b) c) with (if c then a else a)))
(try (\ c : (((Bot -> B) -> (Bot -> Bot)) -> (A -> B)) . (try ((if error then true else false) error) with (try true with error))) with (if (\ e : (Bool -> A) . (if false then false else c)) then ((try b with false) true) else (if a then c else c)))
(try (if (if c then (try a with true) else (\ d : Bot . true)) then (\ a : B . false) else ((\ d : Bot . b) error)) with (try (\ c : Bool . b) with (c false)))
(\ a : ((Bool -> C) -> (Bool -> Bool)) . (if (if a then false else (true false)) then (try b with true) else (try b with false)))
(if (try (if a then b else (try true with error)) with (if (b true) then false else (error false))) then ((\ d : Bool . false) (try b with error)) else (try (b c) with (\ c : C . true)))
(\ d : (((Bot -> Top) -> (Top -> Top)) -> ((Bot -> B) -> ((A -> Bool) -> (Bool -> Top)))) . (if (try (try false with c) with (\ c : A . true)) then ((\ d : B . true) (try error with b)) else ((if error then false else error) (try (if a then error else false) with a))))
(\ b : (((C -> A) -> C) -> ((B -> Top) -> (A -> B))) . (if (try true with (try b with b)) then (\ e : Bool . b) else (if (if a then error else false) then error else false)))
(if (try ((\ b : C . c) (try c with (if true then error else true))) with (try (if a then c else b) with (false c))) then (try (\ d : A . b) with (error (\ a : Bot . c))) else (if (if (c error) then (if error then error else (\ c : Top . b)) else (c error)) then (\ a : (B -> Top) . (try false with a)) else (try error with error)))
(if (if ((a false) (if (if true then c else error) then (try a with a) else true)) then (if true then b else (if false then false else true)) else ((if b then true else false) (\ a : Bot . true))) then (try (true false) with (try (a error) with (try (\ b : B . false) with (true c)))) else ((\ d : C . true) (try true with b)))
(\ e : ((Bot -> B) -> (Bot -> C)) . (if (b c) then (\ b : Bot . false) else (if error then false else true)))
(try ((try c with (\ e : C . c)) (if ((if true then error else true) a) then (if a then a else (try error with c)) else (try error with (try b with b)))) with (if (if (if false then error else b) then false else b) then (try (try (try false with true) with (\ c : A . error)) with (try (try b with false) with c)) else (((if c then true else error) (\ a : B . false)) (if error then false else true))))
(\ c : ((A -> Bot) -> (B -> Top)) . (if (b (true false)) then (error (b c)) else ((if (if false then a else a) then c else (c true)) (\ b : (Bot -> C) . true))))
(try (try (\ e : (Bot -> A) . c) with ((\ e : Bool . a) b)) with ((\ e : Bot . (\ b : Bool . true)) (if b then error else (try a with false))))
(\ e : (((Top -> Bool) -> Top) -> ((Bool -> Top) -> B)) . (try (\ c : Top . (if false then a else b)) with (if c then (\ d : Bool . c) else (try error with b))))
(if (\ a : (C -> (Bot -> B)) . (if (\ d : A . b) then (try true with b) else a)) then ((try false with (\ a : Bool . error)) (\ a : Top . a)) else ((if false then c else c) (if false then c else c)))
(\ a : (((B -> Bool) -> (Bot -> A)) -> (((B -> Top) -> (B -> A)) -> (C -> Bool))) . (\ c : (Top -> (A -> Bool)) . (a false)))
((\ c : ((Top -> Bot) -> (Top -> (Bool -> C))) . (\ a : ((Bot -> B) -> (C -> A)) . (if error then error else true))) (if (if (if false then b else error) then (error false) else (if a then b else b)) then (if (try false with (if c then error else true)) then (error c) else (error (if false then false else a))) else ((\ c : (Bool -> Top) . (false c)) (true c))))
(try (\ b : (Bot -> Bot) . (if (if (if a then false else true) then a else a) then (\ b : (Bool -> Bool) . b) else (true c))) with (if (try (\ e : Bool . true) with ((if true then a else c) (if false then b else c))) then (if (\ a : (B -> B) . (if error then b else a)) then ((try b with a) (try error with c)) else (false false)) else (if true then (try a with c) else (if error then true else error))))
(if (if (try true with (\ c : Bot . false)) then (if (true c) then (try error with c) else b) else (\ a : Top . c)) then ((\ e : C . b) (if b then (try error with a) else (try c with a))) else (\ d : (Bool -> Top) . (try (\ b : C . true) with (if b then b else c))))
((try (try a with error) with (try c with b)) (try (try ((true error) (if error then a else error)) with (c true)) with (false a)))
(try (try (\ d : (A -> Bot) . (try (try error with error) with (true b))) with (try (try c with error) with (\ c : (B -> Bool) . c))) with (((\ e : C . error) false) (\ a : (B -> Top) . (if a then c else false))))
(try ((\ a : (A -> Top) . (if error then b else true)) ((\ e : Bot . false) b)) with (try (\ b : (Bot -> Top) . (error error)) with (try error with true)))
((try ((try true with error) (if b then b else true)) with (try a with (true b))) (if (if a then b else true) then (\ a : (A -> C) . false) else (\ b : (B -> Bool) . (true a))))
(((\ b : A . (c c)) (if (try error with c) then (if b then a else error) else (if c then false else b))) (if (\ d : A . error) then (try false with (if true then true else b)) else (if false then true else a)))
((\ e : ((Bot -> B) -> A) . (\ e : (C -> B) . (if (try b with false) then error else a))) ((if (false false) then (\ a : (Bot -> C) . (c true)) else (\ d : B . c)) ((\ b : Top . c) (if a then a else false))))
(((if (\ c : Bool . error) then a else (try c with true)) (if (try true with error) then (try c with false) else (try b with false))) (try (\ d : B . (if a then error else true)) with (\ c : (Top -> B) . error)))
(\ e : (((B -> (Bool -> A)) -> (C -> Bool)) -> ((Bot -> Top) -> (Top -> Top))) . (\ e : ((Bool -> Top) -> A) . (if a then (if error then c else b) else (if error then true else true))))
(try ((\ b : C . (try a with a)) ((try b with a) false)) with (if (a (if b then a else false)) then (if a then false else (\ c : Bool . false)) else (\ c : (A -> A) . error)))
(try ((if (if c then error else c) then (try true with a) else (b c)) (try (if true then b else a) with c)) with (\ a : ((A -> Top) -> (A -> (Top -> Bool))) . ((true error) (c c))))
(try ((\ e : A . c) (try b with (if error then false else false))) with (if (try (\ b : B . c) with (a false)) then (if (try true with error) then true else error) else (try (try true with a) with error)))
(\ c : (((C -> Bot) -> C) -> ((Top -> A) -> (A -> (Top -> C)))) . ((try error with (try true with error)) ((if (try b with false) then (\ d : Top . error) else error) (\ b : (Top -> Top) . (try c with false)))))
((try (try a with (\ c : C . false)) with ((try false with (true a)) (if (\ b : B . false) then (try false with false) else (true a)))) ((\ e : A . a) (\ d : C . b)))
(if (try (\ a : (Bool -> (Bot -> Bool)) . (\ d : Bool . b)) with (if a then (if c then false else a) else c)) then (try (error (if c then error else false)) with (if (\ d : (Bot -> C) . (if error then c else a)) then (\ d : C . false) else (\ b : Bool . b))) else (if (try c with a) then (\ e : A . false) else (if c then error else true)))
(if (\ e : (Bool -> (Bool -> B)) . (try c with b)) then (try (\ e : Top . (if error then b else true)) with (\ a : Bool . a)) else (try (if (b c) then (if b then a else a) else (b b)) with (if (try (\ a : C . false) with error) then (c error) else (if a then b else false))))
((\ d : ((Bool -> Top) -> Top) . (\ a : (Bool -> Top) . (if (try c with error) then (true true) else false))) (try (a true) with (\ e : A . error)))
(\ b : ((C -> A) -> (Bool -> (Bool -> B))) . (try (if false then error else (try false with b)) with ((try b with (if a then c else error)) (\ b : Bot . (true true)))))
(if (\ e : ((Bot -> C) -> (A -> Bool)) . (\ c : (A -> Bot) . c)) then (if (if (try false with c) then (if b then a else false) else ((try false with true) (true a))) then ((b c) ((error true) error)) else ((try error with error) (b b))) else ((if a then c else error) (try true with a)))
((((try c with b) (if error then c else b)) (true b)) (try ((\ a : Top . a) (if a then a else true)) with ((true c) false)))
(\ d : (((Top -> Bool) -> (Bot -> C)) -> ((Top -> A) -> B)) . (if (try false with b) then (if (if c then true else error) then c else true) else (try true with b)))
(\ e : (((A -> A) -> (B -> Top)) -> (C -> Top)) . (if (if (try c with c) then c else (if true then c else b)) then (false true) else (\ d : (Bot -> Bool) . (if a then a else b))))
(if (try (if c then (\ e : Top . false) else c) with (if (if c then false else true) then true else c)) then (if (try (try false with true) with (\ d : Bot . b)) then (if false then c else error) else (\ b : (A -> (Top -> Bot)) . (true true))) else (try (if ((c error) (true false)) then (error c) else (\ a : Top . c)) with (if c then c else false)))
(if (if (\ b : A . true) then (\ e : Bot . a) else (try (c c) with (\ c : B . true))) then (\ d : (A -> C) . (\ b : (Top -> Bot) . (if true then false else true))) else (if (if (\ e : A . true) then b else a) then (if false then c else error) else (try error with (\ b : Top . error))))
(\ d : ((((A -> B) -> (A -> A)) -> (Bot -> Top)) -> ((C -> Bot) -> Bool)) . (\ e : (((C -> C) -> A) -> (A -> Top)) . (if (if a then c else error) then (true false) else (try a with error))))
(if (try ((if error then true else error) (if c then c else false)) with (try true with true)) then ((try false with a) (b error)) else (\ e : ((Bot -> Bot) -> Bool) . (try (try c with true) with c)))
(try ((try (c c) with (true error)) (error c)) with (if ((if false then error else false) ((c error) (try a with a))) then ((b error) ((if c then b else a) (false false))) else (if (\ c : A . true) then (try a with a) else b)))
(try ((try a with (error error)) (try (try true with c) with false)) with (\ e : ((A -> Bool) -> (Top -> Bool)) . (try (try false with false) with (try (a false) with (try b with c)))))
(try (if (\ d : (Bot -> Bool) . (try c with error)) then (try ((error a) error) with (try (error c) with (a error))) else ((if true then false else a) (\ d : Top . error))) with (try (try c with (try a with a)) with (try (try b with error) with c)))
(try (try (try b with error) with (\ d : (Top -> B) . (\ c : Bool . c))) with (try (\ a : Top . (try a with error)) with (\ c : (Bool -> Bot) . (try b with error))))
(try ((if (try true with c) then (c false) else c) (if a then c else (try error with false))) with (\ c : (Bot -> (C -> Bot)) . (try true with b)))
(if ((if (\ c : Bot . a) then (try error with true) else (try false with (false false))) (\ c : (Bool -> Top) . (if c then (\ d : C . b) else true))) then (if (if false then error else true) then (true false) else (\ c : A . true)) else ((\ c : (Top -> (A -> Top)) . (\ c : Bool . false)) (try (b (false b)) with (try b with error))))
(if (try (try b with false) with (try a with (b a))) then ((\ c : (A -> Bool) . b) (if true then (if error then a else false) else c)) else ((try (\ d : A . a) with b) (b (try false with error))))
(try (try (c (\ e : Bot . error)) with (try (try true with true) with (\ b : A . true))) with ((\ c : A . a) (try error with error)))
(try (\ b : (Bot -> C) . (\ d : ((Bot -> A) -> (Bot -> Top)) . (if true then (\ e : Bool . c) else a))) with (try (\ e : C . a) with (try a with false)))
(if (try (\ b : Top . b) with ((\ e : A . true) b)) then (if (\ c : (Bool -> Bool) . (try false with (if a then error else error))) then ((c true) (false true)) else (try (\ a : Bot . true) with (if c then a else error))) else (\ c : (Bool -> (B -> Bot)) . (\ d : (Bot -> B) . (\ b : B . true))))
(\ e : (((Bot -> B) -> B) -> (C -> C)) . (\ d : (Top -> Bot) . (if true then (if c then false else false) else error)))
(if (try (if (\ d : B . b) then (try b with true) else (b c)) with ((true true) (\ d : Bot . b))) then ((\ a : Bot . b) (try c with (\ c : C . c))) else (if (try error with (\ b : Top . c)) then (try (if false then error else a) with c) else (\ d : Bot . c)))
((\ c : ((Top -> (C -> Bool)) -> (B -> Bot)) . (try (false c) with (\ d : A . true))) ((if error then (if error then error else a) else (error b)) (true a)))
(\ a : (((Bot -> Bool) -> Bool) -> ((C -> C) -> (Top -> Top))) . (try (\ b : A . b) with (\ e : ((Bool -> Bot) -> (Bool -> C)) . (try b with error))))
(if ((try false with (c error)) ((a error) (b error))) then (if (if false then b else false) then (try b with c) else (false false)) else ((if true then true else true) (try b with c)))
(try ((try a with c) (\ c : A . a)) with (\ e : (Top -> Top) . (try (a b) with a)))
(try (try (try (if false then c else b) with a) with ((b error) (false false))) with (if (\ d : C . true) then (error b) else (try (\ b : C . c) with (if false then false else b))))
(try ((\ d : (B -> Bot) . (try error with true)) (if c then true else (a a))) with (if (\ d : (C -> Bot) . (\ c : B . false)) then (try (true a) with (if b then error else error)) else (try false with (try true with true))))
(if (if (if error then a else c) then (try (if a then c else b) with c) else (try error with false)) then (try (if (b a) then (b true) else false) with ((\ e : B . false) a)) else ((try (a error) with (\ e : C . a)) (try b with (\ c : Bot . c))))
(if (if (if true then false else c) then ((\ c : B . b) a) else (error b)) then (try (\ d : Top . c) with (\ c : (Top -> Bool) . (try false with error))) else (if (if error then true else (true error)) then (try error with true) else (try (if true then b else a) with b)))
((if (try error with a) then (c error) else (try b with false)) (\ d : ((Top -> (Top -> A)) -> ((Bool -> Top) -> Bool)) . (if (c (b a)) then (try a with (\ c : A . b)) else (if (\ b : Top . a) then (if c then b else b) else c))))
(try (try (if (if a then error else a) then c else error) with ((false a) (\ a : B . (\ e : Bool . a)))) with (\ e : ((C -> Bot) -> Bot) . (try error with (\ b : Bool . a))))
(\ c : (((C -> A) -> (A -> A)) -> ((Top -> C) -> (A -> A))) . (if (try (try c with false) with (b c)) then (\ c : ((B -> A) -> (C -> Top)) . (\ a : (C -> B) . true)) else (if (error a) then (c false) else false)))
((if (c true) then (\ e : (Bot -> Top) . false) else (\ d : Bot . false)) (\ a : ((Top -> A) -> Bool) . ((if error then b else c) (true true))))
(\ e : ((C -> Bool) -> (Top -> B)) . (if ((if c then c else b) error) then (\ c : (Bool -> C) . (\ e : C . error)) else (false b)))
(\ a : (((Bool -> (B -> Top)) -> ((B -> A) -> (Bot -> Bool))) -> (Bot -> C)) . (if (if (\ b : Bot . error) then error else true) then (try a with false) else (error c)))
(try (\ c : (A -> C) . (\ b : (B -> C) . (error false))) with (\ e : (((A -> Top) -> (Top -> A)) -> (Bot -> Top)) . ((if true then c else a) (try false with c))))
(\ b : ((C -> B) -> (A -> Bool)) . ((\ a : (C -> A) . (if error then b else b)) (\ a : (Top -> (Bot -> Bot)) . (try false with a))))
(\ d : ((((Top -> B) -> (C -> Bot)) -> (B -> Bot)) -> ((Bot -> Top) -> Bool)) . (if (if (\ b : A . b) then (false (\ d : Bot . b)) else (try c with a)) then (if (if b then true else a) then (try false with (if error then false else true)) else (a true)) else (try a with false)))
(\ a : ((Top -> C) -> ((Bool -> C) -> C)) . (\ e : (B -> A) . (if true then a else a)))
(if (if (if (\ c : (Bool -> C) . (try a with a)) then (\ b : Top . true) else (\ b : Top . c)) then (if (\ a : Bool . true) then (try c with a) else (try a with b)) else ((true a) (if c then false else (true false)))) then ((if error then c else true) (if true then a else a)) else (if ((\ a : Top . a) false) then (\ c : B . (if false then b else false)) else (a c)))
((try (if error then b else (\ c : B . true)) with (if b then true else b)) (\ b : (B -> (A -> Bool)) . (try (if false then error else error) with (try true with c))))
(\ a : (((B -> B) -> (A -> Bool)) -> (((Bool -> C) -> A) -> (Bool -> Bot))) . (try ((if b then false else error) (\ c : C . (if false then false else b))) with (\ c : Bot . error)))
(try ((if true then true else error) (if error then false else false)) with (try (if (\ a : Bot . c) then (if error then false else true) else (\ c : Bot . true)) with (\ d : C . a)))
(\ a : (((A -> Top) -> ((C -> C) -> (B -> B))) -> (B -> (Top -> A))) . (\ d : (C -> Top) . (\ c : A . b)))
(\ e : (((C -> B) -> (C -> A)) -> (Bot -> Bot)) . (try (true (try true with c)) with (if (\ d : C . true) then (false false) else (\ e : (A -> B) . (error b)))))
(((try false with c) (if (try b with b) then (if false then true else false) else (\ a : Top . true))) (try (((\ c : B . false) b) (if (false false) then (if true then false else a) else error)) with (try a with (\ c : B . true))))
(\ e : ((C -> C) -> (C -> Bot)) . (\ e : (Bool -> (B -> Bot)) . (try (if c then error else true) with (try true with true))))
(try (try (a true) with (if (\ d : B . a) then (try true with false) else a)) with ((if (try a with false) then (try false with false) else (\ d : B . (if false then true else a))) (if (try true with error) then (\ c : (B -> B) . false) else (if (b c) then a else c))))
(if (\ d : ((Top -> Bot) -> ((Bot -> A) -> (B -> Bot))) . ((c (\ b : C . a)) (\ c : Bool . c))) then (if (try (try error with error) with (\ c : B . true)) then (\ c : (B -> A) . b) else (a true)) else (\ a : (Top -> Top) . (if (try a with true) then false else (if a then b else b))))
(if ((\ a : Top . false) ((false a) a)) then (if (try true with (false a)) then (\ a : (A -> B) . (try a with false)) else (if (try a with a) then (try a with false) else (if false then false else b))) else ((if (if (\ d : Top . c) then (c b) else (if true then true else error)) then (\ d : Bool . true) else (if a then false else b)) (\ c : ((B -> B) -> (C -> Bool)) . (if error then true else c))))
(\ d : ((Bool -> (Bot -> Top)) -> (Bool -> B)) . (if (if false then true else b) then ((if a then false else true) (if a then b else false)) else (if (try false with b) then a else (\ b : C . b))))
(\ e : (((Bool -> Bool) -> (B -> (C -> Bot))) -> ((Top -> Bool) -> ((Bot -> Bool) -> Top))) . ((try (try false with c) with (if (if a then true else c) then (true b) else b)) (try (false true) with (if b then true else false))))
(\ e : (((C -> Bot) -> (B -> B)) -> (((C -> B) -> (Top -> Top)) -> (B -> B))) . (try (a c) with (false a)))
(\ a : ((A -> (B -> Top)) -> (C -> (B -> Bot))) . ((if (\ c : (B -> C) . b) then (a error) else (try true with error)) (if (\ b : A . true) then (c true) else (try c with c))))
(\ c : ((((Bot -> Bot) -> C) -> (B -> (C -> Top))) -> ((A -> Top) -> (A -> Bool))) . ((try (try false with c) with b) (error (\ a : Top . c))))
((try (try (try c with error) with (\ a : Bool . b)) with (\ a : Top . (error a))) (if (((\ d : B . false) (a true)) (a c)) then ((try false with error) (try error with false)) else (true c)))
(\ d : (((Top -> Bool) -> (Bool -> Bot)) -> (Bool -> (Top -> Top))) . (\ a : ((Bool -> A) -> (B -> (Bot -> Top))) . (((c true) false) (try b with c))))
(try ((\ c : (B -> C) . (if false then c else error)) (if (if error then c else true) then (a c) else (\ a : Bool . b))) with ((\ c : C . false) (\ d : ((Top -> A) -> (B -> Top)) . (try false with false))))
(\ e : (((Top -> B) -> (Bot -> Bool)) -> ((Bot -> C) -> Top)) . (\ e : (Top -> C) . (if c then (false true) else (try false with true))))
(try (\ e : (((Bot -> C) -> Top) -> (Bot -> Bool)) . (\ d : (Bool -> Bot) . (if b then b else c))) with ((try (if a then b else true) with (a c)) (try a with (if c then a else false))))
(try (\ a : ((Bot -> C) -> B) . (c b)) with ((try a with b) (if c then false else b)))
(\ a : (((B -> Top) -> (Bot -> Bool)) -> ((B -> C) -> (A -> A))) . (if (\ a : C . c) then (\ d : A . true) else (if b then a else false)))
(if (if (try (a a) with error) then (b c) else (try (\ d : Bool . b) with (\ a : A . a))) then (if (c true) then (\ d : Bool . b) else (\ e : (A -> B) . c)) else (((if (c a) then a else b) (b a)) (try b with (c true))))
(\ d : ((C -> A) -> (B -> (Bot -> B))) . ((\ b : (A -> Top) . (c c)) (if b then (a c) else false)))
(if (\ a : (C -> Top) . (false error)) then (\ b : (Bot -> Bot) . (\ b : A . (if error then true else c))) else (if (if a then false else b) then (\ b : A . error) else (c a)))
((if (try (if true then a else c) with (if true then error else false)) then ((if (\ a : Bot . false) then a else (try c with b)) (\ c : Top . (\ e : Top . c))) else (if (try true with a) then (if b then error else c) else (\ b : Top . false))) (if (if (\ e : Bool . c) then a else error) then (\ c : Bool . b) else (if (try b with false) then error else true)))
(\ d : ((Bot -> A) -> (Bool -> Top)) . (\ d : (A -> Bot) . (if a then a else b)))
(try (\ d : ((C -> Bool) -> Top) . (if error then error else true)) with (if (try b with a) then (\ a : C . true) else (\ c : C . false)))
(if (try (true (try error with a)) with (try a with (c a))) then (try (c c) with (\ d : C . b)) else (try (c a) with (if (b b) then c else (try false with b))))
(try (try (try b with b) with (\ e : Bool . (\ d : Top . b))) with ((\ d : (C -> Top) . false) (if b then true else a)))
((if (\ b : (C -> Bot) . error) then ((if true then error else a) true) else (try b with true)) (try (if b then true else b) with (try (if c then false else error) with (\ d : A . true))))
(\ d : ((A -> C) -> ((C -> Top) -> Top)) . (\ b : (A -> Bot) . (\ a : B . false)))
(if (if (\ e : ((Bot -> Bot) -> Bool) . (if (if true then b else error) then false else a)) then (if (false error) then a else c) else (\ d : (Top -> B) . (try error with error))) then (\ d : ((Bool -> Top) -> C) . (if b then a else true)) else ((if ((if a then c else b) (if a then c else a)) then (\ d : Bool . (try c with c)) else (try false with (b c))) (try (c b) with false)))
(\ a : (((Bot -> B) -> (B -> Bot)) -> ((B -> Top) -> (A -> Top))) . (\ b : ((Bool -> C) -> (Bot -> Top)) . (\ a : B . c)))
(\ d : (((Top -> C) -> B) -> (B -> Bool)) . (\ a : (Bool -> A) . (try true with (if error then a else error))))
(\ a : ((A -> A) -> ((C -> C) -> B)) . (if (try (if true then true else b) with (\ b : Bot . (if a then a else true))) then (try (true (\ c : Bot . true)) with (\ b : Top . (if true then true else c))) else (\ e : (Bot -> (Top -> Bool)) . (false (false true)))))
(if (if (if error then false else false) then (if a then (try b with b) else b) else (try c with false)) then (if (try (b true) with (\ c : A . true)) then (\ a : A . true) else (error c)) else (try (if (if a then false else a) then false else false) with (try (b c) with (if a then true else b))))
((if (try b with (if c then true else false)) then (\ b : (B -> A) . (\ b : (C -> Bot) . b)) else (if (\ e : Bot . b) then ((\ a : Top . a) error) else (\ b : Bot . (b true)))) (\ c : (Bot -> (Top -> Top)) . (\ d : (Bool -> Bot) . (try (try c with a) with (\ d : Bool . error)))))
(try (\ b : (Top -> (Bot -> Top)) . (try false with b)) with ((try error with (try error with b)) (\ e : (Bool -> B) . (try a with true))))
(try (if (try a with error) then (if false then (error error) else (if c then b else error)) else (if b then c else error)) with (if (\ b : (A -> B) . (try (if c then false else error) with (try false with a))) then (try true with (if c then false else false)) else (try a with error)))
(if (try (a (a error)) with ((error b) (try (try b with a) with false))) then ((if true then a else b) (try false with a)) else (\ c : (Bool -> C) . (if false then b else true)))
(if ((try (true (\ e : Bool . c)) with (if c then error else c)) ((if c then b else b) (if c then error else c))) then ((if a then true else b) (((c a) a) (if true then (true b) else (try c with true)))) else ((if c then true else error) (\ c : B . c)))
(\ d : (((A -> C) -> (B -> (Bot -> Top))) -> ((A -> A) -> (C -> A))) . (\ e : ((C -> Bool) -> (A -> A)) . (if (\ d : Bot . c) then (if (if error then true else error) then (try error with false) else false) else (\ a : B . true))))
((\ b : (A -> C) . (if (error a) then (if b then false else b) else false)) (try (true (if c then false else false)) with (if c then b else error)))
(try (if (false b) then (\ a : (C -> Bool) . (true b)) else (try b with (if c then a else true))) with (((try a with (\ d : Bool . false)) (error error)) (a (if b then error else false))))
(if (\ a : ((Bool -> Bool) -> Bool) . (if b then false else (if false then false else error))) then (\ e : (A -> (C -> Bot)) . (try (if a then b else a) with error)) else (try (\ b : (Bot -> B) . (\ a : (Bot -> B) . (try c with true))) with ((if false then a else false) (if b then error else true))))
(\ d : ((B -> (B -> Top)) -> (Top -> Bool)) . (if (if (if false then b else a) then (if a then c else error) else a) then (error b) else (\ c : C . true)))
(\ d : ((Bot -> (B -> B)) -> (B -> (C -> Top))) . (\ e : (Top -> (Bot -> B)) . (error false)))
(if (\ e : (A -> Top) . (c a)) then ((\ c : ((A -> Bool) -> (Top -> Bool)) . (if (try c with false) then error else (true false))) (if (try false with error) then (if (\ e : Top . error) then a else (\ e : Bot . a)) else (try error with (if a then error else c)))) else (\ b : (Top -> A) . (false (true a))))
((\ a : (C -> (Bot -> A)) . (try c with b)) (\ d : (((C -> B) -> Top) -> (Bot -> C)) . ((if error then error else b) (\ c : A . a))))
(if (if ((false error) b) then (true (try a with c)) else (if a then error else (\ d : Top . a))) then (if (try error with (if true then error else false)) then (if (b true) then c else (try b with true)) else (if (try a with c) then (error b) else (if error then error else c))) else ((\ e : ((B -> B) -> (Bool -> A)) . (if c then (b c) else (c error))) (\ b : (Bot -> B) . (\ c : (Bool -> A) . true))))
(try (if (try a with c) then (a true) else (if false then error else error)) with (\ e : (B -> C) . (\ c : Bool . false)))
(if (if (c false) then (try c with true) else (try b with b)) then (\ a : ((Bot -> Bot) -> (B -> Bool)) . (\ d : (Bot -> Bot) . (if error then false else true))) else (\ e : ((Bool -> Bot) -> Top) . (\ b : (Bool -> B) . (if c then a else false))))
(try (try (\ e : (B -> A) . (if true then (\ c : Top . true) else (try c with a))) with (\ e : (A -> B) . b)) with (\ c : (C -> Bot) . (if (\ d : A . c) then (if b then a else a) else (try b with false))))
(\ d : ((C -> (Bool -> Bot)) -> (Top -> Top)) . (if (\ a : C . b) then ((if b then error else c) false) else (if c then c else a)))
((\ d : (Bool -> B) . (\ d : Bool . error)) ((try c with error) (try false with error)))
(\ c : (((Top -> B) -> (B -> Bot)) -> ((Bot -> A) -> (Bool -> C))) . (try (\ a : (A -> Top) . (if c then b else true)) with (\ e : Top . (try error with true))))
(try ((try c with b) (b b)) with (\ b : (B -> (Top -> Bot)) . (\ a : (Top -> (C -> B)) . (\ b : C . a))))
(((if true then (b a) else (true error)) (\ c : Top . a)) (\ b : (((B -> C) -> (C -> A)) -> ((B -> A) -> Top)) . (try (try a with error) with (try c with b))))
(try (\ c : (Bool -> C) . (try false with false)) with (((try a with a) c) (try c with false)))
(\ e : ((B -> (Bool -> A)) -> (A -> B)) . (if (if (try a with false) then (b a) else (if b then true else error)) then (\ c : (C -> Bot) . (\ b : A . b)) else (if (true error) then (try c with c) else (false true))))
(\ b : ((B -> Bool) -> ((Top -> B) -> (Bool -> A))) . (\ b : ((B -> Bot) -> (A -> Top)) . (\ c : B . false)))
(try (try (false b) with (try error with (try error with c))) with ((if (if false then b else error) then (\ d : A . c) else b) ((if true then error else a) (a b))))
(\ e : ((B -> Bot) -> (Bot -> C)) . (try ((try c with true) (if error then (try error with c) else error)) with (\ e : B . c)))
(try ((try b with b) (false false)) with ((if (\ e : Top . a) then (if error then true else true) else a) (\ d : A . c)))
(if ((try (false error) with (if c then false else error)) (false a)) then (if (try error with (false a)) then (\ c : (Bool -> Bot) . true) else (if (try b with false) then (if b then true else error) else (error error))) else ((try c with error) (\ b : Bot . error)))
(((try a with (if error then b else b)) (if (\ c : C . false) then c else c)) (try (if error then false else a) with (\ b : Bot . false)))
(try (\ d : (Bot -> C) . (if c then c else true)) with (try (if a then false else c) with (if (if b then error else error) then (if c then false else true) else false)))
(try (\ b : ((B -> Bool) -> (A -> B)) . (try b with true)) with (try (\ e : (Bool -> Bot) . true) with (\ b : (C -> A) . (c b))))
(if (\ e : (C -> Bot) . (error c)) then ((\ c : A . b) (if (\ d : A . error) then b else (if error then b else false))) else (\ b : (Top -> (C -> C)) . ((c b) (\ a : Top . false))))
((try ((try error with error) (try false with error)) with (\ b : (Bot -> A) . c)) (if (try (\ e : B . b) with (\ e : Bool . b)) then (try b with c) else (try false with c)))
(try (try (try (\ e : C . c) with false) with (\ b : (A -> Bot) . (\ a : C . (a true)))) with (try ((if false then c else a) (error error)) with ((if c then b else c) (c false))))
(try (\ b : (A -> (Bool -> Bool)) . (try false with a)) with (if (try (if false then a else (if b then b else true)) with (b a)) then (try (\ a : (Bool -> C) . b) with (c error)) else (try (\ e : Top . a) with (\ a : A . c))))
(\ d : ((B -> (A -> B)) -> (Top -> (Bot -> B))) . (\ b : ((B -> (B -> C)) -> (B -> Bot)) . (if (try error with true) then (if (\ e : Bool . a) then false else false) else (false error))))
(\ a : ((Bool -> Bot) -> (Bool -> Bot)) . ((try (\ b : (Top -> C) . (true true)) with (if false then c else b)) (if true then (try a with b) else (a false))))
(\ e : (((Bot -> C) -> (Bool -> A)) -> ((Bool -> Bot) -> (Top -> B))) . (try ((\ e : Top . a) (try error with a)) with (\ e : (A -> B) . (if (try true with true) then false else false))))
((try ((false a) true) with (\ c : (A -> A) . false)) (\ a : ((B -> Bot) -> (Bool -> B)) . (if ((if error then b else error) (b c)) then (true c) else (\ b : Bool . (try a with error)))))
(if (if (a (true a)) then ((b c) b) else (try b with error)) then (\ e : ((Top -> (Bot -> Bot)) -> (A -> Bot)) . (\ a : (A -> Top) . (if true then (try c with false) else (if false then error else error)))) else (\ c : ((Bool -> B) -> Top) . ((try error with error) (\ c : B . c))))
(((if (\ a : Top . true) then (a false) else true) (\ d : B . c)) (\ b : (Bot -> C) . (try true with true)))
(\ e : (((Bool -> B) -> B) -> (B -> (A -> B))) . (try (try (\ c : B . error) with (c (if error then a else a))) with (try (if c then c else c) with (\ b : (C -> Top) . (\ c : Bot . a)))))
(if (try (if (\ e : Bot . true) then c else (try c with b)) with (if b then (a false) else c)) then (try ((if c then b else true) true) with (\ c : Bool . c)) else ((try (if b then false else c) with a) (try false with (if error then b else true))))
(if ((c (b a)) (try c with (try b with error))) then ((true a) (try (if c then a else c) with (c a))) else (\ e : (Top -> C) . (if b then (try error with b) else false)))
((\ d : ((Top -> Bot) -> Top) . (try true with (\ b : C . error))) (try ((\ e : Bot . a) ((if error then b else false) b)) with (if false then (try a with true) else (if error then a else false))))
(try (\ c : (((Top -> B) -> A) -> (B -> (B -> C))) . (try (if b then a else c) with (\ e : Bot . false))) with (if (\ d : (Bot -> A) . (b error)) then ((try c with false) (if true then false else false)) else (if (a false) then false else true)))
(\ b : ((Bot -> (Top -> Bot)) -> (A -> C)) . (try (if (c b) then (if error then (try false with true) else (try false with a)) else (if error then (if false then error else b) else (try b with b))) with (if ((if c then b else b) (try c with b)) then (\ b : C . (\ e : Top . error)) else (try c with a))))
((if (if true then error else (try c with true)) then (if b then (\ b : Bool . false) else true) else (\ d : (Bot -> Top) . error)) ((if c then false else c) (\ a : B . false)))
((\ b : ((Bot -> (Bot -> B)) -> (C -> Bot)) . (try ((true c) error) with (if (try error with c) then true else (try true with true)))) (\ e : ((Top -> C) -> Bool) . (if (try a with false) then b else (if b then a else c))))
(try (((\ c : B . a) false) (try true with (\ c : Top . c))) with (if (try ((try true with true) true) with (true error)) then (try (if error then error else true) with c) else (if (\ c : (C -> Bot) . false) then (\ e : (Top -> A) . error) else ((try true with true) a))))
(\ d : ((((Bot -> A) -> C) -> (A -> Top)) -> ((C -> A) -> (Bot -> (C -> Top)))) . (try ((a b) a) with (if c then a else b)))
((try (try true with (if false then a else error)) with ((try b with a) error)) (try (\ a : Bot . error) with (if (try a with false) then (a c) else (try false with a))))
(try ((if (try (c a) with (try false with b)) then (if a then true else true) else (if b then false else true)) (\ a : (Bool -> Top) . false)) with (try (b a) with (if error then b else true)))
(\ a : (((B -> Bool) -> Bool) -> (Top -> Bot)) . (if (\ d : ((C -> Bool) -> Bool) . (try b with b)) then (\ b : (A -> A) . (try (\ d : Bool . b) with (a true))) else (try (try error with (try a with b)) with (true error))))
(\ b : ((Bool -> Bool) -> (A -> Bot)) . (\ b : ((Bot -> C) -> Top) . (try (if false then c else b) with error)))
((try (if a then error else error) with (if a then (\ e : Bool . a) else (\ b : Top . b))) (\ b : ((C -> C) -> (B -> Top)) . (if true then error else error)))
(if (\ a : (B -> (Bot -> Bot)) . (\ e : Bot . a)) then (if (if (if b then true else false) then (if a then true else error) else a) then (try (if (error b) then (true true) else false) with (\ e : B . true)) else (\ d : (Bot -> Top) . false)) else (try (\ d : (Bool -> C) . (b true)) with (try (try b with b) with (error c))))
(\ a : (((C -> Bool) -> Top) -> ((Bool -> Bool) -> (B -> A))) . (try (true false) with (try a with false)))
(try (if (try (try (a false) with (\ e : A . a)) with (true c)) then (if (try b with true) then (\ d : (Bot -> B) . c) else (\ d : Bool . true)) else (try (try false with error) with (true b))) with (if ((if b then b else error) a) then (if (if c then error else b) then error else b) else (\ a : Bool . error)))
(\ a : (((C -> Top) -> (Bot -> Bot)) -> ((A -> Bool) -> Bool)) . (try ((\ d : C . error) (try b with (c false))) with (try (if c then false else false) with (if (if b then b else false) then (\ c : Bool . true) else (\ a : Bool . b)))))
(if (\ d : ((B -> Top) -> (Bool -> Bool)) . (\ c : (Bot -> B) . true)) then (try (\ e : C . false) with ((if true then error else c) (error c))) else (try (if b then a else error) with (a c)))
(((try (if (try a with a) then (\ e : Bool . b) else a) with (\ c : Bool . false)) (if true then (if false then true else false) else true)) (\ a : ((C -> A) -> C) . (try false with false)))
(if (if (a true) then (((try error with false) b) (try false with (\ a : Bool . true))) else ((\ a : Top . a) (c a))) then (((\ b : Bot . error) a) (if a then true else true)) else (\ e : ((A -> B) -> (Bool -> (B -> B))) . (\ e : Bot . (\ e : Bool . error))))
(try ((if (error error) then (\ b : Top . false) else (\ a : A . c)) ((try (\ a : A . a) with false) (try true with c))) with ((\ c : (C -> Top) . (try c with false)) (if false then error else b)))
(if ((try false with true) (try a with b)) then (try (if (error (\ b : B . error)) then (if (a true) then a else true) else (try (if c then c else false) with b)) with (try (if false then a else a) with (\ d : Top . error))) else (if (try b with true) then (if false then true else c) else ((true a) (try a with b))))
((\ c : ((Bot -> Top) -> Top) . (try (\ a : Bot . false) with (try true with a))) (try (try (if (if c then false else true) then true else a) with (if (if true then true else error) then (try b with c) else true)) with (b (try true with true))))
(\ d : ((Top -> B) -> ((Bool -> Bot) -> (C -> Top))) . ((\ c : (A -> Bot) . (try b with true)) ((\ c : Top . c) (error error))))
((if (if false then error else error) then (c c) else (try (\ a : B . b) with (if a then true else b))) (\ d : (C -> (A -> C)) . (\ c : C . b)))
(try (try (b false) with (b (try true with false))) with (\ c : (((C -> C) -> (B -> A)) -> ((Bot -> Bot) -> C)) . ((try b with a) b)))
(try (if (false a) then (if (try error with b) then b else (a false)) else (if false then c else error)) with (\ a : (C -> C) . (if (c b) then false else (error true))))
(try ((\ d : Top . a) (\ b : B . b)) with (\ e : ((B -> Bool) -> Top) . ((try b with true) (error (try b with a)))))
(\ d : (((Bot -> Bool) -> (B -> C)) -> (A -> Bool)) . ((\ e : B . a) (try (try error with a) with false)))
(try (if (\ a : (Top -> Bot) . (if b then c else c)) then ((if b then (if a then error else true) else (if error then c else c)) (\ b : Top . b)) else (if (\ e : (Top -> B) . (\ c : Bot . error)) then (if (if b then true else a) then c else (try false with false)) else (\ b : Top . a))) with (if (a a) then (\ d : A . a) else (try c with error)))
(if (\ c : ((B -> Bot) -> ((Bot -> Top) -> (Bot -> Top))) . (try ((if true then error else b) a) with (try b with error))) then ((\ b : Bot . b) (try (true error) with (\ e : C . c))) else ((try a with c) (\ d : (A -> Bool) . (try false with a))))
(try (\ c : ((Bool -> Bot) -> (A -> (A -> Top))) . (\ e : (A -> A) . c)) with ((if b then a else b) ((\ e : B . false) c)))
(\ b : ((Bool -> (C -> Top)) -> (C -> Top)) . (if ((if true then a else true) (a b)) then (\ e : C . (\ b : A . false)) else (try true with c)))
((\ a : ((Top -> C) -> A) . (b b)) (((\ a : Bool . false) error) (b a)))
(if (\ a : (Top -> Bool) . (try true with a)) then (if (if (\ b : C . a) then (try c with true) else (try c with (try true with false))) then (\ b : (Bot -> C) . false) else (((false error) (true true)) (\ a : (B -> A) . false))) else ((\ a : (B -> Bot) . (try false with (true c))) (if (b a) then (true true) else (try b with error))))
(try ((try c with true) (if (try false with true) then (if false then a else true) else (try error with error))) with (if ((try true with error) (\ d : Bot . c)) then (if false then b else a) else (\ c : A . error)))
(\ b : (((A -> Top) -> Top) -> (Top -> (Bool -> C))) . ((try (if a then c else c) with error) (try true with (try a with error))))
(\ b : ((((Bool -> Top) -> (Top -> B)) -> (Bot -> Top)) -> (((Top -> A) -> Bool) -> (B -> C))) . (try (\ a : Top . a) with (try false with (try a with true))))
(\ c : (((B -> B) -> B) -> (Top -> Bot)) . (\ d : ((Bot -> A) -> ((B -> Top) -> Top)) . (try b with b)))
(try ((if (false error) then (\ b : Top . error) else (\ e : (A -> Bot) . (try error with false))) (if (try c with error) then true else (\ a : A . false))) with (try (try true with (error b)) with (if a then c else error)))
(try (try (\ e : (B -> (C -> Bot)) . (if true then (try false with a) else true)) with (\ e : (B -> Bool) . (true true))) with ((try false with false) (try true with c)))
(try (\ c : ((Top -> C) -> B) . (try b with a)) with (\ a : ((Bot -> B) -> Bot) . (error b)))
((\ e : (C -> (A -> A)) . (if (\ c : A . (try false with b)) then (\ c : B . b) else (\ a : (Bool -> Bot) . (a c)))) (try ((\ b : Top . error) (\ d : Top . true)) with ((\ a : C . error) (\ e : Bot . a))))
(\ d : (((A -> Bot) -> (Bool -> B)) -> ((C -> Top) -> B)) . (\ d : ((Top -> Top) -> (Top -> Top)) . (\ a : (B -> Top) . (if false then (a error) else false))))
(\ c : (((B -> C) -> B) -> (Bool -> (Bool -> C))) . (((\ e : A . c) false) (\ b : A . a)))
(\ d : (((B -> (Top -> Bool)) -> (Bot -> Bot)) -> ((Bot -> C) -> (Top -> B))) . (if (\ a : A . b) then (try false with error) else (true false)))
(try (if (if (false error) then b else (\ e : B . c)) then (\ e : A . (try a with c)) else (if error then a else c)) with (if (try (if true then c else a) with (\ b : Bool . error)) then (if true then (try true with error) else (false false)) else (\ a : (A -> B) . (try c with c))))
((try (error a) with (\ e : (A -> Top) . a)) (\ d : ((B -> B) -> ((Bool -> Bot) -> (Bot -> C))) . (\ d : (Bot -> Bool) . (a error))))
(if (\ c : (Bot -> Bot) . (\ b : ((Top -> B) -> (Bot -> B)) . (\ a : C . b))) then (try (if b then (\ a : Bool . b) else true) with (false c)) else (try (if (if false then a else b) then c else false) with (if (\ b : C . true) then (try c with b) else (if a then false else c))))
((((\ c : Bool . c) (if (a true) then a else (if error then b else a))) ((a b) (try (\ d : A . error) with error))) (((\ d : Top . b) a) (\ c : Bot . true)))
(try (((if a then b else c) false) (try (true false) with (try c with error))) with (try (true error) with (if a then c else true)))
(((if error then c else b) (if (\ b : Bot . false) then error else b)) (if (a a) then (try c with a) else (\ d : Bot . true)))
(\ c : ((Bool -> C) -> (((Bot -> Bot) -> (Bot -> Top)) -> (B -> Bool))) . (\ c : (((Top -> Bool) -> (Bot -> B)) -> (B -> (A -> A))) . ((false true) (if error then true else c))))
((if (\ c : (Bool -> A) . (\ e : C . false)) then (\ e : (Top -> C) . (try error with false)) else (if false then b else a)) (\ b : (C -> (C -> Bool)) . (\ c : (B -> Bot) . (try (\ e : Top . error) with a))))
(try (if (if error then b else error) then (try true with error) else (\ c : (Bot -> C) . (try (try c with true) with error))) with (try (\ b : (B -> B) . c) with (\ a : (Bool -> Top) . (\ c : Top . a))))
(try (if (if (if a then (true false) else (try c with b)) then ((if error then c else error) c) else (if a then true else c)) then (if (true a) then (c (b error)) else ((c true) (if a then true else false))) else (\ e : (B -> A) . (if (a true) then (c b) else false))) with (if (if error then (\ a : A . true) else false) then (\ a : (Bot -> B) . (if true then error else true)) else (\ e : Top . false)))
(\ a : ((C -> B) -> (Bool -> (Bot -> Top))) . (try (\ c : (Top -> (Top -> C)) . (try b with error)) with (\ e : (Bot -> B) . (try b with (\ b : A . error)))))
((try (if (\ e : Bool . c) then a else (\ e : Bot . false)) with (try (false false) with (try true with error))) (\ b : (C -> (B -> B)) . (\ a : (B -> Bot) . (\ a : Bool . (\ a : Bool . a)))))
(if (\ a : (Bool -> A) . (try (\ a : B . true) with (true false))) then ((if (\ d : Bool . error) then true else error) (try (if false then a else false) with (if (if true then c else a) then a else false))) else (try (try true with (b c)) with ((try true with b) (if false then true else false))))
(\ c : (((C -> (C -> Top)) -> ((A -> A) -> (B -> B))) -> (Top -> (B -> Top))) . (\ e : (Bool -> (Top -> C)) . (\ e : B . c)))
(if (if (try b with c) then (try c with true) else ((if error then error else b) true)) then (\ b : ((B -> A) -> (Bot -> C)) . (if b then false else (if false then false else false))) else (if (try (if error then error else false) with b) then (if (a error) then c else true) else (try c with true)))
(\ d : (((C -> C) -> Top) -> (A -> (A -> Top))) . (\ c : (C -> (C -> A)) . (if true then false else false)))
(try ((if (\ c : B . false) then true else c) ((\ d : B . a) (if c then false else a))) with (\ d : ((B -> C) -> B) . ((if true then error else c) (if error then true else b))))
(if (if (try b with true) then ((\ a : Top . b) error) else ((c false) c)) then (\ d : (Top -> Bool) . (try b with c)) else (try (\ e : (Bool -> A) . (c (\ b : B . a))) with (\ d : (A -> C) . a)))
((\ a : ((Bool -> Top) -> (Top -> Bot)) . (try (try false with b) with false)) (try (error error) with (if error then a else a)))
(\ a : (((C -> Bool) -> Top) -> (B -> Bool)) . ((try (if (try b with true) then c else (\ e : C . a)) with (if c then a else (if true then b else a))) (if (\ b : A . a) then (try false with false) else (try true with false))))
(\ d : (((Top -> Bot) -> (B -> C)) -> (Top -> Bool)) . (if (try (\ d : (Bool -> Bool) . true) with (if error then a else (\ c : Top . b))) then (try (try c with true) with false) else (a c)))
(\ e : ((A -> B) -> ((Top -> B) -> A)) . ((if (try (b true) with error) then (if b then (a c) else (if error then b else c)) else (\ d : B . error)) (if (\ d : Bool . c) then true else (false c))))
(try ((b false) (try (try false with (try true with b)) with (a (try c with error)))) with (if (\ a : C . true) then (\ c : (B -> Bot) . true) else (b a)))
(\ a : ((Bot -> Bool) -> ((A -> C) -> (Top -> A))) . (\ c : ((Top -> Bot) -> A) . (c false)))
(if (if (\ e : Bool . b) then (b c) else (try true with false)) then (try (try c with true) with (\ b : ((Bot -> Bot) -> (A -> Bool)) . (\ c : (C -> Bot) . (\ a : A . true)))) else (((if c then b else a) (try a with c)) ((c error) (try (\ c : Top . a) with error))))
(if (\ a : (Bot -> Bool) . (if (\ c : Top . c) then (if true then error else false) else (if a then a else c))) then ((\ e : B . false) (\ c : (C -> B) . (b false))) else (((\ a : C . (\ a : Bool . false)) (try error with c)) (if a then (try c with b) else (if false then c else error))))
(try (try (if b then true else error) with (if false then b else b)) with (if (error (if true then false else error)) then (\ a : (B -> (Bool -> Bot)) . (if true then c else b)) else (try false with false)))
(if ((try a with (\ a : Bool . false)) (\ b : (A -> A) . (if true then true else b))) then ((if false then (\ a : B . true) else (false b)) (\ d : (C -> B) . true)) else ((try (false b) with (false true)) (try b with false)))
(\ d : ((Bool -> Top) -> (C -> Bot)) . (try (try c with false) with (\ d : B . error)))
(\ d : (((B -> Top) -> (Top -> Bot)) -> (Top -> Bool)) . (if (if b then c else false) then (if b then a else b) else (if b then true else a)))
(try ((b error) (try error with true)) with (if (\ e : (Bool -> Bool) . (false false)) then (if (\ e : Bool . c) then (c (false a)) else (if b then c else b)) else (\ c : (Bot -> A) . c)))
((if (\ a : C . b) then (\ e : A . b) else (b a)) ((if (\ a : Bot . b) then a else (a b)) (\ b : (Bool -> C) . (if false then true else false))))
(((\ a : (Bool -> B) . ((\ e : Bot . a) false)) ((if false then c else error) b)) (\ b : (Bot -> Bool) . (if error then b else c)))
(if ((try b with b) (if (b b) then (try error with false) else (if b then a else b))) then (\ a : ((Bool -> Bot) -> (Top -> C)) . (if (\ b : (Bot -> Bot) . (if true then false else false)) then (\ c : Top . (try false with error)) else (error error))) else ((if (b c) then (try error with error) else (if b then error else b)) (\ c : (Bot -> Bool) . b)))
(\ b : ((Top -> C) -> (B -> Bool)) . ((if (if b then true else error) then (true false) else error) (\ b : Bot . false)))
(if (try (\ b : A . true) with (try true with true)) then (try (\ a : (C -> (C -> Bot)) . (if true then true else (if true then false else true))) with (if (b c) then (\ b : Bot . error) else (try a with c))) else (if (try (\ a : Bool . (\ a : C . true)) with (error b)) then (\ a : (A -> Bot) . a) else (\ d : (A -> A) . (if false then c else b))))
(try (if (if false then false else c) then (c b) else (\ e : Bool . (true c))) with ((if true then false else a) (\ e : C . true)))
(try (try ((if b then false else b) (\ c : B . false)) with (try (try a with a) with (if false then false else false))) with (if (try a with error) then ((if c then false else (\ e : Bot . a)) (a true)) else (try ((if c then true else error) (try c with a)) with (try a with b))))
(try (if ((try c with a) (c c)) then ((try error with c) (\ d : A . false)) else (try (\ b : Top . c) with (\ d : Top . a))) with (try (\ e : (Bot -> Top) . false) with (if (try a with c) then true else c)))
(if ((\ a : A . c) (if a then c else true)) then (\ b : ((Bot -> Top) -> (Bot -> C)) . (try (try a with b) with (\ b : A . true))) else (if (try (try (try true with c) with (\ a : A . true)) with (try a with true)) then (\ b : (Bool -> Top) . false) else (try (a error) with (\ d : (Bot -> Bot) . false))))
(try (\ c : ((Top -> A) -> ((Top -> A) -> Bool)) . (if (\ a : B . c) then (\ e : (C -> B) . error) else (if true then (if a then false else b) else (b true)))) with ((if (if b then false else false) then error else a) (b (error a))))
(if ((\ e : (Bool -> B) . (true error)) (if (true (\ d : C . true)) then (c false) else (\ e : (B -> B) . a))) then (if (\ a : (B -> Bot) . (try true with true)) then (try (\ a : Bot . b) with ((if a then a else true) (if b then error else true))) else (\ e : Bool . c)) else (if (if b then (try c with true) else (if true then b else c)) then ((a a) c) else (if b then (a false) else false)))
(if (try ((if error then (c false) else (a error)) (if a then c else true)) with (\ d : (B -> C) . (\ c : Bool . c))) then (\ c : (Bot -> Bool) . (true (false false))) else (if ((c error) (try a with c)) then (\ c : ((Top -> Top) -> (B -> Top)) . (try false with (if true then c else c))) else (try ((true a) (\ e : Top . true)) with (try c with (if true then a else c)))))
(if (if (try error with (try a with true)) then (a true) else (\ c : Bool . true)) then (\ e : ((Top -> (B -> Bool)) -> (Bot -> A)) . (\ c : ((B -> B) -> B) . (\ d : Top . c))) else ((\ d : Top . false) ((error a) ((if error then c else true) (\ b : Bot . a)))))
(\ a : ((Bool -> Bot) -> (B -> C)) . (((\ c : Bot . false) a) (try (if true then false else (if false then b else true)) with (try b with (try b with b)))))
(try (\ c : ((B -> A) -> Bot) . (if error then (try c with false) else (\ c : A . b))) with (if (try a with b) then (\ e : (A -> B) . error) else (try b with (a true))))
(if (\ e : (Bool -> (B -> Bool)) . (true error)) then (if (try (\ a : A . true) with false) then ((a c) (try error with true)) else (true error)) else (if (error c) then (try (try false with a) with b) else (\ c : (Bot -> Top) . (error b))))
(if ((if b then error else b) (\ d : A . b)) then (if (try c with true) then (\ e : B . true) else (\ c : A . false)) else ((try (\ c : Bool . error) with (try false with (if b then true else c))) (if (if c then error else (b true)) then (try (try b with c) with (error a)) else (try c with true))))
(((if true then b else error) (\ d : Bool . (error error))) (try (try ((a false) (try false with b)) with ((\ e : Top . true) a)) with (if false then false else a)))
(\ d : ((Top -> Bool) -> (C -> Top)) . ((try true with (if c then false else a)) (\ b : (C -> A) . false)))
(try (if ((try a with false) (try a with true)) then (\ d : Bot . error) else (if (if error then c else c) then false else b)) with (((if error then b else c) a) (\ c : Bot . c)))
((try (if (\ c : Bot . error) then (false true) else (\ d : Bool . c)) with ((\ d : Bot . true) (try (if c then c else c) with b))) ((try (\ a : Bool . c) with (a b)) (if c then false else b)))
(try (((try true with false) b) ((b c) (c true))) with (\ c : (C -> B) . (\ c : (A -> Bot) . error)))
(if (\ c : (C -> Bot) . (if false then false else true)) then (if (b b) then (try (if true then true else a) with false) else (true (\ b : Bool . error))) else (\ a : ((C -> B) -> B) . (try c with false)))
(\ c : ((Top -> Top) -> ((Bot -> Top) -> (B -> Bool))) . (if ((try false with c) b) then (try c with b) else (\ a : C . false)))
(((error (if b then true else a)) (if false then (\ b : Bot . c) else (try error with c))) (\ b : ((C -> C) -> (C -> Bot)) . (try (try (try c with a) with c) with (if error then (\ d : A . b) else false))))
((\ d : ((C -> Top) -> (Bot -> A)) . (if (if a then c else false) then (\ c : Bot . false) else (try false with c))) (\ a : ((C -> Top) -> (Bool -> B)) . (\ d : ((B -> Bool) -> (B -> Bool)) . (\ b : (A -> Bool) . (\ a : C . error)))))
(\ b : ((Top -> Bot) -> (C -> (C -> C))) . (try ((try true with error) false) with (if b then (try error with a) else true)))
(if ((\ b : A . a) (try b with (\ d : C . a))) then (if ((if (try c with b) then true else false) (try error with a)) then (if (\ e : C . true) then (b false) else (\ c : A . b)) else (try (try b with true) with error)) else (try (if (try c with a) then (a true) else (try b with a)) with (\ c : Bool . false)))
(try (\ d : (B -> A) . (try true with c)) with (\ a : (C -> A) . (try (try false with error) with error)))
(if (try ((false a) (\ d : B . error)) with (\ a : (C -> Bool) . (if a then false else c))) then (\ c : ((B -> B) -> (A -> Bot)) . (\ c : (Top -> Bool) . (if (if a then true else error) then (try a with b) else (if error then error else error)))) else (try (\ d : (A -> Bot) . (try a with b)) with (if (\ b : Bool . false) then (if a then b else b) else (if (if false then false else false) then false else (\ b : B . true)))))
(try (\ b : ((Bot -> C) -> A) . (try false with b)) with (if (false error) then (try false with b) else (if (try a with true) then false else (if error then true else error))))
(\ b : ((B -> Bot) -> (A -> C)) . ((\ e : (Top -> Bot) . b) (if (c c) then (\ e : C . c) else (\ e : B . true))))
((((\ c : Bot . error) (\ d : B . error)) ((\ d : (Bool -> Bot) . (error error)) (try (try a with error) with (if false then b else true)))) (\ c : ((C -> Bool) -> Bool) . (try false with c)))
(\ b : (((Bot -> A) -> (B -> B)) -> (((Bool -> Bool) -> (A -> A)) -> (B -> A))) . ((\ e : Top . b) (if error then a else b)))
(if (try (if (\ c : (B -> Bot) . b) then ((if true then error else false) false) else (if true then true else error)) with (if ((error c) c) then (if true then (\ b : B . a) else (if true then true else a)) else (try c with false))) then (if (if (try false with a) then b else error) then (if false then error else true) else (if false then error else b)) else (\ c : (Bool -> B) . (try (\ e : B . error) with (try true with b))))
(\ a : ((Bool -> A) -> (Bot -> C)) . (if (try (\ d : (Bool -> C) . (try c with false)) with (try true with c)) then (\ a : (C -> Bool) . (try b with error)) else (try error with (error c))))
(if ((a b) (try false with error)) then (\ a : (B -> A) . (if b then true else error)) else (\ e : ((C -> Bot) -> (A -> Bot)) . (if (try b with b) then (a b) else (try a with c))))
(\ a : (((Top -> Bool) -> (Top -> C)) -> (A -> Bot)) . (if (try (\ b : A . error) with (try (try false with a) with true)) then (\ d : (Bot -> Top) . (\ e : (C -> C) . (\ c : B . c))) else ((try error with false) (try error with c))))
(\ a : ((((Top -> Bool) -> (Bot -> Bot)) -> ((Bot -> Top) -> C)) -> ((B -> C) -> (A -> C))) . (if (if (if b then a else error) then (\ e : Bool . a) else (if a then b else a)) then (try (if error then a else error) with (a c)) else (\ e : (B -> B) . (if true then error else b))))
(if (\ e : (A -> Bool) . (try true with c)) then (if ((if error then b else true) (true b)) then (if false then error else c) else (try (if (\ e : Bot . c) then b else (a c)) with (if b then b else b))) else ((\ d : Bot . c) (if true then a else b)))
(try (\ d : (A -> Bot) . (if c then a else a)) with (try (\ d : Top . a) with (if (try error with a) then true else (\ b : Top . false))))
(\ a : (((A -> A) -> (C -> B)) -> ((B -> B) -> ((Bool -> B) -> A))) . (\ c : (B -> Bot) . (\ e : (C -> Bot) . true)))
(try (if ((try a with false) (true error)) then (if (\ b : (Top -> C) . (try false with b)) then (\ c : C . b) else (try error with error)) else (\ a : (Top -> Bool) . (\ c : Bot . c))) with ((try (error error) with (try error with a)) ((try (a c) with (error a)) (if false then b else b))))
(if (\ b : ((Bot -> C) -> (A -> C)) . (try (\ c : (C -> Bot) . b) with (\ e : Bool . (if c then error else error)))) then ((if (if false then a else c) then (try c with true) else (try (if a then c else b) with error)) (try (true c) with (try a with true))) else (\ b : ((Bot -> Bot) -> Bot) . (true (if error then c else b))))
(if (try (try a with true) with (try false with c)) then (\ a : ((Top -> A) -> (Bool -> Top)) . (if (if c then b else error) then (\ c : (Bot -> Top) . (\ d : Top . error)) else (error (if c then a else error)))) else (\ a : (Bot -> A) . (\ d : A . false)))
(if (try ((\ b : C . (try b with a)) (b b)) with ((\ d : Top . b) c)) then (if (if (false true) then (if error then true else c) else (try false with c)) then (if (c a) then (true a) else (c a)) else (try (c error) with (if b then (\ d : C . a) else a))) else (\ d : ((A -> Bot) -> (C -> Top)) . (try (if false then (\ b : Bot . error) else c) with (if false then a else error))))
(try (if (try error with error) then (true true) else (b a)) with (\ c : ((Top -> Top) -> Bool) . (try c with a)))
(try (if (\ d : (C -> C) . (error a)) then (try (if b then a else c) with (false error)) else (\ d : C . error)) with (if (try false with a) then (\ d : Bool . a) else (c (if b then b else a))))
(if (if (if (try false with b) then (try false with false) else a) then ((\ a : Top . c) (if a then false else b)) else (\ a : (B -> (Bot -> B)) . (try b with a))) then (try (if (try true with error) then (try c with true) else a) with (true true)) else (if (c b) then (try (c (true a)) with (try (try false with b) with false)) else (try (\ d : Top . true) with (if b then b else b))))
(if (if ((if b then c else a) (c a)) then (true (if a then b else b)) else (\ a : Bool . error)) then (try (if true then false else a) with (if (\ a : A . a) then (try false with false) else a)) else ((try (if error then false else b) with (c c)) (try (false a) with (try (c error) with (try b with true)))))
(if (\ e : (B -> (Bool -> Bool)) . ((a true) (a error))) then ((b false) (error b)) else (try (if error then (\ c : B . false) else c) with (if (a false) then (\ a : Bool . false) else (try false with c))))
(try (if (if a then true else (false false)) then (a false) else (\ b : (B -> C) . b)) with (try (if (\ c : (B -> Bot) . error) then (try a with false) else (\ c : (C -> A) . (try c with b))) with (if (\ d : C . c) then (if c then a else error) else (if false then a else b))))
((try (try (\ d : C . c) with (\ a : (Bot -> A) . (\ b : Bool . false))) with ((if b then true else error) error)) (\ c : (Top -> A) . (\ a : Top . c)))
(((\ c : (Top -> C) . true) (\ d : B . (if c then true else false))) (try ((\ b : Bot . false) (true true)) with (try (if false then b else c) with true)))
(\ c : ((Bool -> Bot) -> ((Bot -> Bot) -> (B -> Bot))) . (if ((a c) (if c then c else false)) then (if (false a) then a else true) else (true false)))
(try (try (if error then (\ c : Top . b) else (if true then b else a)) with ((try a with true) (if true then true else error))) with ((true (\ b : B . b)) (if (if a then c else error) then error else (false error))))
(try ((if a then error else true) ((try false with error) false)) with (\ b : (B -> A) . (try (if b then a else c) with b)))
(try (\ d : (Bool -> Bot) . (if error then (try false with a) else (c true))) with (\ b : ((B -> B) -> (C -> Bot)) . (try (c c) with ((a c) (\ e : Bot . b)))))
(\ b : (((B -> Bot) -> (Bot -> A)) -> ((Bot -> Bool) -> (C -> Bool))) . (\ d : (Top -> B) . (b c)))
(try (try (try (try true with false) with (\ e : Bool . true)) with (try (\ e : A . true) with (try false with b))) with (if (try (error a) with error) then (try (if a then false else error) with true) else (\ e : Bot . error)))
(if ((try (\ a : Bool . b) with (c b)) (false false)) then (if (try (b false) with (if false then true else false)) then (try c with a) else ((false error) (try error with c))) else (\ a : ((A -> Bot) -> (Bool -> C)) . (\ c : Top . (if c then b else c))))
(\ d : (((B -> Bot) -> Top) -> (Bool -> (C -> Top))) . (try (error error) with (if b then a else error)))
(\ a : (((A -> (B -> Bool)) -> (Bool -> Bool)) -> (Bot -> (Bot -> Top))) . ((if (try (if error then true else true) with error) then (if b then false else true) else (error false)) (\ b : (B -> (A -> Bool)) . (try false with error))))
(try (\ c : (Bool -> A) . (if c then a else a)) with (try (try (if b then error else true) with ((try true with b) false)) with (if false then b else (if error then error else false))))
(if (\ d : (C -> (Top -> C)) . (\ a : (Bool -> Top) . false)) then (try (if (if true then b else b) then false else false) with (if b then c else false)) else (\ d : ((C -> A) -> Bool) . ((try (try false with c) with (a a)) (true (\ e : Bot . true)))))
((try (\ a : (Bool -> Top) . error) with (if error then false else a)) (if (false error) then ((if c then error else a) (\ e : B . c)) else (if (\ b : Top . b) then (\ e : Bool . true) else a)))
(\ b : (((A -> A) -> (B -> Bot)) -> (Top -> Bot)) . (try (false b) with (try true with true)))
(if (try (try false with b) with (\ c : Bool . c)) then (\ d : ((A -> Bot) -> Bot) . (if (error error) then error else (\ b : B . c))) else (if (try false with a) then (\ e : Bool . true) else (try a with b)))
(try (if (try (if b then a else a) with ((if c then false else c) (if c then b else a))) then (\ c : Top . c) else (\ b : (B -> Bool) . (false error))) with (\ e : ((Top -> A) -> Bool) . ((error true) (error c))))
(try (\ a : ((C -> B) -> B) . (if true then a else (\ c : C . c))) with (try (if false then c else false) with (if (a a) then (if a then error else c) else (try false with c))))
(if (\ c : ((A -> Top) -> ((B -> A) -> (Top -> Top))) . (\ d : (C -> Bool) . (if true then c else c))) then (\ c : (Bool -> B) . (try c with (\ a : C . false))) else (\ c : (Bool -> (B -> Bot)) . (\ b : Bot . false)))
(try ((try (try true with a) with (if a then error else error)) (if (if c then b else true) then (try false with false) else (\ a : A . b))) with (try (if error then c else (\ e : A . a)) with (\ d : C . error)))
(try ((if b then a else c) (\ a : (A -> A) . (try a with b))) with (try ((c false) false) with (try (c true) with (if b then c else a))))
((if (if false then (c b) else (if b then a else false)) then (\ e : ((Top -> Top) -> (B -> Bool)) . (if (\ b : Bool . b) then true else false)) else (if error then true else true)) (try (\ b : (A -> Top) . (if a then false else false)) with (if b then error else true)))
(\ e : ((C -> Bot) -> (B -> Top)) . (try (\ d : Top . false) with (\ c : (C -> Bot) . (false error))))
((try (try (\ d : Bot . error) with (false c)) with (\ b : (B -> B) . a)) (try (false (\ c : A . c)) with ((try error with c) true)))
(try (try (error false) with (if true then b else error)) with (if (try a with c) then (try c with b) else (error false)))
(((if c then false else (try error with true)) (try (try error with true) with (b false))) (((try c with c) (if c then true else error)) (false (try a with c))))
((if (\ a : A . b) then (\ a : (Top -> B) . c) else (b c)) (\ c : ((Bot -> C) -> (Bot -> B)) . (if (try true with false) then (false c) else b)))
(\ b : ((((B -> Top) -> (A -> Top)) -> (Bot -> Top)) -> ((Bot -> Bool) -> (A -> A))) . (try (c c) with (try (if false then a else b) with error)))
(if (\ a : (B -> (A -> Bot)) . (if true then c else false)) then (try (try (\ e : Bool . b) with (\ c : C . error)) with ((a a) (\ c : Bot . b))) else ((try (try c with error) with b) (b false)))
(((if a then false else c) (\ b : (C -> Top) . error)) (try (error a) with (if c then c else a)))
((if (\ c : A . error) then (try (\ e : Top . b) with (if b then c else true)) else (try b with c)) ((try (try (\ c : A . b) with (try error with b)) with (\ b : B . a)) (\ a : C . (if error then a else a))))
(try (try (false (try b with error)) with (\ a : (Bool -> Top) . c)) with (if (\ b : A . (\ d : A . false)) then (try (false c) with (if b then (try error with error) else (if c then a else b))) else (if (\ d : C . c) then (try c with true) else (try error with b))))
(if (try (if (false a) then (\ a : C . true) else (if a then a else (try false with true))) with (c error)) then ((error true) (\ d : B . b)) else ((((false b) (\ d : Bool . error)) (try error with b)) (if (a c) then (a true) else (if false then c else a))))
(if (if (if b then b else a) then (\ d : B . true) else (try error with a)) then (\ a : (B -> A) . (if (try false with true) then (if a then b else b) else (try (error false) with (try false with b)))) else ((false (false c)) (if (if b then error else c) then error else (c c))))
(if (if ((\ d : A . a) (if c then error else b)) then (try (false error) with c) else (try true with error)) then (if (\ b : (Top -> A) . (error b)) then (\ a : Bot . false) else (try (error a) with (try (a false) with (try true with c)))) else (\ b : ((A -> B) -> (C -> B)) . (\ b : Top . true)))
(\ a : (((Top -> Bool) -> (Bool -> Bool)) -> (C -> (C -> C))) . (if (try (if (\ d : B . c) then (\ a : C . true) else c) with (error error)) then (try (\ e : C . true) with (if (if true then true else b) then a else false)) else (true c)))
(try (try ((a error) true) with (if error then false else b)) with ((\ d : (Top -> B) . (try b with error)) (if (\ c : Bool . a) then (if b then a else true) else (try true with false))))
((\ a : ((A -> Bool) -> (A -> Bot)) . (if error then true else b)) (try (try (error true) with (if c then error else a)) with (try (\ a : Bot . (\ e : Bot . b)) with (try false with true))))
(((\ d : Top . error) (if (a false) then (try false with a) else false)) (try (try false with b) with (\ c : C . c)))
(try ((if (false (try b with a)) then (if a then error else b) else (try c with false)) (\ c : (Bot -> Top) . true)) with (try ((try true with false) (if c then true else (\ c : Bool . false))) with (\ a : (Top -> A) . (if false then a else a))))
(\ a : ((B -> Bool) -> (Bool -> Bot)) . (if (try error with true) then (\ b : ((B -> C) -> A) . (\ e : (C -> A) . c)) else (try (false true) with (try false with b))))
(\ b : ((A -> B) -> (((C -> A) -> (B -> C)) -> (B -> Bool))) . (\ b : ((C -> Top) -> (C -> Bool)) . (try (true true) with (\ e : (Bot -> A) . error))))
(try (try (\ a : (Bool -> B) . (error false)) with (\ e : Top . a)) with (try (\ a : Bool . (\ e : C . a)) with (try (true true) with b)))
(try (\ e : (Bool -> (B -> C)) . (try (error c) with (true c))) with ((((try b with false) (error false)) (if true then (\ d : Bool . c) else (true c))) ((a true) (if b then c else false))))
(try (if (if (try false with error) then (\ d : B . a) else (\ b : Bool . b)) then ((if false then c else c) (\ d : A . error)) else (try a with b)) with ((if b then (try error with c) else a) (\ e : (Bool -> A) . (try c with true))))
(\ a : (((C -> Top) -> (Bool -> Top)) -> ((A -> B) -> (C -> A))) . (\ d : ((Top -> C) -> (A -> C)) . (try (if false then b else c) with (if c then (\ e : Top . b) else (false false)))))
(if (if (\ d : (C -> Bot) . ((try true with false) (try c with error))) then ((try error with false) (try false with false)) else ((if b then error else true) (if true then b else c))) then (((\ c : A . c) (\ c : Bot . error)) (try false with false)) else (\ e : ((A -> A) -> Bot) . (if (if c then true else error) then (error c) else (if true then (try false with error) else (error true)))))
((if (try b with true) then (\ c : (A -> B) . (a b)) else (\ c : (Bool -> B) . (if b then error else b))) (\ c : (A -> B) . (\ d : Top . (if c then b else b))))
(\ c : (((A -> Bool) -> Bot) -> ((B -> Top) -> (Bot -> A))) . (try ((error true) (try (c error) with a)) with (try (if true then b else true) with (error a))))
(try (\ d : ((A -> B) -> C) . (try (try a with b) with b)) with (if (if true then false else b) then (if false then error else a) else (try (if b then c else c) with (\ b : B . true))))
((if (try false with false) then (\ e : Bool . c) else (true (\ c : B . true))) ((try true with false) (try true with c)))
(\ e : ((Top -> Bot) -> ((A -> Top) -> (A -> Top))) . (if ((\ c : Bot . error) (true false)) then (\ d : ((C -> C) -> Bot) . (\ e : Bool . c)) else ((if error then a else b) (if false then true else true))))
(if (if ((true true) (if true then c else c)) then (if (if b then false else false) then (\ b : C . b) else ((if false then false else a) (b error))) else ((try false with error) true)) then ((try (try a with c) with (try error with true)) ((if false then b else c) false)) else (try (try c with (if false then error else false)) with (\ c : (Bot -> Bool) . true)))
(try (try (b error) with (\ a : (A -> A) . (try false with a))) with (try (\ c : (A -> A) . a) with (try false with b)))
(try (if (if b then false else c) then (false (if false then error else error)) else (try error with error)) with (\ e : (Bot -> (C -> B)) . (if error then c else c)))
(try (try (if b then error else b) with (c b)) with (try (a c) with (try b with (try a with false))))
((\ b : (Bool -> C) . (try true with true)) (try (\ e : (Bot -> C) . (if error then a else c)) with (if (\ b : A . true) then (\ a : Bot . (error c)) else (if error then (true c) else (if error then true else error)))))
(try ((\ d : (C -> C) . (try (\ e : A . c) with (\ d : B . b))) (try c with (if error then error else error))) with ((try (\ a : Bool . (if false then error else error)) with (\ e : Bool . true)) (false (false c))))
(\ b : (((B -> (C -> Bool)) -> (Bool -> C)) -> ((B -> A) -> (Bot -> C))) . (if (\ e : (A -> C) . (try (true false) with (c a))) then (c (try b with true)) else (\ c : (C -> A) . error)))
(\ d : ((Top -> (Bot -> Bot)) -> (Top -> Bot)) . (try (\ e : (Bool -> A) . (try false with false)) with (true (try a with error))))
(try ((\ a : C . a) (\ d : Top . c)) with (\ d : (Bot -> B) . (try error with false)))
((if ((c true) (true b)) then (try a with (if error then b else a)) else (try (if c then error else error) with error)) ((if ((try c with true) (\ e : B . a)) then (\ d : Top . error) else ((if error then true else error) c)) (if (\ e : (A -> Bool) . a) then (if a then true else true) else (if b then a else false))))
(try (try (try (false b) with (if a then c else true)) with ((try c with c) (try (try error with a) with (try a with c)))) with (try (c a) with (if c then false else error)))
(\ d : ((Top -> A) -> (A -> B)) . (if (error false) then (\ b : A . b) else (\ a : Top . true)))
(if (if (error (\ c : Bool . c)) then (try b with (\ a : B . c)) else (try true with b)) then (\ c : (C -> Top) . (error b)) else ((\ a : (Bot -> C) . (c c)) (if (try a with b) then (if c then true else c) else b)))
(if (if (\ a : Bool . (a error)) then (\ d : (Bot -> (B -> C)) . (error true)) else (\ b : Top . (\ a : C . false))) then (try ((if a then c else b) c) with (\ b : Bool . (try false with a))) else (\ b : ((A -> C) -> (C -> Top)) . (if (try false with a) then (\ e : Bot . (false error)) else (try (\ c : B . error) with (if a then a else b)))))
(if (\ d : ((B -> (Bot -> B)) -> (Bot -> B)) . ((try error with b) (\ c : C . c))) then (if (\ b : B . (try a with b)) then (\ a : (Top -> Bool) . (if a then a else a)) else (try error with false)) else (if (\ d : ((A -> Top) -> Bool) . (false a)) then (\ c : A . (if error then a else false)) else (\ b : A . error)))
(try (try (\ b : A . b) with (c true)) with (try (try true with (false error)) with (error (b true))))
(try (try (if true then (\ c : Top . false) else (if b then error else error)) with (\ a : (B -> Bot) . b)) with (\ c : ((Top -> C) -> (Bot -> B)) . ((if b then a else true) (\ d : Top . c))))
(try ((if (error c) then (if b then (try false with error) else c) else (if b then a else b)) (if (\ b : (Top -> Bot) . (error false)) then (try error with (\ c : A . a)) else (try error with false))) with (\ b : (A -> Bool) . (if error then false else false)))
(try (try (try (try c with error) with (if b then a else c)) with (if (try error with false) then (\ a : (B -> C) . (false true)) else (try (\ c : Bool . error) with false))) with (if ((if false then c else error) a) then (\ a : ((Top -> C) -> A) . (if b then (if error then b else a) else (\ b : A . c))) else (try (\ d : A . true) with c)))
(if ((if false then (try error with error) else (try a with true)) (\ a : (Bot -> A) . b)) then (try (if b then b else true) with (\ d : A . b)) else (((\ a : C . c) (try false with c)) (if (try false with false) then true else (\ c : Top . true))))
(try (try (try (try c with c) with (try (error c) with (\ c : Bool . false))) with (\ e : ((Top -> A) -> (A -> C)) . (true (try c with a)))) with (try (\ d : B . (a b)) with (try (error false) with (\ c : C . c))))
((if (if b then (try b with true) else a) then (\ c : ((A -> C) -> (Bool -> B)) . (if (try false with error) then (try error with b) else c)) else (true b)) ((\ d : ((Top -> Top) -> (Bot -> Top)) . ((b error) b)) ((if true then error else false) a)))
(try (try (try (false c) with true) with (\ d : B . true)) with (\ a : ((A -> B) -> Top) . (\ c : (Top -> C) . (if b then true else true))))
(if ((try (try b with c) with false) (try false with c)) then (if (try (\ a : B . false) with (if false then false else error)) then (if ((error false) (try b with error)) then (if false then c else c) else (\ b : (Bool -> B) . c)) else (try ((b b) error) with (try c with (\ c : B . error)))) else (\ b : ((C -> (B -> B)) -> ((Top -> C) -> A)) . (\ e : (Bool -> B) . (\ d : A . b))))
(try (if (try false with (if c then true else error)) then (try false with b) else (if true then a else (\ b : Bot . false))) with (\ d : (C -> Bool) . (if (\ d : Bool . a) then (try true with a) else false)))
((\ e : (A -> B) . (\ e : Bot . c)) (try (\ a : (Bool -> B) . (try c with c)) with (if (\ a : Top . true) then a else (try a with error))))
(if (\ e : (A -> Bool) . (\ c : C . true)) then (if ((try c with c) (\ a : Bool . error)) then (if (try a with a) then (try error with b) else (if a then b else false)) else (\ e : ((A -> Top) -> (A -> Bool)) . (\ b : Top . a))) else (if (\ d : ((Top -> A) -> Bool) . (try a with c)) then (\ b : (Bot -> B) . a) else (\ a : C . a)))
(try (if (\ e : (B -> Bool) . error) then (\ c : Top . b) else (true error)) with (try ((try c with a) true) with (if (b a) then c else c)))
((\ c : (((Bot -> Bool) -> A) -> (Top -> Bot)) . (if (try c with (try c with b)) then (c false) else (if error then a else false))) ((\ b : (Bool -> (Top -> B)) . (if c then error else error)) (\ a : Bot . b)))
((\ c : ((Bool -> (Bool -> C)) -> ((Top -> C) -> (A -> Bot))) . (if false then (if a then a else false) else (try false with error))) (\ a : ((Bool -> Bool) -> Bot) . (\ e : Top . true)))
(\ d : ((Bot -> Bot) -> ((Top -> B) -> (C -> Top))) . ((true a) (try (\ b : B . b) with b)))
(((\ c : (A -> Top) . false) (false b)) (if ((\ e : Bool . error) (true false)) then (\ d : A . error) else (c (b true))))
(if (\ e : (Top -> (Bool -> B)) . (c true)) then (if (try (try (try false with b) with a) with (if true then b else c)) then (try (\ b : A . false) with (try b with b)) else (try error with error)) else (try (try false with true) with (false false)))
(((\ e : (B -> C) . (if error then error else c)) (try a with error)) (if (if a then (true c) else (try false with c)) then (if error then a else b) else (if (try c with c) then c else (\ e : C . error))))
(try (\ a : ((A -> C) -> (C -> B)) . (try c with a)) with (try (\ d : (A -> C) . ((try true with true) (if false then c else true))) with (if (\ b : Bool . b) then (try b with true) else (if (try a with error) then (\ a : Bot . false) else b))))
(try (if (try (if (try b with c) then a else (if a then c else true)) with (try b with false)) then (if true then (if c then error else a) else error) else (try ((false error) a) with (false a))) with (try (false (\ d : Bool . a)) with ((if b then b else false) (error c))))
(if (((c b) false) (\ c : (Bool -> B) . (\ a : (Top -> Bot) . c))) then (try (\ d : (Bot -> A) . false) with (\ c : Bot . b)) else (try (true b) with (\ e : B . c)))
(if (\ a : (Bot -> Bool) . (try b with false)) then (\ c : (A -> (B -> Bool)) . (\ d : C . (true true))) else (\ c : (((Bot -> B) -> Bot) -> (A -> Bot)) . (\ a : (Bool -> C) . (b c))))
