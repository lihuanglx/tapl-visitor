(! (\ e : (< a : Bool , a : Unit >) . (pred b)))
({ e = (! (let e = (fix 0) in (true "apple"))) , c = (case (fix (let a = 1 in a)) of < b = d > => (2 (case true of < e = d > => 2 | < e = e > => c)) | < a = b > => (case "apple" of < a = e > => b | < e = e > => c)) })
(ref (iszero (< e = ("apple" := "apple") > as C)))
((succ (let c = (fix true) in "apple")) as (Ref (Source Bot)))
(pred (ref (pred "apple")))
(pred (case ((succ 1) . a) of < a = d > => (\ e : B . "boy") | < d = e > => (< d = 0 > as String)))
(! ((pred "apple") . e))
((pred (! 1)) as (< e : (Bool -> (Unit -> Nat)) , d : (B -> Unit) >))
(((ref true) . c) as ((Ref Bot) -> ({ a : Bool , c : C })))
(case (fix (succ ({ e = c , e = c }))) of < b = c > => ((pred (\ b : Unit . 1)) := (< d = (fix true) > as (< d : Top , c : String >))) | < e = e > => ((succ (ref false)) (iszero (a . e))))
(fix (\ d : (< b : (Source Unit) , c : ({ d : String , a : A }) >) . ((\ e : A . 1) := (pred "apple"))))
(< b = (\ b : ({ e : A , a : (< c : String , d : Bool >) }) . (ref ({ a = "apple" , d = "apple" }))) > as (< b : (Source Top) , d : (< a : Top , e : String >) >))
({ d = (let b = (if false then 2 else 2) in (fix 1)) , d = ((false (let e = false in 0)) as (Source (Sink Nat))) })
((\ a : ((Source (Source Float)) -> (Bot -> Float)) . (\ d : Nat . 2)) . d)
(case ({ a = ({ b = (0 as Unit) , a = (if 2 then a else true) }) , e = (fix b) }) of < b = c > => (pred (ref (if 0 then c else 1))) | < e = a > => ((pred 0) ((iszero "apple") . d)))
(< a = (succ (\ a : Float . a)) > as (Ref ({ b : String , c : Top })))
(ref (let b = (succ "apple") in ((if b then a else "boy") as (< b : Bot , d : A >))))
(let d = ((let e = 0 in 1) . b) in (iszero (\ d : Unit . c)))
(! ((< c = ({ e = a , b = ("boy" as Nat) }) > as (Sink (Bot -> Top))) := (! (if true then 0 else c))))
(! (\ d : (Source String) . (false as Float)))
({ a = (\ a : (Ref Bot) . (1 as (Ref Bool))) , a = (< a = ({ d = (iszero c) , c = ("apple" as Top) }) > as (Source (Source Bot))) })
(succ (iszero (< e = (\ c : Unit . c) > as Bot)))
((let e = (case 2 of < c = c > => 1 | < c = b > => a) in (0 . b)) (let b = (if 0 then unit else false) in ((< b = 0 > as B) . c)))
(if (if (< b = (fix true) > as Bool) then (succ true) else ("boy" true)) then ({ d = (if false then (1 as C) else 0) , d = (! b) }) else (< e = (let d = "apple" in 0) > as (< c : B , e : ({ d : B , b : Nat }) >)))
(let d = (< e = (pred b) > as ({ e : ({ c : Bool , b : String }) , e : (String -> Unit) })) in ((0 . c) (\ e : Float . ({ e = 1 , a = 1 }))))
(if (! (fix a)) then (fix ((case (false . c) of < a = d > => (case "boy" of < b = b > => unit | < d = c > => false) | < a = a > => 1) as (B -> Nat))) else (< a = (pred unit) > as (Sink (Source Float))))
((let e = (pred (let d = "apple" in 1)) in (ref 0)) := (((ref ("apple" as Top)) . c) := ({ c = (case "apple" of < a = c > => c | < e = e > => a) , e = "apple" })))
(ref (< c = (let d = 2 in "boy") > as (< b : Unit , b : (Source Float) >)))
((pred (if (fix ("boy" . c)) then (if a then unit else true) else (ref 0))) (! ((! false) . d)))
(fix (let d = ((fix "apple") c) in ({ a = 0 , b = ({ a = b , d = "apple" }) })))
(case (succ (if 0 then 0 else unit)) of < c = d > => ({ d = (let b = unit in false) , c = (1 2) }) | < e = b > => (succ (iszero b)))
(\ a : (< b : (< d : Float , d : Bool >) , d : (C -> B) >) . (\ d : ({ b : Bot , c : (A -> Float) }) . (case (fix false) of < e = e > => c | < a = c > => "apple")))
({ d = (< a = (a 0) > as (Ref String)) , e = ((1 . a) ((b := false) := (! "boy"))) })
(iszero (if ({ b = 0 , d = 1 }) then (succ c) else (! true)))
({ c = (({ a = ({ e = (true as Top) , c = (iszero false) }) , c = (! (case b of < c = c > => c | < e = d > => c)) }) := (("boy" unit) as (Sink A))) , c = (pred (\ d : (Ref A) . ((\ a : Nat . unit) . b))) })
(pred (if ({ d = (succ false) , a = (! false) }) then (fix a) else (< e = 0 > as (< e : B , c : Unit >))))
(< d = (\ c : ({ a : B , a : String }) . (true "apple")) > as (Source (< c : C , a : ({ e : Float , c : String }) >)))
(succ ((succ 0) as (Bool -> Unit)))
(! ({ d = (succ b) , b = ({ b = true , e = "boy" }) }))
(let d = (if (("apple" false) (c as Top)) then (ref (\ b : Unit . b)) else ((if 2 then 2 else b) . d)) in (< d = (({ e = b , b = a }) (! unit)) > as ({ b : (Sink Float) , e : (Source ({ b : String , d : Nat })) })))
(succ (fix (\ c : Bot . a)))
({ a = ((\ a : Bool . false) := (succ a)) , e = (ref ((let b = true in 1) := unit)) })
(fix (! (let b = 0 in (c 1))))
({ d = (pred (unit . a)) , c = (let e = ((fix "boy") . e) in (ref ("apple" := "apple"))) })
(succ (iszero (fix 1)))
({ d = (\ e : (Nat -> Unit) . ("boy" "boy")) , c = (pred (case 2 of < e = e > => 2 | < b = c > => unit)) })
(ref (ref (succ "boy")))
(fix (< b = (1 as Float) > as (Source B)))
(let c = (((iszero "apple") (! c)) as (Source Bool)) in (iszero (ref (pred (iszero 1)))))
({ e = (iszero ((if false then true else a) . c)) , d = (iszero (unit 1)) })
(if (! (< a = c > as C)) then ((ref (case b of < e = b > => "boy" | < b = b > => true)) . e) else (succ (case c of < b = b > => (ref a) | < d = a > => (succ 0))))
({ e = (iszero ((< c = b > as Bool) as (Sink Bot))) , d = (fix (! true)) })
(succ (fix (< a = "boy" > as String)))
(((2 . e) as (< d : Nat , d : Bool >)) . b)
((fix (! (if false then 0 else 0))) := (pred (succ (0 true))))
((! (unit as Top)) := (if (let b = "apple" in "boy") then (< d = (b as Top) > as (< a : C , c : Bool >)) else ({ d = (succ c) , a = (true (if unit then "apple" else 0)) })))
(let e = (iszero (case c of < d = c > => c | < d = a > => "apple")) in ({ c = ((iszero "apple") . d) , b = ((pred 1) as (Ref Float)) }))
(< b = (let e = (1 (fix c)) in (succ a)) > as ({ b : (Source C) , a : (({ c : C , c : C }) -> ({ e : Nat , e : B })) }))
(succ ((1 a) . d))
(((ref false) (ref "boy")) ((iszero (false . d)) as ({ d : C , a : (Ref B) })))
(case (pred ({ b = a , e = "boy" })) of < b = a > => (let b = (case (let c = (case a of < e = c > => b | < e = d > => "boy") in (false "boy")) of < d = d > => (let d = "apple" in "apple") | < a = c > => (succ (pred "boy"))) in (ref a)) | < a = d > => (fix ({ e = b , c = false })))
(ref (\ e : (Ref String) . (c as C)))
((< b = (iszero "apple") > as (< c : String , d : Bot >)) := (succ (\ b : Bool . 0)))
(\ e : (Source (Source Top)) . ((if (case 0 of < a = c > => false | < a = e > => 2) then 0 else b) as (Sink (Source Bot))))
(if (if ((ref "apple") as (Float -> Float)) then ({ e = (ref c) , d = (if (! unit) then (1 1) else (let e = 0 in 0)) }) else (iszero (\ b : Unit . 1))) then (succ (pred unit)) else (fix (succ (succ b))))
(ref ((succ true) := (fix unit)))
(! (iszero (< a = (if (1 1) then ({ d = "apple" , b = 2 }) else "boy") > as (Ref Nat))))
(ref (ref ((unit . d) . e)))
((< e = (let d = (ref true) in c) > as (Sink (Ref Nat))) . d)
(iszero (iszero (ref 1)))
(fix (if ({ d = c , e = (0 as Float) }) then (iszero 2) else ({ c = 0 , c = 2 })))
(pred ((\ a : (Source Unit) . ({ e = false , d = false })) as (C -> (< a : Bool , c : Bool >))))
(fix (succ ((< b = b > as Bool) as ({ a : (Sink Top) , d : (String -> B) }))))
(succ (< b = (c (unit := unit)) > as (Sink Float)))
(if (ref (if (! 2) then 2 else ({ a = true , b = true }))) then (! (unit := (let a = 1 in 2))) else ((false (false as A)) as (Source (Ref Bool))))
((ref (({ b = unit , e = c }) := ((if 2 then true else 2) false))) := ((succ (if true then b else 2)) . d))
((! (\ c : String . false)) ((succ (case false of < e = d > => "boy" | < c = a > => 1)) (let d = (let c = (if a then 0 else b) in (let e = 0 in "boy")) in (succ true))))
(! ((\ c : A . "boy") . a))
({ a = (pred (succ (\ c : String . 0))) , b = (ref (true . e)) })
((fix (succ "apple")) := (! (\ e : Float . true)))
(ref ((\ c : ({ c : Float , a : Nat }) . (false as Float)) as ({ a : Bot , b : (Ref String) })))
((pred (ref (iszero a))) := (let b = (ref "apple") in (0 b)))
(case (\ d : (Sink (Sink Unit)) . (! (ref (\ b : Bot . unit)))) of < e = c > => ((< a = b > as Nat) as ({ b : (Sink Float) , d : A })) | < a = a > => (succ (iszero ("boy" unit))))
(fix (if ((\ a : A . "boy") ("apple" as B)) then (< c = (let c = "boy" in unit) > as (< b : Bool , c : String >)) else (fix a)))
(\ e : (((Sink C) -> (Bot -> Float)) -> ({ d : (Ref Top) , a : (Source B) })) . (({ e = (ref c) , c = 1 }) (\ c : Nat . 1)))
(let d = ({ b = (ref c) , a = (\ e : Unit . "apple") }) in (pred (! "boy")))
((if ("boy" 0) then ("apple" (if 2 then 2 else 1)) else (1 as Bool)) as (< b : (Source Bool) , e : (Source Unit) >))
(! ({ c = ((c true) (< b = 1 > as Float)) , b = ({ c = 1 , b = c }) }))
({ b = ((! (a := (false . e))) := (ref "apple")) , d = (case (iszero (fix a)) of < b = b > => (! true) | < c = a > => (let d = "apple" in (ref b))) })
(fix (< b = (ref (0 as Float)) > as ({ c : (Source Bool) , b : (B -> Top) })))
(pred (if (a (let b = c in 0)) then (< b = a > as B) else (ref (! false))))
(< b = (succ (false "apple")) > as ({ b : (Ref Bool) , e : (Ref (Source Bot)) }))
({ a = (\ b : ({ a : Bool , c : C }) . (2 "apple")) , b = ((if (b := 0) then (fix 2) else 1) as (Source (Ref Nat))) })
(! (let a = (case c of < c = d > => (c unit) | < a = d > => false) in ((unit as String) . c)))
(iszero (pred (\ b : (Ref Bool) . c)))
(ref (iszero ((a := a) := (ref "apple"))))
((ref (fix true)) := (pred ((if 0 then false else a) := (< d = unit > as Bool))))
(iszero (fix (pred 2)))
(ref (< b = (< b = (! unit) > as (Source Bool)) > as ({ a : (Ref Top) , e : ({ a : Nat , d : Unit }) })))
((iszero (pred ({ b = b , c = 0 }))) := (let e = (let c = (< b = unit > as (< a : Nat , b : Nat >)) in (let d = false in false)) in ((succ unit) as (Ref Top))))
({ d = (case (if true then b else (fix 0)) of < b = e > => ((succ false) := (case false of < b = b > => unit | < e = e > => b)) | < d = e > => (fix (! unit))) , a = (fix ((if a then "apple" else true) := (a := b))) })
(succ ((("boy" . a) (let a = a in unit)) . a))
(if (case (pred 0) of < b = b > => (c . a) | < d = d > => ({ a = true , b = a })) then (case (let d = 1 in true) of < b = d > => (if 2 then "boy" else 1) | < b = b > => (ref (case a of < e = e > => false | < b = d > => 2))) else (let a = ((! unit) (if unit then 0 else 1)) in (\ b : ({ c : Unit , c : Float }) . (\ a : B . (< e = false > as C)))))
(((2 as String) . c) := (pred (let d = true in 1)))
(\ a : (Source (Source String)) . (((case (0 as Top) of < c = d > => (true . b) | < d = d > => (case 2 of < a = b > => "boy" | < d = b > => 0)) . b) := (iszero true)))
(({ d = (c as String) , d = (iszero a) }) as (((Ref Bot) -> Top) -> ({ b : (Source C) , b : (Sink (< d : A , c : Top >)) })))
(if (fix (fix (< c = a > as Nat))) then (({ b = true , d = 2 }) . a) else (fix (true as String)))
(iszero (pred (false := false)))
(iszero ((< b = a > as (Ref B)) . d))
(succ (fix (succ (let e = a in 1))))
(iszero (< c = (iszero 2) > as ({ a : (Sink (< c : B , e : Top >)) , a : (Bot -> Unit) })))
(fix (let e = (if ({ b = b , e = 1 }) then 1 else b) in (\ c : (Source A) . (! a))))
(pred (pred (ref (ref unit))))
((< e = (! (true 0)) > as (Ref Top)) . e)
(fix (\ c : (Sink Bool) . (ref (fix (1 := false)))))
((((succ a) . b) . d) (! (let e = (true as String) in true)))
(! (((0 b) . a) as (Ref (Sink Bot))))
(case (! (ref 2)) of < b = b > => (case (\ a : (Ref Nat) . (b 2)) of < b = e > => (if (let b = a in 2) then b else 2) | < d = b > => (let b = "boy" in b)) | < e = b > => (fix (\ d : (Bot -> String) . (let d = true in 1))))
(let a = (< a = (succ 2) > as (< c : Float , d : A >)) in ((pred (! a)) as (< d : (Sink Float) , b : (Ref A) >)))
(fix (fix (fix (0 as Bool))))
((case (! b) of < a = b > => (let b = false in unit) | < b = b > => (succ unit)) as (Ref (C -> C)))
(((\ c : Nat . (ref 0)) as (< b : (< a : Unit , c : B >) , d : Top >)) as (Ref (Source Top)))
(\ b : (< d : (Source String) , c : (< e : Float , b : B >) >) . ((pred ({ a = (< e = "apple" > as Bool) , c = ({ a = 0 , c = "apple" }) })) . d))
(pred (pred ({ c = (if true then a else 1) , a = 0 })))
(fix (case ((iszero true) := (if 1 then a else true)) of < c = d > => (let b = (iszero unit) in (! unit)) | < a = a > => (pred ("boy" a))))
(succ (ref (iszero (succ 1))))
((((ref false) := (let e = "boy" in 1)) as (Ref ({ e : C , a : Unit }))) . e)
(fix (< a = (iszero (unit 1)) > as ({ e : (Sink A) , b : Nat })))
(let b = ({ a = (ref a) , b = (iszero 0) }) in (< d = (a . e) > as (Source C)))
(ref (ref (c . c)))
((pred (c . c)) . d)
(! (((1 := a) (b . a)) := (\ a : (Ref Float) . "apple")))
(ref (\ a : (Source (< c : Top , c : Bot >)) . (iszero b)))
(let a = (fix (pred a)) in (((! 0) . c) := (let d = unit in (case "boy" of < a = a > => "apple" | < b = a > => a))))
(pred (if ((fix "boy") as (Source Unit)) then (if "apple" then 0 else 2) else (fix 0)))
((\ e : (Source (Unit -> String)) . ((! true) . c)) (case (iszero (! "apple")) of < b = d > => (pred (if 2 then "boy" else unit)) | < c = e > => (ref (< e = b > as Unit))))
(fix (iszero (true := (if "boy" then 0 else true))))
(< e = (let b = (pred 2) in (succ (succ 2))) > as ((Source Bool) -> (A -> A)))
(ref (succ ((! "boy") . d)))
(succ (\ b : (Source Top) . ((ref a) as (Source A))))
(succ ({ e = (succ (! 2)) , e = (unit unit) }))
(ref ((fix (unit := b)) as (Source ({ a : B , a : Nat }))))
(! ((case (< e = 1 > as B) of < a = a > => (if c then false else "boy") | < d = c > => false) . a))
(if ((succ "apple") := (b := (succ "boy"))) then (ref (let b = (ref (! unit)) in (false . c))) else (let b = (! a) in (if c then "boy" else ("boy" := true))))
(pred (\ e : (Source (Ref Float)) . (pred unit)))
(let a = ((fix "boy") as (Ref A)) in (pred (0 c)))
(succ (iszero (\ d : (< b : Float , b : A >) . (true as String))))
((iszero (succ (\ a : (Source String) . (succ unit)))) . b)
(let d = (if (! unit) then (iszero unit) else ("boy" := a)) in (fix (ref (ref 1))))
(pred (let e = (iszero (< b = "boy" > as Bot)) in ((if b then "boy" else "boy") := (\ e : Bot . "apple"))))
(! (succ ((\ b : String . "boy") as B)))
(fix (((pred c) := ({ e = (pred unit) , b = (b := 0) })) (! (if c then 1 else 0))))
(! ({ a = (< d = (< b = (fix 0) > as ({ a : Bot , b : Bool })) > as (Sink String)) , a = (iszero (pred b)) }))
(let c = ((("boy" as A) . e) as (Source Nat)) in (iszero (fix a)))
((! ("boy" := b)) := (\ d : (Ref Unit) . (iszero unit)))
((< e = (\ a : (< a : C , a : B >) . (0 . b)) > as (Top -> ({ e : Nat , b : A }))) as (Ref (Sink C)))
(ref ((\ c : (Source String) . true) . e))
(\ a : (< d : (< b : A , e : (C -> String) >) , a : ((< b : Bool , c : Bot >) -> (Source Unit)) >) . (case (if b then c else b) of < b = d > => ({ e = (ref b) , c = (case "boy" of < e = c > => "apple" | < b = d > => c) }) | < b = c > => (c . a)))
(succ (pred ((case (unit := 1) of < c = b > => b | < c = d > => false) . b)))
(let d = (succ (fix (let d = false in "boy"))) in (succ (1 . c)))
((fix (ref (let d = false in (case false of < c = b > => "apple" | < b = a > => false)))) as ((Sink (Ref Top)) -> ({ a : ({ b : String , a : (Source Float) }) , d : (Bot -> A) })))
(let d = ({ e = (pred ("boy" := 2)) , e = (ref ("apple" 1)) }) in (\ b : (Ref (Ref String)) . (succ "apple")))
(\ e : (Sink ({ c : (Source Unit) , d : B })) . ({ b = ((true (succ 0)) (1 := "apple")) , e = (if (! (iszero false)) then ((pred 0) . e) else (iszero c)) }))
(fix (fix (iszero unit)))
(ref (< b = ({ a = a , a = unit }) > as ({ a : C , c : Float })))
(if (\ d : (< b : (Bot -> Bool) , c : Float >) . (iszero (2 as String))) then (pred (iszero (1 . d))) else (ref (\ d : B . (b unit))))
(let b = (case (succ unit) of < d = e > => ("apple" := 1) | < b = e > => ({ a = true , d = (iszero b) })) in (((ref "boy") := (ref true)) as (Sink (< c : A , d : Float >))))
((((if (! 2) then (\ b : B . true) else ({ e = 2 , e = a })) ({ a = "boy" , a = (! unit) })) (("boy" . a) := (ref b))) := ((true as Bool) . a))
(case (if ("apple" . e) then (let c = (unit 2) in (unit b)) else (ref ("apple" as A))) of < c = a > => (pred ((! a) b)) | < c = e > => (if (a b) then ({ b = "apple" , b = unit }) else (unit . b)))
(case ((\ e : Top . (succ 1)) ({ d = 0 , d = unit })) of < b = d > => (< d = (\ d : A . unit) > as (Ref Bot)) | < b = e > => (if (let a = a in a) then (unit as Top) else (fix false)))
(pred ({ d = (false . d) , d = (if 0 then 0 else (let a = unit in c)) }))
(fix (let e = (true as Nat) in (pred 2)))
(succ (if (case "apple" of < e = b > => true | < b = e > => 1) then (! "apple") else (fix 0)))
((succ ({ d = false , d = (fix true) })) as (Source (Sink (Bot -> String))))
(! (\ b : (Ref (Ref Float)) . (ref true)))
(((\ b : A . c) as (< c : Unit , b : A >)) := (fix ((succ c) := 2)))
(if ((pred b) . a) then ((let b = true in 1) := ({ e = (ref 0) , a = (let c = b in 1) })) else (! (("apple" "apple") . a)))
(iszero (if (succ a) then (fix (fix true)) else (! (pred "boy"))))
(succ (< b = (if unit then unit else c) > as ({ e : Top , d : Bool })))
({ c = ((if (pred "boy") then (< b = unit > as A) else (succ (if b then 1 else unit))) (iszero ("apple" unit))) , a = ((if (pred 0) then (succ a) else 0) as (Sink Bool)) })
(iszero ((fix ({ b = c , d = b })) as ((< d : Float , a : Bool >) -> Nat)))
(< b = (\ b : (< e : Nat , c : Float >) . (pred (pred unit))) > as (({ e : (Source (Sink A)) , b : (Top -> C) }) -> (< b : ({ e : Top , b : Bool }) , c : (Sink Unit) >)))
(pred ({ b = (! false) , d = (true . c) }))
(pred ({ a = (0 := (< b = a > as Bot)) , b = (iszero (! c)) }))
(({ e = (if ((pred true) (fix "boy")) then (< b = 0 > as Unit) else (succ ({ c = "apple" , c = a }))) , e = (\ e : (Ref (Source B)) . (iszero 1)) }) as (Ref (Source Unit)))
(\ e : (< c : (Source (Sink String)) , a : (Sink String) >) . (pred (case 0 of < e = a > => (let d = false in c) | < d = b > => ({ d = 1 , d = b }))))
(iszero (fix (1 := false)))
((! ({ c = (fix c) , c = a })) (succ (if ({ a = "apple" , c = unit }) then "apple" else 1)))
(succ (fix (if false then a else 2)))
(if (if (iszero (fix (! b))) then (if (2 b) then (c . c) else false) else ((case true of < b = b > => c | < d = b > => false) as A)) then (pred (succ (1 as C))) else (ref (succ b)))
(if (({ d = ("boy" . b) , a = (\ a : Bool . b) }) := (ref (ref 0))) then (((c := 1) := ({ e = c , e = "boy" })) := (case b of < c = c > => 0 | < c = a > => "boy")) else (if (iszero ({ a = "apple" , c = ({ e = a , e = true }) })) then (let c = false in 1) else (< b = (if b then b else 2) > as (Source Bot))))
((if (fix (case 0 of < b = d > => a | < d = c > => false)) then (let b = (< a = b > as Float) in (< c = b > as Nat)) else (\ d : C . (iszero b))) . a)
(case (fix ({ d = (unit . e) , d = 2 })) of < c = a > => (! ("boy" . c)) | < d = a > => (if (ref ({ e = false , e = true })) then (let c = (false . c) in (if b then false else a)) else (b . a)))
(fix ((if a then (\ e : Float . true) else false) := ((let e = unit in false) := unit)))
(fix (succ (succ (pred unit))))
(pred (let a = (let a = 2 in b) in (({ e = c , e = unit }) as (Ref Nat))))
({ a = ((< d = (pred a) > as (B -> String)) ({ d = c , a = c })) , e = ((case (! (let e = 1 in 1)) of < d = a > => (false . e) | < e = a > => (let d = 0 in c)) (\ b : ((Float -> String) -> (Ref Nat)) . ({ e = 1 , b = ({ d = "boy" , c = a }) }))) })
(pred (< e = (\ a : Bot . "boy") > as (Float -> Bool)))
(pred ({ e = (case (succ unit) of < e = a > => (\ b : B . false) | < c = b > => (iszero c)) , b = ((let a = "apple" in true) (iszero "apple")) }))
(({ d = ({ e = (if a then false else 2) , d = (fix a) }) , c = (pred "boy") }) . c)
(ref (({ b = (if "boy" then 0 else 0) , d = (ref b) }) := (pred (ref 0))))
((let b = (iszero (a . d)) in (case unit of < a = d > => (b := 0) | < d = d > => "apple")) (iszero (case ({ a = c , d = 0 }) of < a = a > => (let b = unit in c) | < e = e > => (case (< c = "boy" > as B) of < c = c > => false | < c = d > => (pred b)))))
(((< e = (fix false) > as Unit) ((if (unit b) then (case 2 of < e = a > => unit | < b = a > => false) else c) . a)) := ((\ e : Nat . (\ e : String . "apple")) (case (pred (if 1 then 2 else c)) of < d = d > => (unit "apple") | < e = c > => (< d = "boy" > as ({ b : String , d : A })))))
({ c = (pred ({ a = (< e = a > as Bot) , b = c })) , c = ((< c = unit > as Bool) := (< a = unit > as A)) })
(((fix (1 as A)) . a) := (\ e : (< b : (Ref A) , b : (Bot -> Top) >) . (< e = a > as B)))
(succ (let d = (fix (iszero b)) in (case false of < a = d > => (1 . b) | < d = d > => 2)))
((! (1 := unit)) (fix (! (iszero false))))
((((succ 1) ({ e = (succ c) , d = (a 0) })) as (Sink ({ a : Nat , a : String }))) as (< d : (Bot -> Float) , a : (Ref C) >))
(ref (let a = (ref "apple") in ("boy" . a)))
(pred ((iszero (unit := true)) (fix (if "apple" then c else false))))
(case (ref (pred false)) of < e = c > => ((case (\ c : Bool . c) of < d = d > => (if c then "apple" else unit) | < d = a > => "apple") := (\ a : (Sink C) . ((if a then "apple" else "apple") := (\ c : Bot . true)))) | < a = e > => ((ref (\ d : Top . 2)) . e))
((\ e : (< c : Bot , b : A >) . (case a of < c = b > => unit | < c = d > => a)) . d)
(! (iszero (if "boy" then true else 0)))
(case (ref ("apple" 1)) of < d = e > => (! (if (fix unit) then (\ b : C . true) else "boy")) | < b = e > => (iszero (fix (< e = ({ c = "apple" , d = a }) > as Bot))))
(! ((1 as C) := (\ b : A . c)))
(! (case ((\ d : String . "apple") as Bot) of < b = e > => ((ref c) c) | < e = b > => (let a = (< e = "apple" > as B) in (pred 0))))
(\ a : (< b : (Sink Float) , a : ({ d : (Sink Unit) , b : (Bool -> Bot) }) >) . (iszero (! unit)))
(iszero (! ({ a = (fix 1) , d = ({ e = "apple" , c = "boy" }) })))
(! ({ d = ("apple" as Bool) , e = (fix ({ d = false , c = a })) }))
(((iszero "apple") (succ (< c = 1 > as Top))) as (< a : (< a : Top , d : Top >) , c : (Sink Unit) >))
(< a = (let d = (case unit of < c = b > => 0 | < b = d > => false) in (< b = (\ a : C . 1) > as (Sink Nat))) > as ({ b : (Sink Bot) , b : (Source C) }))
(iszero ((1 (succ b)) (let a = false in 2)))
(ref (iszero (! a)))
(pred ({ b = (fix (\ a : Bot . b)) , c = (< c = (pred (case "apple" of < c = e > => 0 | < c = e > => unit)) > as ({ d : Float , e : (Sink A) })) }))
((iszero ((succ c) (case true of < e = c > => unit | < a = b > => "apple"))) as (< a : (Sink (Source (Source B))) , a : ({ b : String , d : ({ b : Nat , b : String }) }) >))
(fix (< b = (ref (2 "boy")) > as (Ref Bool)))
(< d = (pred (\ a : (Sink Top) . unit)) > as (Sink (Sink (Sink C))))
(let a = (< b = (case "boy" of < b = d > => ({ a = b , a = "apple" }) | < b = b > => b) > as (Ref String)) in ((! 2) := (\ a : String . b)))
(if (< b = ({ a = (1 as A) , a = a }) > as (< c : (Sink Bot) , e : (Unit -> Bot) >)) then (let b = (case (iszero 1) of < b = b > => 0 | < b = c > => false) in ({ a = false , e = "boy" })) else (succ (({ b = c , b = 2 }) . d)))
((\ e : (Source String) . (2 unit)) as ({ c : (Source A) , c : ({ c : Bool , c : C }) }))
(succ (if (succ (c := 0)) then ((true := (iszero true)) . a) else (pred (succ c))))
((pred ((true := 1) := (pred 0))) as (< a : (Sink ({ a : C , e : Float })) , c : ((< a : (Float -> Bot) , a : Float >) -> ({ d : ({ e : Nat , b : Unit }) , c : (Bool -> Unit) })) >))
((\ d : ({ a : Nat , d : (Unit -> Unit) }) . (if a then 0 else "apple")) := (< e = (\ d : (Ref (Unit -> B)) . (case "boy" of < b = b > => true | < d = b > => b)) > as (Source String)))
(fix (pred (unit := false)))
((succ (2 . c)) as (< e : (< c : Bot , e : Nat >) , e : (B -> A) >))
(case (\ d : (< a : (String -> Nat) , a : (Source Nat) >) . ((succ unit) := (if 0 then 2 else false))) of < d = e > => ((a as Nat) := (succ a)) | < d = c > => (succ (ref (pred "apple"))))
(\ a : ({ a : ({ c : (B -> Top) , d : ({ a : A , c : B }) }) , c : (Unit -> Unit) }) . (\ e : (Nat -> (Source Float)) . (ref (case 2 of < d = e > => unit | < e = d > => 1))))
(succ (let b = (pred (< e = unit > as C)) in (if (case 1 of < d = c > => unit | < c = b > => 0) then 1 else ("boy" as Top))))
((fix (let c = a in (succ b))) := (pred (fix 0)))
((let e = (pred (\ c : Unit . 2)) in (iszero (if b then 2 else 2))) (case (! (let c = unit in 0)) of < e = a > => (case ((2 . e) as (Ref B)) of < a = c > => (pred b) | < b = c > => (fix 1)) | < b = c > => (("apple" . c) := (ref unit))))
(< a = (\ a : (Sink Nat) . (ref "apple")) > as (Source (< e : Nat , e : (< a : B , b : Bool >) >)))
(iszero (let b = (iszero (c . e)) in (< c = (iszero 1) > as (Ref (Ref Float)))))
(\ a : ({ c : (Ref String) , e : ({ c : ({ a : (Ref String) , a : (Bool -> C) }) , d : ({ e : Float , c : Unit }) }) }) . ((case false of < d = b > => (< b = "apple" > as String) | < e = a > => 0) . e))
(\ d : ((Source (Sink Top)) -> (({ b : (Ref Float) , a : (Ref Float) }) -> ({ c : (A -> B) , e : Top }))) . (({ e = (! b) , d = (! (succ 1)) }) := (((let b = unit in true) . c) as ({ c : B , d : String }))))
(< d = (let a = (succ (succ 0)) in ((false := "apple") as (Top -> Bot))) > as (< e : (Sink Top) , c : (Source C) >))
({ b = (< d = ((case a of < d = d > => 1 | < b = a > => true) . a) > as (Source A)) , e = (! (! "apple")) })
(let a = (({ d = (let e = false in unit) , b = (iszero unit) }) . e) in (iszero (\ e : (Source A) . ((0 := a) . c))))
(succ (let b = ({ c = (let c = 1 in b) , a = (b as Nat) }) in (ref (ref c))))
(\ e : ({ d : ({ d : Bot , c : B }) , b : (Sink Bot) }) . ((\ c : Bot . true) . a))
(ref (ref (pred b)))
(case ((! ({ c = unit , b = "boy" })) := (pred (< b = 0 > as Float))) of < c = b > => ((c . d) (\ a : (Sink String) . (c . e))) | < e = e > => (let a = ("apple" (ref unit)) in (\ b : (< a : Bool , a : Float >) . (\ b : A . 2))))
(((let c = (ref "boy") in true) (succ (iszero false))) as ((Ref (Sink (< a : Float , c : Nat >))) -> (< e : (Ref (Source String)) , d : ({ c : (Sink Nat) , d : ({ e : Top , a : Bool }) }) >)))
(case (\ d : (< e : (Source Top) , d : Bool >) . (< e = (true false) > as (Source String))) of < b = b > => (((0 as Float) (fix (ref 1))) (< a = (a := a) > as Nat)) | < b = c > => (ref (unit (fix "boy"))))
(if (< b = (< d = (pred "boy") > as (Sink (Sink String))) > as (Bot -> ({ d : A , b : Nat }))) then ((iszero b) . c) else ((fix "apple") ({ e = (pred "boy") , b = c })))
(! (pred (succ (ref 0))))
(fix (pred (({ b = "boy" , a = "boy" }) as (Float -> (Sink A)))))
(\ c : ({ d : (Sink B) , a : (Sink ({ a : Bot , c : Bot })) }) . ((pred 2) as ((B -> Nat) -> (Sink String))))
(iszero (< a = ("boy" := 2) > as (Source Nat)))
((succ ((fix false) . e)) as ({ b : ({ c : B , b : B }) , c : ({ d : (Unit -> C) , b : (Bot -> B) }) }))
(if (case (if b then 1 else 0) of < e = e > => (< d = (\ b : C . 1) > as (Unit -> Float)) | < b = d > => (b . a)) then (< e = ((ref 2) as B) > as ((Top -> Bot) -> (Nat -> C))) else (\ a : (< a : Bool , d : B >) . (2 := 2)))
({ d = ((b := 1) := ({ b = (b as String) , d = (unit . a) })) , e = (fix (ref (ref 0))) })
(ref ((succ false) := (iszero a)))
(fix ((case (pred a) of < c = c > => 2 | < e = e > => true) as (Ref (Ref Bool))))
(pred (fix (fix c)))
(\ b : (Sink (< a : Nat , a : Nat >)) . ((pred c) as ({ c : ((Source Bot) -> (Source Float)) , a : (Ref A) })))
((! (c . e)) (ref (if "boy" then "apple" else b)))
({ c = (if ((ref 1) (case 2 of < a = b > => (false 2) | < e = a > => 0)) then ((ref 0) := (\ a : Nat . 1)) else (! true)) , d = (\ d : (Ref C) . (fix false)) })
(iszero ((if (\ d : String . 2) then (< b = "apple" > as C) else 2) as (Sink (Sink Bot))))
((if (if (b . b) then true else (< e = 0 > as Top)) then (if (b . a) then (! (case 2 of < e = d > => 0 | < e = e > => unit)) else (< e = 1 > as Float)) else (< e = (ref a) > as B)) := ((\ a : (< d : Bool , d : A >) . c) . c))
((\ e : ({ a : Float , a : A }) . (pred "apple")) . e)
(let d = (succ (succ ("boy" as C))) in (< b = (iszero (pred a)) > as ((Sink Unit) -> Top)))
(ref (\ c : (String -> A) . (pred a)))
((((! false) (case true of < b = b > => c | < c = e > => b)) (succ 1)) (case (succ 0) of < a = d > => (succ (case c of < c = e > => true | < a = d > => "apple")) | < e = e > => ({ a = ({ a = true , a = 1 }) , c = (fix (true := unit)) })))
(pred (let e = (\ a : B . "apple") in (1 as String)))
(succ (({ c = 1 , b = false }) as (< c : C , b : A >)))
(iszero (let d = (if (\ c : Bot . false) then ({ d = 0 , b = true }) else "apple") in ({ a = (iszero c) , d = (fix a) })))
(if ((let b = (fix unit) in (fix 2)) ((if (0 unit) then (pred b) else (succ 0)) ({ a = "boy" , a = c }))) then ((1 as A) := (succ (iszero true))) else (let a = ({ e = false , c = b }) in (b as A)))
(fix (succ ((b := c) := (false 1))))
(if (let a = (if "boy" then a else unit) in (ref ({ c = false , e = c }))) then (((< c = 2 > as Top) := (a b)) ((case b of < d = d > => "boy" | < b = e > => "boy") (true . a))) else ((b as C) . c))
(! (let d = ("apple" (c . a)) in (fix (pred a))))
({ c = (< e = (iszero (true true)) > as (< d : (< c : Top , c : String >) , a : (Sink (Source Bool)) >)) , b = (iszero (pred true)) })
(! (\ d : (Source (Bot -> C)) . (iszero 2)))
((ref (succ (b := false))) (! (< e = (\ d : Nat . unit) > as ({ d : Unit , e : Nat }))))
(< a = (fix ((if b then b else unit) as Top)) > as (Sink (< c : Top , c : (Source Unit) >)))
(< e = ((succ (let b = c in c)) . d) > as (Ref (< a : (Source B) , e : (Sink String) >)))
(if (case ({ c = (! "boy") , e = (< c = c > as Bool) }) of < a = a > => (< a = "apple" > as Bot) | < e = c > => ({ e = "apple" , b = "boy" })) then (let d = ((iszero 1) (\ d : Bot . unit)) in ("apple" b)) else (pred (unit as A)))
(case (! (succ ("boy" as B))) of < c = b > => ((succ (ref c)) ((if true then "apple" else a) as ({ c : Bot , d : String }))) | < a = b > => (if (let a = (case (iszero c) of < b = b > => (if false then true else 2) | < c = d > => "apple") in (< c = (fix 1) > as Bool)) then (if ("apple" as Unit) then (ref a) else (b a)) else (true (if 2 then c else a))))
((ref ("boy" ("boy" := a))) := (ref ((let c = a in 2) (true := a))))
(if (\ b : (< c : B , b : (< e : Unit , d : C >) >) . (fix (if false then (! c) else false))) then ({ a = (let b = 0 in b) , b = (< a = (pred 0) > as (< d : String , e : B >)) }) else (if (iszero (fix true)) then (ref (if 2 then a else true)) else (\ a : (String -> B) . (b b))))
(ref ({ d = (0 ({ a = 0 , d = 0 })) , a = (ref (\ b : A . "apple")) }))
(< c = (\ b : (Ref String) . (ref true)) > as (({ e : (({ c : Bool , a : Nat }) -> (< e : Top , e : Bot >)) , d : ((String -> Bot) -> (< c : Float , d : Unit >)) }) -> (Sink (Source String))))
(let a = (succ (case (! (if 1 then unit else false)) of < d = b > => (fix 2) | < b = a > => (< a = "boy" > as String))) in (succ (ref true)))
(let b = (ref (ref (ref false))) in (\ e : (Source A) . (! (b . c))))
(< b = ((< d = (! 0) > as (< b : Top , a : Top >)) (< a = 1 > as (A -> Unit))) > as (Source (Sink Unit)))
(\ d : (< a : (< c : (Source Nat) , e : Top >) , d : (Sink Nat) >) . ((iszero (fix c)) as (< c : Nat , c : Nat >)))
(pred (< c = (if (succ 2) then (if unit then a else 0) else (! 1)) > as ({ d : ({ c : (Source B) , d : ({ e : Top , c : Unit }) }) , d : ({ e : ({ d : A , b : Nat }) , d : Top }) })))
(! ((case ((if 0 then 2 else a) := a) of < c = a > => (succ b) | < c = d > => (succ c)) as (Source (Sink String))))
(iszero (fix (\ c : ({ b : B , b : A }) . a)))
((< c = (2 false) > as (Ref String)) . b)
((succ (1 (2 := a))) := (fix (("boy" . c) := (fix false))))
(succ ((if (< a = 1 > as Top) then (succ 0) else (false as C)) as (< c : (Sink Bot) , e : (Bot -> Nat) >)))
(succ ({ e = (fix 2) , e = ((! 0) . a) }))
((< a = (iszero (\ e : Bot . 2)) > as ({ d : (< c : Float , e : Top >) , e : (Sink String) })) as ((Source Unit) -> (Source Unit)))
(pred (iszero ((fix 0) := (let b = true in true))))
((((2 as Bot) as (Ref A)) as (Source (Sink Bot))) := (let c = (! (succ (pred "apple"))) in (! c)))
((< b = (< b = (1 as C) > as (Sink Bool)) > as (B -> Unit)) (iszero (succ 2)))
(let b = ({ c = (case "boy" of < b = a > => 1 | < c = d > => (2 . e)) , b = (succ "boy") }) in (\ d : (Sink (Source ({ c : Nat , c : Top }))) . (succ false)))
(if (case (succ ("apple" := a)) of < b = b > => ({ d = "apple" , c = 1 }) | < a = e > => (succ 0)) then (iszero (fix ((b . e) := false))) else ((case (1 := a) of < a = c > => (1 . d) | < b = e > => (ref (iszero c))) as ((Nat -> Float) -> A)))
(< c = ((fix c) (a . d)) > as (Ref (Source (Bot -> Bool))))
((let c = (succ (case (0 unit) of < b = d > => unit | < e = e > => (unit := 1))) in (fix c)) as (Source (Ref Float)))
(ref (< e = ((succ (\ c : Float . false)) . e) > as (< b : (Sink Nat) , c : (Sink Top) >)))
((let c = (if c then false else 2) in ("boy" 1)) . d)
(< b = (succ ("apple" 2)) > as (< b : (Sink Top) , e : (Ref Top) >))
(! (((let c = 0 in b) (fix (iszero a))) := (succ unit)))
((((succ a) as ({ b : A , e : Bool })) . b) as ({ e : ({ e : ({ b : Bot , c : Nat }) , d : (C -> Unit) }) , d : (< d : A , e : B >) }))
((if (succ (c as Nat)) then (case b of < a = d > => 1 | < d = c > => b) else ((false . c) "apple")) as (< d : (Ref C) , d : (< e : Unit , b : C >) >))
(pred ((ref (< b = false > as Bot)) as ({ a : A , e : B })))
(if (fix (1 b)) then (\ a : (Source (Source Float)) . (! ((true := 0) as (Source Bool)))) else (if (fix 1) then (pred true) else ({ a = b , a = "boy" })))
(succ (let b = (pred b) in (case ("boy" as Top) of < e = d > => "apple" | < d = e > => "apple")))
(\ c : (Sink (< e : Float , a : Nat >)) . (((ref 1) as Float) := (false "boy")))
(if (fix (pred "boy")) then ((\ c : (Sink A) . ({ a = "boy" , b = "apple" })) := (succ ("boy" as String))) else (case (< e = a > as (Ref C)) of < c = d > => (false . a) | < c = b > => (pred "boy")))
({ e = ({ b = ((succ "apple") . e) , d = (< a = true > as A) }) , b = (case ((a false) ("apple" . c)) of < b = b > => (\ b : Float . b) | < a = b > => (let e = b in false)) })
(pred ({ a = (ref true) , e = (0 . d) }))
(succ (pred (! (pred "boy"))))
(ref ({ a = (0 (true := true)) , d = (false as (< c : Bot , c : C >)) }))
(iszero ((succ (! "apple")) (! (unit as Bot))))
(pred (< c = (! (pred "boy")) > as (Source (Source Bool))))
(iszero (let b = (case (if 0 then "apple" else a) of < e = c > => ("boy" (0 as Nat)) | < c = e > => ((fix false) as Float)) in (b c)))
(iszero ({ a = ({ b = 1 , d = b }) , c = (! c) }))
(fix (let e = (case "apple" of < c = a > => "boy" | < d = b > => a) in (a as Bot)))
((< a = ({ c = (a false) , b = (< b = "boy" > as Top) }) > as (Ref (Unit -> Unit))) := ({ c = (fix (succ 1)) , c = (! "apple") }))
(< a = (! (iszero true)) > as (Source (Ref (< a : A , b : (Source Bot) >))))
({ d = (case (succ (< b = "boy" > as C)) of < d = b > => (if (false unit) then "boy" else (fix a)) | < a = e > => (case (let c = a in 1) of < e = a > => (ref 1) | < d = e > => 2)) , e = (< b = (iszero (pred 1)) > as (Sink String)) })
(if (succ ({ e = false , b = c })) then (\ a : (< b : ((Bot -> A) -> (< d : Float , b : Float >)) , a : (< d : A , d : Bool >) >) . (pred (succ 2))) else (if (< e = b > as A) then (\ e : (Sink Unit) . c) else ((fix a) (ref "boy"))))
(< b = ((< e = (< e = (if 0 then a else true) > as (Sink Unit)) > as (Ref A)) as (Ref Bool)) > as (Ref (Source (< c : Bool , a : C >))))
(ref ((\ b : B . 0) (ref 0)))
(if (if (! 2) then (if false then true else unit) else ("boy" := 1)) then (pred ((< c = false > as Unit) := ("apple" a))) else ({ d = (< c = (succ true) > as (Ref Bot)) , b = (fix (iszero c)) }))
(case (iszero ({ b = 2 , c = "boy" })) of < a = c > => ((succ "boy") (pred true)) | < c = b > => ((if (false true) then (let d = "apple" in "boy") else (if unit then b else false)) . b))
((case (1 . e) of < c = d > => (b := 2) | < d = a > => (let a = (false true) in 2)) as (Sink ({ e : C , a : C })))
(if (case ((fix 0) := (pred unit)) of < a = c > => (fix (pred 0)) | < d = a > => ((! (\ e : Nat . "boy")) . e)) then (fix (succ 1)) else (({ a = "boy" , a = false }) . d))
(let b = (pred ((< b = b > as String) as Top)) in (let d = (ref 2) in (pred 0)))
(! ((({ c = b , a = "apple" }) . b) ({ d = (true . a) , b = (iszero 2) })))
(succ (ref (0 := true)))
(ref (if (let e = (\ d : A . 1) in (false := b)) then (if (case (pred true) of < c = e > => (\ b : Bot . a) | < d = a > => 0) then (1 . b) else (b true)) else (\ e : B . (! 2))))
(\ c : ((Ref (< b : Unit , a : Bool >)) -> ({ c : ({ e : C , b : Float }) , a : (Ref Bool) })) . ({ b = (ref c) , d = (ref "apple") }))
((if ((\ c : Float . 1) . d) then (succ (succ (true . b))) else (ref false)) := (iszero (fix c)))
(((succ unit) := (2 as (Ref String))) := (if ("boy" := 1) then (fix false) else (case (c . c) of < a = b > => unit | < a = a > => 0)))
(ref ((fix (ref 0)) . e))
((\ a : (Sink (Bot -> String)) . ((fix unit) := a)) (ref ({ a = (! b) , a = ((case unit of < b = d > => "apple" | < d = c > => 0) . a) })))
(ref ((case (ref "apple") of < e = c > => (succ a) | < a = e > => (a as Bot)) . c))
(((("boy" 0) := unit) := ((case "boy" of < d = c > => c | < c = a > => 1) . c)) (case (ref (iszero 0)) of < c = c > => (ref (pred true)) | < a = b > => (1 . e)))
(if (succ (0 := (iszero 1))) then (\ d : ((Float -> Bool) -> ({ d : Top , d : B })) . ({ c = 0 , b = (succ unit) })) else (< b = (case (let a = unit in true) of < d = c > => (fix false) | < b = a > => b) > as (< a : Nat , b : B >)))
(succ (! (ref a)))
(< a = ({ e = ({ a = (case 0 of < c = c > => "apple" | < e = b > => 0) , c = (< e = (pred c) > as Nat) }) , a = (let e = a in (if a then c else true)) }) > as (Ref (Sink String)))
({ d = (((unit := "boy") := (b := "apple")) . c) , c = ((pred (ref 2)) := (let d = b in 1)) })
(if (if (succ (2 := unit)) then ("boy" := a) else (< b = false > as Bool)) then (iszero ({ d = 2 , a = 1 })) else (if ((! "boy") := (case false of < c = e > => true | < d = b > => 0)) then (succ (succ true)) else (pred (true as B))))
(if ((a . c) . a) then (((pred 1) := ("boy" "boy")) (! (let a = "apple" in a))) else (fix (fix 1)))
(if ((("boy" := b) . b) := ((iszero unit) . a)) then ((fix (case 2 of < c = c > => a | < a = b > => unit)) := (ref unit)) else (< b = (let a = 1 in a) > as ({ c : A , e : Nat })))
(! (case (c := 2) of < e = c > => (let a = "boy" in "boy") | < d = d > => (< e = 0 > as String)))
(pred (succ ({ b = unit , d = "apple" })))
((case ("boy" as C) of < c = d > => (< c = (< c = a > as Unit) > as (Ref C)) | < b = b > => (case 1 of < d = d > => "boy" | < d = c > => 1)) . a)
(pred (case (\ c : Bool . 0) of < e = d > => (\ c : (Sink Nat) . (ref c)) | < c = c > => (fix a)))
(< e = ((let a = "boy" in a) . b) > as (Ref ({ d : C , c : Bot })))
(fix (pred (b as Bool)))
(case (pred ((let c = (< e = c > as Nat) in 1) := (fix "boy"))) of < d = a > => (case (< e = "apple" > as Bool) of < e = a > => (case c of < e = e > => (if 1 then 2 else a) | < d = d > => false) | < d = b > => (1 . c)) | < e = e > => (if (fix 2) then (pred a) else (! "apple")))
({ b = (! (2 := (let b = 0 in "apple"))) , e = ((case unit of < d = a > => c | < b = c > => b) (\ c : Nat . unit)) })
((({ e = c , d = unit }) := (let c = a in "apple")) := (succ (succ 2)))
((< b = (case (< a = (iszero a) > as ({ b : Nat , c : C })) of < e = e > => (fix ({ c = false , c = c })) | < e = c > => (< d = (true . b) > as Bot)) > as (Sink (Source Float))) as ({ c : ((< d : String , e : Float >) -> B) , d : (Sink (< a : Bool , d : Top >)) }))
(! (fix (case (fix 1) of < d = d > => (< a = true > as Top) | < e = c > => 1)))
(fix (pred (< b = (unit . c) > as (Sink A))))
(succ ((! 0) . c))
(succ (let b = (iszero 2) in (< e = c > as C)))
({ a = ((unit := 0) as (< c : Top , c : Float >)) , a = (< c = (let d = (fix 1) in (let d = 2 in true)) > as (Ref (Bool -> B))) })
(< c = ({ a = ((ref "apple") (fix (case 0 of < a = a > => b | < d = c > => "apple"))) , d = ((succ 0) as ({ e : Nat , a : Bot })) }) > as ({ b : (Sink (Ref A)) , a : (< b : Float , b : Unit >) }))
(\ b : (Source (Source (Ref Float))) . ((pred (b . e)) (0 . e)))
(let a = ((ref (! unit)) as (Bool -> ({ b : C , e : String }))) in (fix ("apple" := (fix false))))
(< d = (if (ref a) then (0 as Nat) else (case 1 of < c = b > => 1 | < b = a > => (< c = 1 > as String))) > as (Source (A -> (Ref Top))))
(case (({ b = b , e = c }) . e) of < d = b > => (\ b : (Sink B) . (case c of < a = a > => (a as Bot) | < b = e > => (iszero 0))) | < c = e > => (let d = (ref unit) in (pred (succ false))))
(! (\ c : (Sink (Source Bot)) . (case (if a then false else "apple") of < e = e > => c | < c = b > => (true as A))))
(\ e : ((Ref (Sink Top)) -> (Ref C)) . (case (iszero true) of < d = d > => (! (false := c)) | < a = b > => (\ a : String . (\ e : Nat . 2))))
((iszero (succ (! 0))) := (< c = (\ e : Bot . (ref true)) > as ({ d : A , a : Nat })))
(\ b : (Sink (Sink String)) . (if ({ a = (! false) , e = (! b) }) then (< c = (if c then 2 else 1) > as (Ref C)) else (({ d = "boy" , d = 0 }) . e)))
(pred ((ref unit) := (\ e : A . a)))
(case (let d = (pred unit) in ((! true) as Float)) of < a = e > => ({ a = (0 . a) , a = ({ a = a , c = c }) }) | < e = d > => (pred ({ e = (! a) , b = a })))
(if (\ b : (Sink (Sink Bot)) . (case "boy" of < b = b > => 2 | < d = b > => 1)) then (ref (0 . d)) else (< d = (if 0 then false else "apple") > as (Sink C)))
(fix (if (ref 0) then (a := ("boy" := b)) else (if "boy" then "apple" else true)))
(< d = (< d = (if (let b = "boy" in c) then b else "apple") > as (Sink C)) > as (Ref (Source Float)))
(((let a = unit in 2) := ((let a = c in unit) := (succ 0))) . e)
(ref (! (true := (iszero 1))))
(fix (if (({ b = "apple" , b = "boy" }) := unit) then (< c = (< e = 0 > as String) > as Unit) else (iszero "apple")))
(if ((pred (case 2 of < c = a > => c | < e = c > => b)) := (ref unit)) then ((\ d : Unit . (! b)) (succ ({ d = (pred "apple") , d = "apple" }))) else ((b := (\ a : B . unit)) (unit . d)))
(iszero (ref ({ a = (0 unit) , c = (\ a : Nat . c) })))
(iszero (succ (fix false)))
(fix ((fix "apple") . b))
(! (! (ref (pred b))))
(fix (< b = ({ a = "apple" , b = "boy" }) > as (Ref A)))
(((\ e : Unit . false) := (if 1 then 2 else true)) as (< d : (Sink (< d : String , b : Unit >)) , e : (Sink C) >))
(((< d = false > as Float) := (case unit of < d = d > => c | < b = d > => 0)) := ((unit . a) . b))
(({ b = ((< e = true > as (Source Bool)) := ((ref 1) 2)) , a = (pred b) }) . b)
(if (< b = (case "boy" of < d = e > => (if true then 1 else "apple") | < d = a > => 2) > as (Sink Bot)) then (iszero ({ b = ("apple" . d) , d = (iszero unit) })) else ((! ({ d = false , b = b })) (succ true)))
(let d = (iszero ((let b = true in 0) := (iszero 2))) in (fix (if ({ a = 2 , e = 1 }) then true else ("boy" as B))))
(\ b : (Sink ((Source A) -> A)) . ((ref "apple") . c))
(fix ((ref (unit as C)) ((< d = a > as Nat) (let d = "apple" in a))))
((case ({ e = (unit := b) , b = (fix true) }) of < b = d > => (pred (2 := b)) | < c = c > => (false . e)) (! (fix 2)))
(pred (succ (< a = (< a = 0 > as Bot) > as ({ d : String , c : C }))))
(ref ((< c = (< d = "boy" > as B) > as (Source Unit)) . c))
(< a = ((let a = (succ a) in (case 1 of < b = c > => a | < e = e > => 2)) (! 0)) > as ({ e : (Ref A) , e : ({ d : Top , d : String }) }))
(let b = (({ b = ({ b = 1 , b = "boy" }) , c = ({ e = b , d = 1 }) }) as ((B -> Bool) -> ({ d : (Float -> A) , e : (Sink A) }))) in (! (if (let c = a in c) then true else (succ a))))
(\ e : (({ e : String , d : A }) -> (Sink Bool)) . (let a = (if "apple" then c else false) in (if b then false else "apple")))
((if ((! "boy") . d) then ((false as B) := (ref 0)) else (case (\ c : String . (succ b)) of < a = b > => (pred 1) | < e = c > => (\ e : Float . (fix "boy")))) ((< e = (let e = a in "apple") > as (String -> Float)) ((\ e : Unit . unit) as Top)))
({ a = (\ e : ((Ref (Sink Nat)) -> (Sink Unit)) . (succ (< e = ("apple" as C) > as (Source Top)))) , d = (! ({ a = 1 , c = (c . b) })) })
({ d = ((! (0 as String)) := (c (iszero "boy"))) , e = (\ a : (({ c : Nat , b : Top }) -> A) . (pred (succ unit))) })
((case (({ d = "apple" , e = (! 1) }) (succ 0)) of < d = d > => (((< b = "apple" > as B) as (Ref B)) . d) | < e = d > => (pred (case b of < b = e > => a | < a = a > => true))) := (if (case (let a = unit in false) of < a = d > => (fix false) | < a = b > => false) then (ref 1) else (\ d : Nat . (b as B))))
(! (succ (case b of < e = b > => 1 | < d = c > => 0)))
(\ c : (((Source Bot) -> Float) -> (Ref (A -> B))) . (pred (if (ref b) then false else c)))
(iszero (if (pred "boy") then (let b = unit in c) else ("boy" := 2)))
((if (! (fix 2)) then (< a = (2 a) > as Bool) else (ref (case true of < e = c > => 0 | < c = d > => "boy"))) as (Ref ({ b : (Sink (Source Nat)) , e : (Top -> Top) })))
((succ (fix (succ 0))) (((fix c) as (Source Nat)) as (Source (Sink (Source B)))))
(succ ((1 . d) as (Source Float)))
((ref (let e = 1 in true)) as (Source (Sink (Source Top))))
(< d = (succ (pred 1)) > as (Ref (Ref (Sink C))))
(\ b : ((Source (Ref Nat)) -> (Ref Float)) . (if (succ (let d = a in a)) then (pred (1 . c)) else (ref a)))
({ c = (< c = (\ a : Top . (! b)) > as ({ a : (Ref Unit) , c : (Source (Bot -> String)) })) , a = (\ d : (Sink String) . (0 as Float)) })
(iszero (! (iszero (succ "boy"))))
((if (< e = 1 > as (< b : Top , e : Bot >)) then ((unit := a) ({ d = b , a = "apple" })) else (case unit of < b = b > => true | < b = e > => 1)) . b)
(if ((true . a) ((unit := 2) (2 := a))) then (ref (succ (if true then (< a = 1 > as Bool) else (succ a)))) else (< b = (! (ref 2)) > as (Source (< a : Float , a : Float >))))
(! (\ c : (Source A) . (! a)))
(! (((b as Bot) := (\ c : Bool . 0)) (true . c)))
(\ b : (Source (Source String)) . (iszero ({ b = (false as String) , d = (! 1) })))
(((iszero unit) . a) := (! (case (fix b) of < d = c > => false | < d = b > => (ref a))))
(pred (< a = (fix ((pred unit) . a)) > as ({ b : (Ref Nat) , c : ({ c : B , a : Float }) })))
(((case (case (succ "apple") of < c = b > => 2 | < d = d > => 2) of < e = e > => (< c = 0 > as Unit) | < e = a > => (< d = "boy" > as Bot)) ({ d = (let b = (let a = true in c) in (succ unit)) , e = (pred (iszero "apple")) })) as ((A -> Bot) -> (Ref Bool)))
(< a = (fix (if "boy" then "boy" else c)) > as (Source (Sink C)))
(< d = ((ref 2) (\ c : (< c : Float , a : A >) . "apple")) > as (Source ({ a : Bool , d : Bool })))
(succ (pred (iszero "apple")))
((\ c : (Ref Unit) . ((iszero true) := unit)) as ({ a : (A -> (Ref B)) , b : (< a : (Source Float) , a : A >) }))
(pred (! ((ref true) (false := 2))))
(< e = ((2 . e) := (case 2 of < a = c > => false | < d = a > => b)) > as (({ d : (Source Bool) , e : C }) -> (Ref (Top -> Unit))))
((! (iszero 2)) := (ref ((iszero b) . b)))
(succ (< c = (pred b) > as (Ref Bool)))
((pred (< b = (iszero 2) > as (Source String))) as (Sink ({ b : (Unit -> Unit) , c : Float })))
(pred (\ b : (Source Top) . (pred (< a = false > as Bool))))
((iszero (< d = (1 as Unit) > as (< c : B , d : (Sink Bool) >))) as ((B -> C) -> (Ref Float)))
(! (iszero (case b of < e = c > => 1 | < e = c > => a)))
(({ a = (false "apple") , e = ((\ c : String . 0) (pred 2)) }) (\ d : (Sink (Ref Float)) . (! 2)))
(if (case ("boy" as B) of < d = e > => ((0 . d) . e) | < a = d > => ({ c = (ref 1) , e = ("boy" as String) })) then (< d = (succ 1) > as (Ref Nat)) else (iszero (ref (\ e : Bot . 1))))
(fix ((pred 2) := (! 0)))
(if (fix (false . b)) then ((\ a : Bot . 2) := ((< c = "boy" > as A) true)) else (case (pred (case false of < c = d > => a | < d = b > => c)) of < c = a > => ({ d = true , e = a }) | < b = c > => (pred 0)))
(pred (! (< d = (pred unit) > as (< a : (Sink Nat) , a : (C -> Bot) >))))
((ref (pred (iszero "apple"))) as (Sink (< c : ({ a : Bot , b : B }) , c : (Sink Top) >)))
(ref (case (< a = ({ a = unit , c = "boy" }) > as (Source A)) of < a = c > => ((case unit of < d = a > => "apple" | < e = b > => (if unit then "apple" else true)) (case "apple" of < c = b > => "apple" | < e = e > => unit)) | < d = c > => ((\ d : Unit . unit) as (B -> String))))
(! ((((iszero a) (succ "boy")) (fix ({ a = true , a = 2 }))) as (Ref ({ e : ({ b : B , d : B }) , d : ({ b : Unit , e : Bool }) }))))
(\ d : ({ c : (< c : C , c : (Source Bool) >) , d : (Sink Unit) }) . ((ref a) . d))
((ref (if (1 := b) then (succ 0) else (! unit))) as ((Ref (Source Unit)) -> (Ref (Ref Top))))
(({ d = (iszero c) , d = (fix (case (0 . d) of < e = d > => (! c) | < e = b > => (! 0))) }) := (pred (! 1)))
(ref ({ d = (! (let a = (let e = 0 in 1) in (if 0 then 1 else 0))) , d = ((case unit of < c = c > => 2 | < e = a > => unit) (unit . c)) }))
(\ a : (Sink (< c : Top , a : C >)) . (succ (iszero (ref unit))))
(if ((\ a : C . (pred 0)) as (Ref Unit)) then (fix (let c = true in "boy")) else (iszero (< b = a > as Unit)))
((case ("apple" := false) of < c = b > => (\ d : A . 2) | < b = a > => (case b of < d = d > => unit | < c = e > => a)) as ({ e : (String -> B) , b : (Sink ({ e : Float , b : String })) }))
(! ((fix (case 1 of < c = c > => "boy" | < e = d > => "boy")) ("boy" as Unit)))
(fix (let e = (unit . b) in (({ a = true , c = true }) ((< e = 2 > as Unit) as (Float -> Bot)))))
(pred ((case ({ d = false , a = (! 2) }) of < c = c > => (iszero 0) | < b = b > => (0 . c)) := (fix (b . b))))
(\ d : (< b : (Sink (Sink Float)) , d : (Bot -> Top) >) . (succ (fix (succ (pred 2)))))
((fix (1 (< c = "apple" > as Bot))) (let e = ((pred "apple") := c) in (pred 0)))
((let b = (succ 1) in (ref "boy")) ({ d = (\ e : (C -> A) . "apple") , c = (b . a) }))
(((\ c : Bool . 2) (! "apple")) as (Source (Source ({ c : A , b : String }))))
(({ e = (iszero ((case unit of < b = a > => true | < a = c > => a) := false)) , c = ("apple" as (< a : Float , d : C >)) }) := ((succ ("apple" := "boy")) := (fix (fix (true := 1)))))
(pred (! (fix 1)))
(! (pred (if 0 then c else true)))
(fix (succ ((pred "apple") (\ d : Unit . "boy"))))
(< e = ((! false) . a) > as (Ref (Ref (Nat -> A))))
(case (pred (< c = unit > as B)) of < d = e > => (({ e = (2 := b) , a = (fix unit) }) . c) | < c = b > => (let b = (({ c = 1 , e = "boy" }) as C) in (\ d : (Source Float) . ({ e = b , e = (! "apple") }))))
(ref (let c = (< e = a > as C) in (unit . a)))
(case (< c = (ref true) > as (Source (Sink Float))) of < a = b > => (pred (unit c)) | < c = c > => ((if b then "boy" else "apple") := (< c = "boy" > as C)))
(< d = ((0 . a) := ((let b = (\ c : Nat . c) in (pred a)) as (Sink Bool))) > as (Ref (Sink (Ref Float))))
((if ((! a) := (let b = 1 in c)) then (fix 0) else (case true of < e = a > => (ref 0) | < b = b > => 1)) (ref ((true . d) ("boy" . c))))
(let a = ((let d = 0 in 0) . b) in (case (let c = unit in 2) of < e = e > => (< b = (iszero unit) > as B) | < d = d > => ((true as A) . b)))
(if (< b = (fix (iszero false)) > as (Sink Bool)) then (! (0 := "boy")) else ((if c then 1 else false) as (< c : A , a : Nat >)))
(< c = (< e = (case true of < c = e > => b | < b = e > => b) > as (Sink Nat)) > as (Sink (A -> (< c : Top , b : Nat >))))
(\ e : (Ref (Source (Ref String))) . (case (a := b) of < e = a > => ((< b = c > as Nat) := (ref (\ b : Bool . "boy"))) | < d = b > => (let e = b in (ref 0))))
(let c = (if (let c = (if (2 as C) then "apple" else (pred true)) in (fix 2)) then (succ (pred 2)) else (ref (iszero b))) in (iszero (({ a = "boy" , a = false }) := (pred 0))))
(fix (ref (if true then "apple" else 0)))
(case (pred (fix 0)) of < b = c > => (! ((pred 2) as (Sink String))) | < d = c > => (fix ((b as C) as Bool)))
((ref (succ 1)) . a)
(if (((c := c) (pred "apple")) ((let b = (a false) in c) . e)) then (pred (false "boy")) else (succ (! (fix 2))))
((pred (\ c : Nat . "apple")) . b)
(((ref 0) := ({ d = a , c = false })) . a)
(\ b : (< d : (< e : (Sink A) , a : Unit >) , c : (Sink (< b : Bool , e : Float >)) >) . (succ (let c = (! "apple") in ((succ c) . a))))
(((\ b : (B -> Bool) . c) := ("apple" . a)) := (case (case (! unit) of < b = a > => c | < d = d > => (if 2 then true else 1)) of < d = b > => (fix c) | < b = a > => ({ b = "apple" , a = false })))
(case ((case 2 of < e = c > => (case a of < b = b > => b | < e = c > => "boy") | < c = d > => (false as C)) as (Sink (Ref Bot))) of < a = c > => (ref (if 1 then (\ a : Nat . 0) else c)) | < d = e > => (! (case (case unit of < e = d > => c | < d = a > => unit) of < c = a > => ((let b = 0 in 1) . a) | < c = c > => (2 := 2))))
((ref (\ b : Top . 2)) as (Sink (Top -> A)))
(iszero (\ b : (Ref Bot) . (if 1 then b else a)))
((let e = (! "apple") in (if unit then (\ e : Top . 2) else 2)) . a)
(ref ((\ d : (Source B) . "boy") . c))
(case ((! (fix unit)) as ({ d : ({ a : String , b : B }) , c : ({ d : B , c : Nat }) })) of < b = e > => (if (if (succ (c as C)) then (0 . e) else (\ e : Bot . true)) then (let b = (\ b : C . b) in true) else ((if c then b else b) true)) | < c = e > => (ref (let c = 1 in unit)))
(fix (let e = (pred "apple") in (2 := 2)))
(ref (\ e : (String -> Top) . (\ e : Unit . c)))
(ref (((ref 0) (succ "boy")) as (Sink (Source Unit))))
(case ({ a = (2 := (let a = 0 in 1)) , c = (iszero 1) }) of < e = a > => (iszero (\ b : Unit . 2)) | < c = c > => (succ ((! c) . b)))
(let a = (fix (succ b)) in (< a = (fix (< e = unit > as Nat)) > as ({ a : Bool , d : (Source Nat) })))
(pred ((iszero (iszero false)) . b))
(((< e = 1 > as Top) as (< c : C , a : Bot >)) as (Sink ({ d : (Source Float) , b : Bool })))
(pred ((case (let d = "boy" in "boy") of < e = d > => ({ e = unit , e = 1 }) | < a = a > => 2) . d))
(({ a = (case ({ b = "apple" , c = "boy" }) of < c = c > => 0 | < e = d > => (let b = b in true)) , b = ({ b = true , c = a }) }) . d)
(! ((case a of < b = a > => (false := 0) | < e = c > => 2) as (Sink A)))
(ref (! (case ({ d = b , d = 2 }) of < d = b > => (0 b) | < d = a > => ((! 2) . c))))
(pred (< d = ((succ 2) := (fix unit)) > as (Ref (< a : Unit , c : Float >))))
(case (let a = (c unit) in (iszero 1)) of < e = d > => (succ (\ d : (Sink Float) . ({ e = "boy" , d = false }))) | < c = c > => (ref (< c = (! a) > as B)))
({ c = (case ("boy" false) of < d = e > => (succ (iszero 2)) | < b = d > => (c as C)) , d = (iszero (c := "apple")) })
(case (! (succ (0 := true))) of < e = b > => (iszero (if (2 a) then (pred (b . b)) else (< b = (let c = "apple" in 1) > as ({ c : B , e : C })))) | < a = a > => ({ a = (\ c : ({ d : Bot , b : B }) . (iszero 1)) , e = (pred b) }))
((case (! (pred "apple")) of < b = a > => (succ true) | < e = e > => (if (ref 1) then (ref c) else (< e = "apple" > as Nat))) as (({ b : ({ b : B , c : Float }) , e : Bot }) -> ((B -> Float) -> (Source Nat))))
(succ (if (pred (ref b)) then (case (ref true) of < d = a > => (1 . a) | < e = b > => (fix a)) else (< b = false > as (C -> C))))
(case (iszero (case (case true of < e = c > => b | < a = e > => b) of < e = c > => 2 | < b = b > => (fix b))) of < d = b > => (pred (case b of < b = c > => ("boy" false) | < b = e > => (pred "apple"))) | < c = d > => (pred (let b = a in ("apple" a))))
(ref ((case (< b = 2 > as Bot) of < b = d > => ({ a = false , d = 0 }) | < c = a > => (let b = (succ true) in (\ e : C . "boy"))) := (succ (true true))))
({ e = (succ (pred (< b = c > as C))) , e = ({ c = (succ false) , a = (! c) }) })
(if (< e = (< d = (ref ({ d = b , d = "boy" })) > as ({ d : ({ e : A , a : Bool }) , b : (Bool -> Nat) })) > as (Source (< d : Float , b : A >))) then (< b = (case 1 of < d = b > => (if a then c else 2) | < e = d > => 2) > as (< a : (Ref Nat) , a : (Ref Float) >)) else (if (a as (Bot -> Float)) then ((pred b) as ((Source Bot) -> B)) else (pred ({ a = false , a = "boy" }))))
(let b = (((< c = false > as String) (iszero false)) as (Ref Nat)) in (let e = (let b = true in false) in (if false then 0 else ({ e = b , d = true }))))
(({ c = ({ b = 2 , a = false }) , b = (c 1) }) (let d = ((fix false) . c) in (case (fix 2) of < e = d > => ({ d = 1 , a = "apple" }) | < d = d > => (ref b))))
(succ (({ a = a , e = a }) as (Ref A)))
(case (if (\ a : ({ c : String , b : Unit }) . (case (< b = 1 > as Bot) of < c = a > => (ref true) | < d = e > => unit)) then (< c = (< a = (if "apple" then unit else 2) > as (Ref Bool)) > as (Top -> C)) else (({ a = a , b = 2 }) as (Source Nat))) of < e = b > => (ref (succ b)) | < e = e > => ((b as Bot) := (< b = (ref 0) > as (Ref A))))
(if (iszero (("apple" . c) := a)) then (let e = ((if 1 then a else 2) (ref false)) in (if (succ b) then (pred 0) else (if unit then false else unit))) else (pred ({ c = c , b = ({ c = 2 , c = a }) })))
(! ((\ c : Float . "boy") (< b = 0 > as B)))
((case (iszero false) of < b = e > => ((false := (a b)) as (Source A)) | < c = c > => ((\ c : (Sink A) . a) ({ e = 0 , c = 0 }))) as (Source ((Sink Float) -> ({ d : (Sink Unit) , b : C }))))
(ref (case (false := a) of < d = b > => (let a = a in 2) | < a = a > => (! c)))
(ref (((case a of < b = d > => "boy" | < d = e > => c) (2 c)) as ({ b : (Ref Nat) , a : (Source Unit) })))
(ref (pred (\ e : A . true)))
(ref ((< d = 1 > as Float) := (if b then unit else a)))
((! (! (0 . d))) as ((Sink ({ b : Top , e : Bool })) -> (Sink ({ a : Top , b : String }))))
(fix (let c = (a as A) in ("boy" ({ d = false , c = a }))))
(((false as Top) (ref (succ 2))) := (! (case 2 of < e = a > => true | < d = d > => true)))
(iszero ({ c = (iszero false) , d = (pred "apple") }))
(case (! (fix ({ e = 1 , a = a }))) of < e = a > => ((iszero unit) . a) | < d = d > => (pred (true . e)))
({ b = (< d = (succ (unit as String)) > as ((Sink Bool) -> (Source Nat))) , e = ((\ c : Bot . (let b = true in b)) as (Ref Unit)) })
({ a = (let a = (< b = "boy" > as A) in (\ a : (Sink String) . (pred "apple"))) , c = (succ ((if b then false else false) 2)) })
(iszero (((a . c) as (Ref Float)) as (Source (Ref Unit))))
(succ (succ (< e = (! 1) > as (Sink A))))
(if (\ b : (< d : (Ref B) , d : (Bool -> String) >) . (succ false)) then (\ a : (< e : (Sink Float) , d : C >) . ((b . b) . b)) else (< c = ((succ (pred 1)) . b) > as (Ref (Source C))))
(pred (case (pred c) of < c = e > => (iszero "apple") | < a = e > => (iszero c)))
((let e = (pred (let b = c in 1)) in (if c then (if 0 then 2 else c) else a)) . e)
(fix (< e = (fix 1) > as (Source Float)))
(case ({ e = ((2 . b) as (Unit -> Nat)) , d = ((let a = 0 in 2) . e) }) of < b = d > => (< a = (! (true := a)) > as (Source ({ b : String , b : Top }))) | < b = d > => (! (ref "boy")))
(\ a : (< b : (Source (Ref (Sink String))) , a : (Source Float) >) . (let a = (iszero (a := 1)) in (< b = 2 > as (< a : C , c : String >))))
(fix ({ a = ({ d = (pred 0) , a = (2 . d) }) , d = (succ 0) }))
(< a = (iszero (iszero 0)) > as ({ c : (< d : String , b : Top >) , d : (Ref B) }))
(pred (succ (pred (! "apple"))))
(if (ref (ref true)) then (iszero (fix "boy")) else (iszero (< d = a > as Nat)))
(! (succ (let a = c in "boy")))
(let e = ({ a = (fix (false as Top)) , a = (true as String) }) in (let e = (let b = (unit as A) in 0) in ({ b = (pred 0) , b = ("boy" as A) })))
(ref (< e = (("boy" . a) ((1 . c) b)) > as (Ref (Ref Unit))))
(succ (< a = ({ b = (\ b : C . "apple") , a = ("boy" b) }) > as ((Ref Nat) -> ({ d : (< e : Float , a : String >) , d : String }))))
(succ (iszero ((fix (fix "boy")) := (succ ("apple" as Float)))))
((< a = (case ((unit 0) := (true := a)) of < a = e > => (succ a) | < c = c > => ({ b = (pred 1) , e = true })) > as (Sink Unit)) as (Ref (< b : Top , d : Bool >)))
(((((< b = 0 > as String) "boy") as (< c : C , e : String >)) . c) . a)
(iszero (case (< e = (fix 2) > as (< d : Nat , a : B >)) of < d = b > => ((ref "boy") . c) | < c = c > => (succ 2)))
((iszero (pred (ref b))) . e)
(case (ref (iszero false)) of < b = e > => (succ (pred 1)) | < e = e > => (if ({ a = (ref a) , d = (\ e : Bool . "boy") }) then ({ d = true , d = "apple" }) else ((unit (iszero "boy")) as (Sink Bool))))
(succ (! (ref (1 := "apple"))))
(if (succ (< e = 2 > as Float)) then (if ((succ 1) := (0 as Bool)) then (! false) else (\ b : Bot . "apple")) else ((pred ("boy" as Top)) (ref b)))
(if (! (ref a)) then ({ b = ((let a = false in a) . b) , c = ("apple" as (Ref String)) }) else ((succ 2) (if (! 0) then (ref true) else (succ b))))
(ref ((case "apple" of < b = c > => 1 | < e = c > => b) := (pred (succ b))))
((iszero (ref (let d = b in ({ b = "apple" , e = 2 })))) . e)
(pred (iszero (< a = (unit := c) > as Nat)))
((< d = (fix false) > as (Ref B)) := ((let b = ({ a = true , a = (succ "boy") }) in (< d = (pred b) > as Nat)) . e))
(ref (pred (case (b . a) of < a = e > => (b as B) | < d = b > => 1)))
(let b = (let b = (\ c : Bool . "boy") in (c "apple")) in ((case unit of < c = d > => ({ c = c , b = 1 }) | < a = c > => "boy") := (fix ({ a = 2 , e = 0 }))))
(let d = (if (\ c : (< b : Bot , e : String >) . true) then ((let e = true in 1) . a) else (1 true)) in ((pred 0) . e))
(let d = ((case "apple" of < c = b > => 1 | < a = a > => "apple") (true (succ 2))) in ((true . e) . c))
(((let c = (! b) in true) (\ d : (Sink String) . 1)) := (iszero (false true)))
(succ ((succ 0) := (fix (< a = (false := 1) > as ({ d : Float , d : Nat })))))
((< e = (false as Top) > as (Source (Ref C))) as ((Source String) -> (< e : Nat , d : Bool >)))
(((ref c) as (Ref String)) := (! (\ e : C . "boy")))
(succ (pred (< b = c > as Top)))
(let b = ((fix "apple") . e) in ((fix (if c then a else c)) := (succ (if ({ b = 1 , b = true }) then (pred 1) else ("boy" "boy")))))
((let d = (fix (if "apple" then "boy" else 1)) in (pred c)) as (Sink (Source (Source B))))
(case (iszero (fix (if "apple" then c else 2))) of < c = c > => (! (pred (true := "apple"))) | < b = c > => ((fix unit) := (\ e : B . (let d = b in 2))))
((let e = (false . e) in (< b = true > as C)) . b)
({ c = ({ c = (case a of < c = d > => true | < a = a > => "apple") , c = (case "apple" of < e = e > => (2 . a) | < b = d > => 2) }) , c = ((if c then "apple" else (let e = b in 2)) as (Source String)) })
({ a = (iszero (pred "apple")) , a = (case (fix (a := 1)) of < c = c > => ((\ d : Unit . 1) . b) | < d = c > => ((\ e : A . c) . e)) })
((ref (let d = (false as Bot) in (succ c))) . b)
(iszero (let b = (fix 1) in (if (succ "apple") then 1 else (iszero b))))
(if (\ c : (Ref B) . (ref true)) then (succ (! 1)) else (if ((! a) false) then (succ (unit c)) else (fix (fix true))))
(let e = (! (let b = (let c = 1 in 2) in b)) in (! (succ (succ (1 b)))))
(< e = (fix ({ d = (2 2) , b = (let e = c in 2) })) > as (Ref (Source A)))
(< a = (ref (("boy" as B) := true)) > as (Source ({ e : (Source ({ c : Bool , a : Bool })) , a : (< e : Top , a : C >) })))
(({ c = (succ (fix b)) , c = (succ (let d = true in a)) }) (case (succ c) of < e = e > => (\ c : ({ e : A , c : B }) . 0) | < a = e > => (succ unit)))
(succ ({ b = ((succ true) a) , e = (pred "boy") }))
(succ (iszero ({ c = c , b = true })))
(let d = ((c . e) as ({ c : B , d : C })) in (fix (({ a = unit , e = "boy" }) . b)))
(iszero ((\ e : (< a : B , c : Float >) . (pred 1)) (if (0 as Bool) then (fix "boy") else (! (case "boy" of < c = e > => 0 | < e = e > => 0)))))
(let b = (! (fix true)) in (pred (fix 0)))
(iszero (let e = (\ d : (Bot -> Bool) . (iszero "boy")) in (succ 1)))
(< c = (\ b : ({ e : A , a : String }) . ({ d = (ref false) , a = (succ unit) })) > as (< d : (< b : ({ c : Unit , d : Float }) , e : (Ref C) >) , d : (Ref (Sink C)) >))
((< d = (\ e : Unit . "apple") > as (Ref Bool)) := (! (ref (pred "boy"))))
(if (if (0 c) then (false as Bot) else ((\ d : Nat . true) (if b then a else unit))) then (let c = (pred (if (succ false) then 0 else (case true of < d = c > => a | < a = b > => false))) in (! ({ c = "boy" , a = c }))) else ({ a = (if unit then c else a) , a = (iszero 1) }))
((iszero (iszero 2)) . a)
(! ({ a = (pred (ref 0)) , a = (fix true) }))
(fix (({ e = (< e = "apple" > as B) , c = (< a = a > as B) }) (true as (String -> B))))
(succ ((ref (! 0)) . a))
(if ((false c) := (! a)) then ({ b = (b as Top) , d = (iszero b) }) else (let a = (case (if "apple" then false else false) of < b = c > => "apple" | < c = a > => unit) in (fix ({ c = (let b = true in "apple") , c = (let c = unit in 0) }))))
(\ c : (Sink ({ e : B , c : B })) . (\ e : (Source Top) . (< e = a > as String)))
(({ d = (case c of < b = e > => c | < a = e > => c) , e = (let a = a in "boy") }) (pred (case b of < c = e > => (iszero "apple") | < b = a > => "boy")))
((iszero (succ a)) := ({ c = (a := ({ e = c , c = unit })) , c = (pred (if true then (a b) else false)) }))
((fix (fix 0)) (pred (! (pred "apple"))))
((let d = (iszero 1) in (succ (iszero unit))) as (Source ({ c : (< a : Bot , c : A >) , b : (Sink A) })))
(let c = (pred (let d = (let d = b in c) in (succ false))) in ((c 2) as ({ b : String , a : Unit })))
(((case unit of < d = d > => 0 | < b = d > => 1) as (Source String)) as ({ a : ({ e : (Source C) , b : (Sink Unit) }) , a : (Source (Sink Unit)) }))
((case (((if "boy" then 2 else true) . b) := (let b = unit in (! c))) of < d = b > => (case (\ a : Top . "boy") of < e = e > => ({ a = false , b = b }) | < b = d > => (if (b := 1) then (fix "boy") else (fix 1))) | < d = a > => (! 0)) as (((Ref C) -> (Sink Float)) -> (< b : ({ d : Bot , e : A }) , a : ({ e : ({ b : C , e : B }) , b : (< d : Bot , b : String >) }) >)))
(fix (iszero (fix a)))
(! (< d = (! (let e = a in (succ "apple"))) > as ({ b : (< a : Float , e : Top >) , c : (Sink Bot) })))
(! (\ b : (Ref (< c : B , a : C >)) . (("boy" ("apple" false)) . d)))
(ref ((fix 2) . b))
(< c = (< a = ((false . e) := c) > as (Bot -> Top)) > as (Source (Ref (< d : Bot , b : C >))))
(((let e = ("boy" := true) in 0) (succ b)) as (Source (Source (Sink B))))
((< d = (iszero (< e = b > as Bot)) > as (< a : B , d : String >)) (< e = (pred true) > as (< c : ({ c : Float , a : Unit }) , e : (Ref C) >)))
((! (a := ({ b = "boy" , d = c }))) := (((ref "boy") := (iszero true)) . d))
(let b = ((< c = 2 > as Nat) := (pred b)) in ((succ true) as (Sink Top)))
(succ (< e = (b as (Ref A)) > as ({ b : Float , c : Float })))
(! (if (succ 0) then (fix true) else (iszero 1)))
(\ c : (Source ((< c : Bool , c : Top >) -> (Sink Top))) . (\ a : (Sink (< e : Unit , e : C >)) . (false . a)))
(fix ({ b = (iszero (case 1 of < b = a > => unit | < a = b > => "boy")) , b = ({ d = (! b) , d = "apple" }) }))
(iszero (iszero (if (\ a : C . c) then (pred (succ 0)) else (\ e : Bot . c))))
(iszero (pred ({ d = b , e = (iszero b) })))
(! (succ (c . b)))
(let e = (let d = ((\ c : Bool . (< d = "apple" > as String)) . a) in ("boy" (< a = 0 > as Nat))) in (let e = ((a := c) . b) in (let a = true in "apple")))
(ref (< b = ({ e = (! c) , b = (ref c) }) > as (< c : C , d : (Top -> B) >)))
(iszero ({ d = (iszero ((< c = 2 > as Nat) as C)) , d = (pred (! (iszero unit))) }))
((\ c : ((< e : B , a : Bool >) -> (Sink Unit)) . (\ a : Top . c)) as (({ c : A , a : Unit }) -> (Source (Source (Source Unit)))))
((pred (let a = 2 in (case a of < e = d > => 1 | < a = a > => b))) . c)
({ a = (iszero (iszero unit)) , d = (succ ((< d = true > as C) ("boy" (1 "apple")))) })
(fix (! (! (! false))))
({ e = ((\ e : Nat . 0) . e) , d = (case (let e = false in c) of < b = c > => (let e = true in "boy") | < e = b > => (fix a)) })
(! ((fix (ref "apple")) as (Source (Ref String))))
((\ b : ({ d : (Sink Float) , b : Top }) . (< c = unit > as Top)) . a)
(\ c : ((String -> Float) -> (Float -> Nat)) . ((pred (succ (! b))) ((\ e : Float . "apple") := (ref true))))
(if (< e = ({ b = "boy" , d = 1 }) > as (B -> Bool)) then (fix (fix false)) else (< d = ((0 as Float) := 2) > as (Source Bool)))
(if (if ({ e = (succ b) , b = (fix "apple") }) then ((! c) . b) else (ref (fix a))) then (fix (ref (1 . e))) else (! (! 0)))
(({ e = (0 . b) , e = (iszero ({ e = 2 , e = b })) }) (succ ({ d = (c b) , e = (pred "apple") })))
((fix (1 := c)) := (succ (ref unit)))
(< d = ((fix (if 1 then (iszero 1) else (pred true))) . b) > as ({ e : ((Sink ({ a : Bot , a : Float })) -> (Sink Float)) , d : (Ref (Source Bot)) }))
({ a = (succ (c as Top)) , c = ((if (< e = 2 > as (Nat -> B)) then (! false) else (c true)) := (case ("boy" := unit) of < c = e > => (a . c) | < c = e > => (succ b))) })
(< b = (succ ((ref unit) := "boy")) > as (Ref ({ e : Bot , a : (Ref C) })))
(let e = ({ b = (case c of < b = c > => c | < c = a > => 2) , a = (if b then a else (< d = unit > as A)) }) in (pred (let b = (< e = a > as C) in (succ true))))
(! ((\ a : C . 0) := (succ (false . c))))
(succ (iszero ((2 as Top) . b)))
(case (succ (\ a : (Sink Bot) . (ref ("apple" := 2)))) of < d = e > => ((case unit of < b = d > => 2 | < e = d > => "apple") . c) | < a = c > => (< c = (fix (case b of < e = a > => unit | < d = a > => false)) > as ({ b : A , d : Bot })))
(case ((succ (succ 2)) := (succ b)) of < a = b > => (case (a c) of < a = a > => (let e = (case "apple" of < c = e > => false | < e = d > => 1) in (< c = "boy" > as C)) | < c = c > => (1 as (Source Nat))) | < d = b > => (pred (succ a)))
(((ref b) . c) as ({ a : (Sink Nat) , a : (Ref B) }))
(case (! (unit "apple")) of < c = d > => (ref (succ (fix "apple"))) | < c = d > => (< e = (({ e = 1 , d = unit }) := (false . e)) > as (Ref B)))
((fix ({ a = (if true then c else true) , e = 1 })) (iszero (let a = 1 in (succ b))))
(< c = ((1 . a) . e) > as ((Source (Ref Unit)) -> (Ref (Source A))))
(if (iszero ((\ b : Top . 2) as (< e : A , c : Bot >))) then (fix (ref b)) else ((< e = (pred b) > as C) (fix 1)))
(({ a = (if 1 then (iszero a) else false) , d = ((! c) (\ e : Unit . "apple")) }) as (< a : (Sink C) , e : ((< d : Top , a : B >) -> (Ref A)) >))
(if (\ d : (Sink ({ a : (< b : Bool , d : Bool >) , d : C })) . (fix false)) then (case (succ c) of < c = b > => (if 1 then unit else 1) | < e = a > => (ref true)) else (! (< a = 2 > as A)))
(ref (< d = ((\ e : Float . a) . c) > as (Ref (Source Bool))))
((succ (("apple" false) . a)) (! (c := (iszero c))))
(iszero (< d = ((! false) := (succ 0)) > as (Source (Float -> C))))
(if (! (let d = (< a = unit > as Bot) in 2)) then (pred (if false then false else ("boy" . d))) else (< e = (ref "boy") > as (Sink String)))
((! ((fix "boy") := (iszero 0))) as (Sink ((Source Bool) -> (Source Bot))))
(< e = (fix (fix ("apple" . b))) > as (< d : ({ c : Unit , b : Unit }) , b : (Sink Top) >))
((! (1 . d)) as (Sink (Ref (< c : Top , a : B >))))
(pred ((! 1) := (b := true)))
(succ (({ b = (unit . e) , e = (if unit then unit else 1) }) as (Ref (Ref (Ref Bot)))))
(\ c : (< e : (< b : ({ b : Unit , d : Unit }) , a : Top >) , c : (Source Float) >) . (let a = (case (if "boy" then a else true) of < b = b > => (("apple" . a) as Bool) | < d = c > => ("apple" . e)) in (succ (case "boy" of < a = a > => false | < a = d > => a))))
(succ (case (! ({ a = 0 , b = "apple" })) of < e = a > => (let d = 1 in "boy") | < d = b > => (if ({ d = c , a = "apple" }) then b else (iszero c))))
(if (succ (succ (iszero (case a of < d = e > => false | < e = b > => 1)))) then (let c = (iszero (succ "apple")) in (let d = a in "boy")) else (((fix c) := (iszero c)) as (< e : B , e : Bot >)))
((\ d : (< a : Top , a : Top >) . ({ d = (if false then "boy" else 2) , e = (if false then "boy" else unit) })) := (succ (fix (2 := c))))
(if (fix (1 as String)) then (fix (case (2 := ({ e = "boy" , e = 1 })) of < d = d > => (unit as Bool) | < a = b > => (let e = a in b))) else ((if c then "boy" else 2) (fix true)))
({ d = (case (if "boy" then b else true) of < d = d > => (false . b) | < a = b > => (succ 0)) , b = (if (! 2) then (ref true) else (iszero "apple")) })
(case (if (! b) then (let b = c in (< d = b > as Bool)) else (ref true)) of < d = b > => (! ((! c) := ({ b = 2 , c = "boy" }))) | < e = d > => (fix (if (c . c) then (! false) else ((pred c) := unit))))
(\ d : (Sink (Source Top)) . (iszero ("boy" . d)))
(case (iszero (let d = (< d = unit > as ({ c : Unit , a : String })) in (ref false))) of < c = e > => (let a = (\ b : Bool . true) in (! "apple")) | < d = b > => (fix ((true as (< c : Bot , c : Bot >)) as (Ref ({ e : C , e : Unit })))))
(succ (\ a : (Ref (< e : Nat , c : B >)) . (let d = "boy" in "boy")))
((iszero (! (b . a))) as ((Ref (Ref Float)) -> (Sink Top)))
(if (let c = (fix (succ 1)) in (ref (! true))) then (let a = (succ b) in (iszero "apple")) else (iszero (pred 2)))
(\ b : (< c : (Source Bool) , b : (< a : A , c : A >) >) . (! (if unit then (1 c) else (iszero 1))))
(\ e : (Sink (Ref (Sink String))) . ((({ c = a , a = 0 }) (false . b)) . c))
(iszero ((iszero (let d = ({ c = 2 , a = "boy" }) in 0)) ((fix true) := (succ a))))
(fix (pred (ref a)))
((fix ((iszero c) := unit)) . b)
(fix (\ c : (Source (< a : String , d : Unit >)) . (fix (case 2 of < b = a > => 1 | < d = e > => 2))))
((iszero (! (\ a : String . true))) . e)
(((1 . e) (case "apple" of < d = c > => 0 | < c = d > => (c . a))) . c)
(\ c : (< c : (< a : (Source Float) , d : (Sink Top) >) , e : (Ref (B -> String)) >) . (succ ("apple" . c)))
(fix (let b = (true := ({ c = false , a = 2 })) in (! "boy")))
(\ d : (Ref (Source Nat)) . ({ d = (let c = "apple" in ({ a = a , d = c })) , d = (\ a : Top . "apple") }))
(succ (ref (\ a : C . a)))
(iszero (let e = (\ c : Nat . (< d = unit > as Bot)) in (pred ((if "apple" then c else 2) := c))))
(< b = (iszero (2 as String)) > as (Ref ((Sink (Source C)) -> (Source String))))
((ref ({ c = (case b of < d = d > => a | < b = c > => true) , b = (2 "apple") })) := ((let c = (pred 1) in (true as (Source B))) (b as String)))
(let a = (succ (let d = true in "apple")) in (fix (succ a)))
(if (case ({ c = (ref c) , b = (if (ref "apple") then (true as Nat) else b) }) of < c = c > => (< e = (let b = 2 in 1) > as (Ref (Source Bool))) | < b = c > => (fix (fix ({ b = a , b = unit })))) then (< e = (false as String) > as (Unit -> Float)) else (< d = (c := c) > as (< e : Unit , a : Float >)))
(pred (if (pred false) then (iszero true) else (ref ("apple" . d))))
(iszero (fix (2 as C)))
(((ref true) . e) . b)
(case ((! (case false of < d = d > => 2 | < c = e > => true)) . d) of < c = e > => (pred (({ b = 1 , a = 2 }) as (Unit -> Bot))) | < e = c > => (< a = (< c = 1 > as Bool) > as (Sink String)))
(pred (case (if (ref 0) then c else (! false)) of < d = b > => (succ unit) | < c = a > => (! "apple")))
(pred ((ref 2) as (Bot -> Top)))
(iszero ((< d = false > as B) as ({ e : String , b : C })))
({ c = (\ d : (Sink ({ a : Unit , e : A })) . (fix (true false))) , a = (\ a : (Source Bot) . (! "boy")) })
(if ((ref c) (if ({ b = "boy" , d = b }) then (< e = unit > as Float) else unit)) then (pred (! 0)) else (succ (if unit then a else (if 2 then 0 else "apple"))))
(let d = (! (! unit)) in ({ e = ({ e = ("apple" (< c = 2 > as Unit)) , e = (pred b) }) , e = (< b = 2 > as Nat) }))
(\ c : (Ref (Sink (Ref B))) . (iszero (ref 2)))
({ c = ((let c = (case 2 of < d = c > => a | < d = c > => unit) in (succ b)) as (Ref ({ b : A , e : B }))) , d = (if (pred (let a = 1 in 1)) then ("boy" as Nat) else (succ (< b = "apple" > as Unit))) })
(case ((2 as A) := (case true of < b = d > => (1 as Float) | < c = b > => (if a then unit else true))) of < b = e > => ((false true) (succ true)) | < d = e > => (fix (< b = "boy" > as (< d : C , a : Bot >))))
(succ (\ d : (Source C) . ("apple" as Nat)))
(\ c : (Ref (Ref ({ c : Unit , a : Bot }))) . (! (< e = (fix c) > as (Ref String))))
(! (case (< e = b > as (Float -> Nat)) of < c = a > => ((b b) . d) | < a = c > => (case ("apple" as Nat) of < b = b > => b | < c = c > => unit)))
(pred (succ (true := (fix 2))))
(succ (pred ((pred (if a then b else c)) as (Sink Bool))))
(if (let e = ((true . a) . c) in (case ("apple" true) of < e = d > => 0 | < a = d > => c)) then (let b = (fix (fix 2)) in (fix (! false))) else (if (fix (let b = true in false)) then (\ b : ((Sink A) -> Bot) . (fix "apple")) else (\ a : ({ d : B , a : Unit }) . (0 := (succ unit)))))
(((0 . a) as ({ c : ({ b : ({ d : Bool , a : Bool }) , a : (String -> A) }) , a : ({ c : Nat , b : Bool }) })) as (< d : (Sink (Source Nat)) , b : (Source (Source Bool)) >))
(iszero (< d = ((\ a : (B -> B) . (c as A)) as (Ref Bot)) > as ({ b : ({ c : String , a : C }) , e : Bool })))
(ref ({ b = (pred 2) , e = (if (2 as B) then "apple" else (ref true)) }))
(fix (! ({ c = a , e = 1 })))
(fix (\ a : (Source Float) . (pred 0)))
(succ (\ a : (Sink C) . ({ b = unit , a = ({ d = c , b = false }) })))
({ c = (pred (iszero c)) , e = (ref ({ a = (\ e : Bool . 2) , d = (true as C) })) })
(((case ({ d = c , d = 0 }) of < c = e > => (pred b) | < c = a > => (let b = "apple" in false)) (false as Top)) (case ({ b = c , e = 2 }) of < e = d > => (false := (iszero true)) | < c = a > => (fix (true "apple"))))
(pred (< a = (unit 2) > as ({ b : String , e : Top })))
(case (succ (0 := true)) of < b = c > => (if (false as (Source Float)) then (iszero (case b of < c = e > => a | < c = a > => false)) else (if (case 1 of < b = a > => 1 | < d = a > => unit) then (2 := b) else (succ false))) | < e = b > => (< b = (ref c) > as (< a : Bot , a : A >)))
(succ ({ b = (let e = (let c = "boy" in c) in ({ e = false , b = 0 })) , c = (! a) }))
(let e = (case ((ref "boy") (1 as Bool)) of < d = c > => (pred a) | < c = d > => (< c = true > as B)) in ((! (c := a)) (case (ref unit) of < c = e > => (fix 1) | < b = a > => (pred b))))
(iszero (\ d : (Source (Sink Bot)) . (! (iszero c))))
(let a = ((\ d : Float . "boy") := (true := a)) in (if ({ a = ({ a = b , d = 1 }) , b = a }) then (pred true) else (ref (case a of < d = a > => "apple" | < a = b > => c))))
(case ({ b = ("boy" false) , b = (let c = false in false) }) of < a = d > => (succ ({ b = (if (fix c) then (unit 2) else (succ b)) , b = (let c = "apple" in 2) })) | < d = b > => ({ c = (\ e : (< e : Unit , b : Top >) . (! (if c then true else c))) , b = (ref ("apple" . d)) }))
(! (((< a = "apple" > as Float) . b) := (case (iszero b) of < d = c > => (pred 2) | < d = c > => (fix b))))
((\ a : (Source C) . (fix (if b then unit else true))) . b)
(< c = ({ b = (false as Nat) , e = (\ a : B . 1) }) > as ({ e : ({ b : (< d : Bot , e : B >) , b : A }) , e : ((Sink Float) -> (Float -> Unit)) }))
(case ({ e = (\ b : (Ref String) . (\ a : (Ref Unit) . (fix "boy"))) , c = (pred (iszero c)) }) of < a = b > => ((pred c) := (pred (fix "apple"))) | < e = a > => (let e = (case unit of < a = b > => 2 | < b = b > => "apple") in (ref (\ b : C . a))))
((ref (a := 0)) . a)
(pred (< d = (case (succ true) of < a = c > => true | < c = e > => ("boy" . a)) > as (Sink (Ref Nat))))
((pred ((ref 0) (! (a as B)))) as ({ c : (Source Nat) , a : ((Ref Unit) -> Nat) }))
((\ d : (Sink (Ref B)) . (pred (0 as B))) . b)
(({ a = (if (let a = unit in 2) then (fix 2) else (iszero unit)) , e = (\ c : ({ e : (Sink Bool) , d : Nat }) . (ref true)) }) . a)
(ref (< b = (fix a) > as (Ref (String -> Top))))
(\ e : (< a : (Source ({ a : Float , c : C })) , d : (Top -> Bot) >) . ({ b = (0 . b) , c = ("boy" 0) }))
((\ d : (Ref Bool) . (let c = a in (! false))) as (< b : (Source (< e : (C -> A) , c : B >)) , d : (Ref ({ e : B , c : Bot })) >))
((< d = (iszero (if "apple" then false else "boy")) > as (Float -> String)) . a)
(pred (iszero (let b = 1 in a)))
((case ((false := 0) (let d = 0 in unit)) of < b = a > => ((let b = false in "apple") := (< c = unit > as B)) | < e = b > => (case (< d = "boy" > as C) of < b = a > => true | < b = c > => (fix 2))) ((succ "apple") := (let c = (ref unit) in (ref "apple"))))
(iszero (if ((case c of < e = e > => a | < d = d > => ("apple" . e)) (succ 1)) then ({ c = (iszero unit) , b = 2 }) else (\ c : (Sink Top) . b)))
(case (let b = (succ (if (fix 1) then 0 else (iszero b))) in (iszero c)) of < d = a > => (if (fix 0) then (< e = false > as Bot) else (if unit then false else true)) | < c = b > => (((! 1) "apple") . b))
(! (if (iszero (\ e : Bot . 2)) then (fix unit) else (let e = ({ b = unit , a = unit }) in unit)))
(fix ({ e = ((a := 0) b) , e = ({ b = (iszero true) , c = 2 }) }))
(fix (let e = ((fix unit) (pred false)) in (fix a)))
((if (fix c) then (pred "boy") else (ref "apple")) ((< e = (succ a) > as ({ a : B , a : String })) := ({ c = (("boy" . c) as Top) , e = (ref "boy") })))
(ref ((2 (let c = b in true)) := ({ b = c , b = 1 })))
((iszero ((ref (if c then false else "apple")) := (fix (case "apple" of < e = d > => 2 | < e = c > => a)))) as (Source ({ b : A , e : Bool })))
((succ (< d = (case true of < b = b > => "apple" | < c = d > => unit) > as (< a : String , e : B >))) := (case (fix "boy") of < c = a > => (! unit) | < d = d > => (fix 2)))
(< c = (case (unit (\ b : Top . a)) of < e = a > => (let e = (< d = "apple" > as A) in (let c = c in true)) | < c = c > => (fix (succ c))) > as (Source (< c : (Float -> String) , b : (Bool -> B) >)))
(((succ true) := (ref unit)) . b)
(case (< d = (fix ({ b = c , d = false })) > as ({ e : (Sink A) , d : (Float -> Top) })) of < d = c > => (\ b : (Ref Bool) . (if (pred 1) then b else (! b))) | < e = e > => ((< c = unit > as (< c : A , c : A >)) (1 true)))
(((fix unit) as (< c : C , e : (Sink Nat) >)) as (< c : (< b : Unit , d : (A -> A) >) , e : ({ a : (Unit -> Bot) , b : Top }) >))
(iszero (iszero (if (if true then 2 else true) then (case 2 of < c = a > => true | < d = e > => 2) else (fix "apple"))))
(succ (iszero ((succ 2) . b)))
((\ b : (Ref (< b : Bool , a : String >)) . (\ e : ({ e : ({ b : Unit , b : Nat }) , e : (A -> Bot) }) . (\ b : (Ref Nat) . "apple"))) (succ (! c)))
(case (\ b : (A -> Bot) . (succ (fix false))) of < d = c > => (((pred "boy") as (A -> Float)) ({ c = a , a = "apple" })) | < c = e > => ((< c = c > as B) as (Ref String)))
((if (! false) then (iszero b) else (unit . c)) as (Ref (< c : A , b : Bool >)))
(case (! (! (< d = (! 2) > as (Sink Bool)))) of < b = b > => (! ({ a = (a := 0) , b = (fix "apple") })) | < e = b > => (! ((fix "apple") := (! c))))
(({ c = (let b = (\ c : Bool . 1) in a) , b = (pred a) }) . a)
(((< c = false > as (< b : Float , d : Unit >)) as (< a : Unit , d : A >)) . e)
({ c = ((true as Bool) . a) , e = (iszero (! "boy")) })
(iszero (pred (< a = (succ unit) > as (Source Unit))))
({ e = ({ e = (if 1 then (ref 2) else (pred a)) , b = (< a = a > as A) }) , d = ((case (\ c : Float . "apple") of < a = e > => ("apple" as C) | < c = e > => "apple") := (< b = (case "apple" of < a = c > => (let c = 2 in "boy") | < d = b > => true) > as ({ a : Bool , a : B }))) })
(iszero (! (< b = false > as (Nat -> Bot))))
((fix (case (succ 2) of < a = d > => (ref false) | < a = b > => (pred c))) . c)
(ref (< e = (let e = true in (case false of < e = d > => unit | < a = a > => 2)) > as (String -> Bot)))
(succ (let a = (pred (! true)) in (if (ref 2) then (pred 2) else b)))
(! (\ a : ((Ref Bot) -> (< c : B , c : Unit >)) . (ref c)))
(fix (ref (0 as (Float -> Top))))
(iszero (fix (if false then "apple" else "boy")))
(fix (! ((ref a) . b)))
(let a = (! (ref unit)) in ((if "apple" then ({ c = unit , c = false }) else (pred 0)) := (if c then 1 else a)))
((< a = (let a = ("apple" := unit) in (false := 2)) > as (Sink (< a : ({ a : String , d : B }) , e : (Top -> Float) >))) := (! (\ c : Bool . 2)))
(ref (! ((< e = "boy" > as Bool) as ({ d : Top , b : A }))))
(succ (let e = (< c = (succ b) > as (C -> A)) in (pred "apple")))
(ref (let e = (pred true) in (if "boy" then (let c = b in b) else (< b = 1 > as String))))
(ref (fix (ref 0)))
({ c = (({ c = (ref 1) , d = (! 2) }) . c) , a = (ref (if unit then 2 else (iszero a))) })
((iszero ((pred 0) := (unit as Bot))) . e)
(\ a : (Sink (Ref Top)) . (\ c : ({ e : (Ref String) , e : (Sink Top) }) . (ref (pred (0 := true)))))
((fix (\ b : B . 2)) := (ref (if (case 2 of < a = d > => c | < a = b > => "apple") then (case "boy" of < c = e > => 0 | < a = d > => "boy") else (fix 0))))
(if (succ (fix (c := 1))) then (case (fix (case "boy" of < d = e > => 2 | < a = c > => b)) of < b = c > => (succ unit) | < a = a > => (\ b : Bool . (a "apple"))) else (ref (case (pred "boy") of < a = c > => a | < a = b > => false)))
(({ b = (fix (0 as C)) , c = (iszero "boy") }) (case (c as Nat) of < d = c > => (fix (fix 1)) | < c = d > => ({ d = b , a = "boy" })))
(iszero ({ d = (pred "apple") , d = (case (\ d : Float . (case "boy" of < b = c > => "boy" | < d = d > => 0)) of < c = b > => (2 as C) | < c = e > => (succ (succ a))) }))
(if (case (succ (fix "apple")) of < e = d > => (fix "boy") | < a = b > => (pred (succ ({ d = c , a = 1 })))) then ((a := 2) . d) else (\ a : (Source (Sink Top)) . (let d = c in true)))
(! (\ a : ({ b : ({ d : (Sink Nat) , b : Unit }) , d : (Sink String) }) . (let d = ({ e = true , b = false }) in (false 1))))
(! (ref (succ (iszero (ref 0)))))
({ e = (! (ref true)) , b = ((pred ("apple" := c)) . b) })
(! (iszero (if (\ c : B . b) then unit else (iszero true))))
(\ a : ((< a : Bot , e : (Float -> Top) >) -> (Sink (Ref C))) . (< b = (fix "apple") > as ((Source Nat) -> Nat)))
(succ ({ d = ({ d = b , b = true }) , d = (let e = (iszero 0) in (if unit then c else a)) }))
((succ (ref c)) := (iszero (succ c)))
(case (ref (false := b)) of < b = d > => (! (let c = 0 in 0)) | < d = b > => (pred (ref (1 1))))
({ c = (iszero (iszero (if a then true else a))) , d = ({ a = (pred (1 (pred true))) , d = (fix (fix false)) }) })
((! (let c = (fix a) in (! 2))) ({ c = (pred (2 c)) , b = (\ a : (Source Float) . (true := b)) }))
(! ((2 (c "boy")) := (! (ref "boy"))))
(iszero ({ d = (unit false) , e = ((let e = 2 in 2) . e) }))
(pred (if (ref (b as Nat)) then (iszero (2 := 2)) else ({ d = (succ true) , c = (\ e : Float . 0) })))
((! (! false)) ((if false then c else (2 "apple")) as ((B -> C) -> ({ e : A , d : Bool }))))
(((succ unit) as ({ d : C , d : Top })) (let e = (pred ("boy" := false)) in (\ a : (Nat -> (< c : Bot , c : String >)) . (c := 2))))
(fix (< e = ((if unit then a else 1) := (case unit of < e = c > => 1 | < c = d > => (0 := b))) > as (Sink ({ c : Top , e : (Source String) }))))
(! (pred (\ d : Nat . a)))
(let e = (< c = ((\ c : String . false) := (c false)) > as ({ d : (String -> C) , d : (Source B) })) in (fix (let e = 1 in (\ e : String . c))))
((ref (let a = "apple" in c)) (fix (if b then unit else (fix 2))))
(if ({ a = (let d = (b := 0) in (< d = "apple" > as Bool)) , c = (let e = (succ (succ "apple")) in (\ d : Unit . true)) }) then (pred (iszero "apple")) else (! ((< e = "apple" > as Bool) . e)))
(fix (\ b : (Ref (Ref Nat)) . (if "apple" then unit else true)))
((iszero (if ((fix "boy") (! a)) then (ref 2) else (pred unit))) (fix ((case (if 2 then unit else false) of < b = c > => unit | < a = a > => 0) . c)))
(succ (fix (ref a)))
(((! 1) as (Ref Bool)) := (let e = (if (\ d : (Bool -> Nat) . 2) then (if (! true) then (c 0) else unit) else (\ e : Float . c)) in ("boy" := 2)))
(if (\ d : ({ b : C , a : A }) . (ref "boy")) then (! (succ true)) else ((c := false) (succ 1)))
(let c = (succ (fix (2 "apple"))) in ({ a = (fix b) , b = (pred "apple") }))
(\ d : ({ e : ({ e : C , a : Unit }) , d : ({ a : Bool , b : (< a : String , b : B >) }) }) . (< c = (fix (false := true)) > as (Source (Source A))))
((iszero (ref c)) (! ((let e = b in b) as ({ c : String , b : (Sink C) }))))
(case (succ (< a = (unit := b) > as (Sink Nat))) of < d = c > => ({ c = (let e = true in (case 1 of < e = c > => c | < c = d > => "apple")) , a = (if (case 1 of < a = e > => 1 | < d = a > => "apple") then (let d = "apple" in "apple") else (0 as (Source B))) }) | < d = c > => (! (fix a)))
(\ e : (Ref ({ c : ({ c : C , d : C }) , e : (Ref A) })) . ((unit . a) as (Float -> Bot)))
(fix (if ((\ c : Bot . 2) as (Source (Ref C))) then ((\ a : Nat . b) 0) else (ref ("apple" as Nat))))
(! ((ref a) . d))
(fix (ref (unit as String)))
({ a = (< d = (ref (succ b)) > as (< c : B , c : B >)) , b = (! (\ a : Bool . unit)) })
(pred (iszero ((\ e : C . false) as Float)))
(case (case (< d = (succ unit) > as Bool) of < d = c > => (case unit of < e = b > => b | < b = c > => unit) | < c = b > => (true 1)) of < b = c > => ((succ 2) . d) | < e = d > => (iszero ((let d = 0 in unit) . d)))
((fix ({ b = unit , a = (let a = 0 in true) })) as ((Ref (Bool -> Bool)) -> (Sink B)))
(case (fix (\ e : Float . "apple")) of < d = b > => (ref (succ (c . a))) | < a = d > => ((let b = (! b) in ({ b = a , d = false })) . d))
(ref (({ c = (ref unit) , b = (c . d) }) := (ref ("boy" := 2))))
(iszero (< b = (if false then unit else a) > as (Ref ((Sink Bot) -> (< a : Bot , c : C >)))))
(\ b : ({ d : ({ d : A , b : Top }) , d : ({ c : Top , e : Float }) }) . ((pred (case false of < b = e > => unit | < e = e > => unit)) . b))
(pred (ref (iszero "boy")))
(if (((succ (fix "apple")) := (\ b : (String -> Top) . b)) as (< b : C , a : String >)) then (! (pred 0)) else (ref (succ unit)))
((pred (fix ("boy" b))) := (pred (\ d : (< c : Float , b : Bool >) . (if "boy" then c else b))))
((ref (succ (pred unit))) as (Source ({ c : (Source String) , e : (Sink Float) })))
((if (fix a) then ({ e = (if b then true else a) , d = (if 0 then (succ 0) else 2) }) else (ref ((fix "apple") as ({ c : Top , e : Float })))) := (if (if (fix true) then ((0 := "apple") as Unit) else (true 1)) then ({ c = (succ 0) , b = (if 1 then false else "boy") }) else ((false as B) . a)))
(let e = (case ((2 . c) (\ a : (Source B) . (if unit then c else "apple"))) of < d = b > => (\ a : Float . (ref true)) | < e = a > => (ref (< c = a > as A))) in (ref (let a = "boy" in unit)))
(((succ (1 := a)) (! ({ b = (< a = unit > as C) , b = true }))) . a)
(fix (({ d = (case (pred a) of < d = a > => c | < c = a > => b) , e = (pred (< b = 1 > as Unit)) }) (("boy" b) := "boy")))
(succ (! (case true of < a = e > => a | < e = e > => b)))
({ b = (iszero (\ c : Bot . ("boy" as A))) , b = (succ (! true)) })
(case (if (< a = false > as C) then (ref (b := false)) else (\ e : Nat . (succ a))) of < c = d > => (< d = (case false of < e = a > => c | < b = e > => "boy") > as (Source Top)) | < d = e > => (pred (fix (succ true))))
(\ a : (Ref (Bool -> String)) . (succ ((succ (let a = "apple" in b)) := (iszero c))))
(! (succ (fix (pred true))))
(pred (if (if ({ d = unit , a = b }) then (succ 0) else b) then (< d = a > as C) else (< a = false > as (< b : A , a : Bool >))))
((fix (((fix "boy") . c) as (Sink String))) (pred ((succ unit) as String)))
((((< a = unit > as Bot) := (iszero true)) . a) (if (case (if a then a else 2) of < c = a > => ({ e = true , e = b }) | < c = b > => (if false then "apple" else false)) then ("boy" . d) else (if (\ d : Unit . (pred true)) then (\ c : (< b : Unit , c : B >) . (if 2 then "apple" else 2)) else (let a = 0 in "boy"))))
(\ e : ({ b : ({ a : Float , a : ({ c : A , a : Unit }) }) , b : ({ b : (Sink C) , e : (Source (String -> C)) }) }) . ((if 0 then true else (\ b : C . "boy")) . e))
(let b = ((let a = "boy" in true) as (C -> Bot)) in (ref (! 2)))
(! ({ b = (let d = ({ c = (! b) , e = (pred "apple") }) in (false (false := 2))) , c = (case (true . b) of < d = b > => (case c of < c = d > => "apple" | < c = b > => a) | < d = d > => false) }))
(let d = (((succ a) := (succ 1)) := (succ ("boy" . b))) in ((0 := (a . c)) . c))
({ a = ({ c = (true "boy") , e = (fix (! (case a of < d = d > => a | < e = a > => b))) }) , a = (({ e = true , e = (fix 2) }) as (Source B)) })
(if (fix (0 unit)) then (("boy" as Nat) . e) else ((succ true) := ((fix unit) . c)))
(case ((pred (2 . d)) as (Source Nat)) of < a = b > => (fix (< c = "apple" > as Unit)) | < c = e > => (if (a . b) then (< a = c > as A) else (\ c : ({ d : Unit , a : Bool }) . false)))
(succ (< d = (fix "apple") > as (Source Nat)))
(if (< d = (fix 0) > as (Source (Ref Top))) then (let d = (if 1 then ("boy" as Bool) else ("boy" := false)) in ("apple" . d)) else (< e = (! (succ 1)) > as (Source (Bot -> Bool))))
((case (if (\ d : Nat . 1) then (! 2) else ({ e = "boy" , b = 1 })) of < b = b > => (succ (case "apple" of < e = e > => false | < e = e > => "boy")) | < e = e > => (fix "apple")) as (Ref (Source (< c : Nat , b : Bool >))))
((let c = (! unit) in (iszero (case 2 of < d = a > => 1 | < e = d > => false))) as (((< c : (Ref B) , e : ({ e : Top , d : Nat }) >) -> (Float -> Float)) -> (Ref ({ c : String , d : (Source B) }))))
(succ ((succ (iszero c)) . e))
((\ d : (< c : Bool , a : B >) . ({ a = (< b = b > as A) , b = (< c = (if "boy" then "boy" else 2) > as (Source B)) })) := (pred (case (iszero (fix 1)) of < a = d > => (unit as Top) | < b = c > => (ref true))))
(! (! (! unit)))
((pred ((iszero unit) . b)) := ((true unit) (\ a : A . 1)))
((succ (\ d : Bool . false)) . e)
(if (case (if (if 2 then unit else a) then (pred a) else (\ b : String . 2)) of < c = d > => ({ d = (case 0 of < e = e > => "apple" | < e = a > => true) , d = (iszero true) }) | < c = a > => (! ((1 := 0) "apple"))) then (succ (if unit then c else (false . e))) else (ref (iszero 2)))
((! (! (let d = unit in unit))) := (({ a = "boy" , a = b }) := ((succ 1) := (iszero 0))))
(if (fix (< b = (\ a : Top . a) > as (A -> A))) then (let b = (< a = true > as Unit) in (pred "boy")) else (ref (if (succ ({ e = a , d = c })) then (fix true) else (1 . b))))
(! (< d = (2 := 0) > as (Unit -> String)))
(iszero (if (let b = false in unit) then (\ b : Bot . 0) else (let d = 0 in (0 as Bool))))
(let d = (ref (({ b = (fix c) , a = c }) := (case true of < b = a > => "boy" | < e = e > => 2))) in (ref ((iszero "boy") . c)))
((fix ((case 0 of < c = a > => 2 | < a = a > => 1) . c)) . c)
(ref (ref (pred "apple")))
(ref ((b as Float) as (Source Float)))
({ b = (! (unit . a)) , d = (case ((! "apple") (c as B)) of < a = d > => (let d = (case b of < d = c > => "apple" | < a = d > => unit) in (if a then c else c)) | < e = a > => (iszero false)) })
((iszero (1 . d)) as ({ c : ({ c : (Sink C) , d : (Source Float) }) , b : (< e : String , c : Top >) }))
(({ e = ({ a = (\ c : Nat . a) , a = (c . a) }) , c = (< d = (< b = 1 > as Unit) > as ({ a : String , d : A })) }) as ({ b : (B -> Bool) , e : (Source Bot) }))
(iszero (let a = ({ e = (< d = c > as C) , e = "apple" }) in (\ a : String . (! true))))
(succ (fix (pred a)))
(< d = (case (if a then 1 else (true as String)) of < e = d > => (if (false false) then (\ a : Unit . b) else (iszero c)) | < b = b > => (case (2 . c) of < b = a > => (< b = true > as Bool) | < c = d > => (pred true))) > as (Sink (< a : (Ref Float) , e : Unit >)))
(let a = (! (fix (a as Nat))) in (iszero (! ("apple" 2))))
(< b = (let b = (1 a) in (0 := 0)) > as (Sink (Ref ({ d : C , d : Nat }))))
((({ e = (a := b) , a = unit }) as (Source Float)) := ((ref c) as (C -> Unit)))
(iszero (("apple" := "apple") as ({ c : Float , a : B })))
(< b = (! (ref 2)) > as ((String -> Unit) -> ((Source Nat) -> (Source String))))
(pred (pred (2 := (let d = true in "apple"))))
(! (! (c . d)))
(ref (! (ref unit)))
((ref (succ unit)) := (< a = ({ e = b , e = true }) > as (Ref Bool)))
((let a = ((< a = 0 > as A) := (unit false)) in (if b then 2 else b)) (! (case (! a) of < d = e > => (unit := 1) | < a = c > => (case "apple" of < d = e > => 2 | < e = c > => "boy"))))
(! (if (false . d) then (pred (fix false)) else (case ("boy" . a) of < b = e > => (< e = 2 > as C) | < b = e > => c)))
(\ b : (Ref ({ d : B , e : Unit })) . ((\ e : (Source Bot) . (! false)) . d))
(< c = ((pred "boy") as (Source (< e : Unit , a : Bool >))) > as (Ref ((< a : Float , d : A >) -> (Source C))))
(((case "boy" of < a = d > => 0 | < d = b > => (ref unit)) := (case (iszero c) of < d = d > => (fix a) | < e = c > => (false . a))) ({ b = (iszero c) , b = (let e = true in "boy") }))
(! ({ e = (\ b : C . (case 1 of < c = c > => true | < d = a > => 0)) , b = (! true) }))
(iszero (< b = (iszero (if false then true else unit)) > as (Ref (Source Nat))))
(! (fix (("boy" a) as Top)))
(iszero ({ a = ((true . c) := (iszero (ref false))) , e = (succ (succ 2)) }))
((\ d : ({ e : Nat , b : (Ref B) }) . (fix (\ c : String . false))) (\ a : (< a : ({ d : A , c : A }) , d : ({ e : String , d : B }) >) . (({ e = (\ a : C . 2) , a = (2 unit) }) as (Ref A))))
(< a = (fix (pred 1)) > as (Source (Sink Bool)))
(ref (pred (pred (let b = unit in c))))
({ c = (iszero ((if "apple" then "boy" else "apple") := (let a = "apple" in c))) , b = ({ c = (let b = (a as String) in (1 := "apple")) , b = (\ c : Bool . "boy") }) })
((\ c : (Sink (Unit -> Unit)) . (let a = (succ a) in "apple")) . a)
(\ d : ((Source (Ref Bot)) -> (Sink Float)) . ((ref (let d = true in 1)) (! (< a = unit > as Bot))))
(succ (((succ "boy") as (< e : (Ref Bool) , e : Nat >)) . b))
(succ (< e = (unit a) > as (Source (< c : Bot , b : Unit >))))
(ref (! (ref (< e = "boy" > as B))))
(ref (ref (false as A)))
(if (({ e = 2 , d = unit }) . a) then (iszero (1 as Nat)) else (ref ((< c = 1 > as A) (iszero 2))))
(case (fix (iszero unit)) of < e = a > => ((fix true) := (succ ((unit . e) as Bool))) | < c = c > => (\ b : (Source (Ref Float)) . (pred 2)))
({ e = (pred ("boy" := c)) , e = (succ (succ c)) })
(< e = (fix (pred "boy")) > as (< d : (Source (< c : Top , c : Float >)) , a : (< d : B , d : String >) >))
((succ (if "apple" then unit else 1)) := (pred (case unit of < e = d > => ({ b = 0 , c = 0 }) | < b = e > => (\ b : Bot . 0))))
((ref (\ d : (Sink B) . (! 0))) . e)
(fix (fix ((ref 2) := unit)))
(((\ c : Float . "boy") := (ref 1)) . e)
((("boy" := (succ "apple")) . d) (ref (ref (! b))))
(\ d : (< d : ({ c : (< b : (< e : Unit , b : B >) , a : (Source Float) >) , a : (Sink Nat) }) , c : (Sink (Sink B)) >) . ({ e = ((fix a) . e) , b = (fix unit) }))
(< e = (if (pred true) then ((\ b : Bot . true) (true as A)) else (pred (if false then 1 else c))) > as (Ref ({ d : C , d : Nat })))
({ c = (succ ((pred "apple") := ("boy" . e))) , a = ((({ c = b , e = (iszero 2) }) . d) as (Ref ({ b : C , d : String }))) })
(((ref a) (succ "apple")) . a)
(\ a : (Sink ({ d : ({ a : A , d : String }) , d : (Source Bot) })) . ({ e = (ref "apple") , b = (ref 0) }))
(fix (pred (if ("boy" . d) then (fix "boy") else (pred (1 false)))))
(ref (ref (< a = (pred false) > as Bool)))
(ref (((fix 0) (pred (! a))) as (Ref (Source Float))))
(< e = (succ ((let e = 1 in c) as Float)) > as ((Source (< a : Nat , c : Nat >)) -> (Bool -> Nat)))
(< e = (fix ((\ b : Nat . 2) . c)) > as ((Sink Float) -> (< e : String , b : Top >)))
(\ d : (Sink ({ a : A , a : (Sink Top) })) . (({ a = 1 , d = b }) . d))
((pred (b := "boy")) := (let c = (succ ({ d = 2 , c = c })) in ((let c = 2 in c) . c)))
(case (case (true . d) of < e = d > => (ref "boy") | < d = c > => ("boy" := true)) of < e = e > => (({ b = b , a = unit }) := (a := 2)) | < a = c > => ((b . a) . c))
(! (({ e = 2 , d = c }) ({ c = (case "apple" of < b = d > => 0 | < a = d > => b) , b = ((\ b : C . a) as String) })))
(if (case (! c) of < a = a > => (ref false) | < c = d > => (< a = 2 > as (Ref C))) then ((ref (! true)) (ref (unit . b))) else ((iszero 1) . a))
(fix (let b = (let d = (\ b : Unit . 1) in unit) in ({ a = unit , d = (\ b : Unit . 0) })))
(succ (fix (< d = "apple" > as String)))
(if (let d = (\ b : Bool . true) in (a . a)) then ({ b = (let d = 1 in b) , e = ((! "apple") := a) }) else (ref (< c = "boy" > as (Sink A))))
(! ((unit . a) . d))
(pred (case (a := c) of < b = e > => (true . c) | < a = b > => ({ b = "boy" , d = ({ d = "boy" , a = 0 }) })))
(iszero ({ e = (\ b : (< a : Nat , a : B >) . ({ d = (fix 0) , b = ({ c = false , c = b }) })) , a = (ref "apple") }))
({ c = ((1 . e) as ({ a : (Ref Unit) , a : (Sink String) })) , c = ({ e = (pred true) , a = (case c of < e = d > => "apple" | < e = c > => c) }) })
(case (({ a = 2 , e = (ref 1) }) ((succ "boy") as ({ c : A , a : Float }))) of < e = c > => (({ a = (2 . e) , d = 0 }) . a) | < b = c > => (pred (let a = true in 1)))
((("apple" := 1) := (unit false)) as ((Ref ({ d : Nat , b : A })) -> (Ref (Source B))))
(case ((\ e : ({ a : Unit , b : Nat }) . (! 2)) as ({ a : Nat , a : A })) of < e = e > => ({ d = (\ a : B . unit) , e = ({ e = "boy" , a = 1 }) }) | < c = a > => (let c = (fix (if c then 1 else "boy")) in (succ "apple")))
(if (let e = (let e = 2 in true) in ("apple" as String)) then (succ (let a = "apple" in a)) else ((iszero "boy") (! false)))
(case (((iszero a) . b) := ((2 := 2) := (case b of < c = b > => "apple" | < b = d > => 0))) of < b = c > => (((false := b) true) . a) | < c = c > => (({ d = (! true) , a = (pred (case false of < a = c > => 2 | < e = b > => "boy")) }) := (case false of < b = c > => (< d = 1 > as Nat) | < d = a > => "apple")))
(if (pred (ref c)) then (iszero (fix (fix ({ a = a , a = false })))) else (succ (a a)))
(if (iszero (ref 2)) then ((iszero a) . c) else (case (if (\ c : (< d : B , d : Unit >) . c) then (let c = (c := 1) in c) else (true as B)) of < d = d > => (pred (let c = c in "boy")) | < c = a > => (ref (a as (Sink Bool)))))
((< b = (case 2 of < a = e > => a | < e = b > => b) > as (Nat -> Bot)) := (iszero (fix (c . a))))
((fix (< d = b > as A)) . c)
(if (iszero (pred (c "apple"))) then (({ e = (if 1 then true else b) , a = unit }) as (Sink Nat)) else (iszero (a := true)))
(! (succ (! c)))
(iszero (ref ({ c = (true . d) , b = unit })))
(((fix (succ 2)) . e) (succ (fix 2)))
(((if (pred "apple") then (< a = 0 > as Bot) else ({ a = "apple" , d = b })) . c) := ((< b = "apple" > as Float) (succ (\ e : Top . false))))
(< e = (let d = (let e = (< a = unit > as A) in 1) in (2 c)) > as (< d : (Source B) , c : ({ e : (< b : B , a : Bot >) , d : (< b : A , d : Top >) }) >))
((case (let a = (case a of < c = d > => b | < a = c > => true) in (ref 1)) of < d = d > => (succ ({ a = 0 , a = (fix unit) })) | < d = c > => (if (1 := "boy") then (pred "boy") else (iszero true))) as ({ e : ({ a : Float , e : (Ref Bool) }) , a : (Ref (Source A)) }))
((let d = (b := c) in (ref b)) := ((iszero 0) . b))
(fix (iszero (iszero 1)))
(fix (! (if (if false then a else 0) then 2 else "boy")))
(let e = (< e = ({ a = 2 , c = unit }) > as (Sink String)) in (! ((iszero "apple") as (Ref ({ a : Nat , c : Nat })))))
(! ((case (succ 1) of < a = a > => 2 | < e = d > => (! false)) ((1 . d) := unit)))
(iszero ((\ a : String . (let a = 1 in c)) as (Source ({ e : A , c : A }))))
((iszero (if ({ b = unit , d = "boy" }) then (case true of < e = a > => false | < c = c > => "apple") else b)) ((< b = (pred b) > as (Sink B)) . b))
(let c = (((fix unit) := 1) . c) in (let e = (succ c) in (true b)))
(ref (! (1 . a)))
(((! 1) as (Nat -> (Source Unit))) (if ((\ e : ({ e : B , e : Top }) . (if "boy" then "apple" else b)) . b) then (fix ("apple" as C)) else (pred (let e = 0 in 2))))
((\ c : (< c : (< e : Bot , d : String >) , a : (Source B) >) . (succ (fix false))) . d)
((((ref 2) as String) ((! 1) := unit)) as ({ b : (< a : ({ a : B , b : Float }) , b : (Nat -> Unit) >) , d : (< c : (Ref Bool) , d : B >) }))
(let d = (pred (succ (if false then c else 2))) in (case ({ c = 1 , a = "apple" }) of < a = e > => ((fix 0) . c) | < b = a > => (fix b)))
((((pred "apple") ({ e = "boy" , e = 0 })) as ({ c : C , b : (Source Bool) })) (case (if 0 then "boy" else "apple") of < d = d > => (succ ({ e = a , e = 1 })) | < d = e > => (\ b : String . (succ "boy"))))
(let a = ({ e = (case 2 of < e = b > => "boy" | < c = c > => "boy") , d = ({ d = 2 , a = unit }) }) in (let b = (fix ({ e = true , a = c })) in (fix (b as String))))
(! ((iszero ({ c = c , e = c })) := ((fix (let c = c in c)) := (ref a))))
(< d = ((! 1) (succ b)) > as ((< c : (< b : C , a : A >) , a : (Bot -> C) >) -> (Source (Sink ({ c : C , b : C })))))
((succ (fix "boy")) (\ c : (Source Unit) . ("boy" a)))
(if ((! "boy") as ({ a : C , d : Top })) then ((! false) as (Ref Float)) else (succ (ref unit)))
(iszero (succ (fix ((! 2) as Bool))))
(if (iszero (< b = (iszero (c as Top)) > as (Sink Top))) then (let d = ({ a = "apple" , a = "boy" }) in (iszero (! "boy"))) else (if (case (\ d : (Ref Float) . (0 := unit)) of < e = b > => ("boy" . e) | < e = c > => (0 true)) then (\ e : (C -> C) . (if false then "apple" else c)) else (ref (iszero 2))))
((\ c : ({ a : (Bot -> Nat) , e : ({ d : Top , c : Unit }) }) . ((if unit then "apple" else c) (< a = (case a of < e = d > => "apple" | < d = c > => 1) > as Bot))) . c)
(fix (succ (ref a)))
(fix ({ c = (ref 2) , a = (ref b) }))
(ref (let e = ({ c = true , b = (succ b) }) in (\ b : (Source (Sink Nat)) . ({ c = 1 , a = a }))))
(case (succ (ref false)) of < b = d > => (pred (fix 2)) | < d = b > => ({ b = (succ ({ e = b , a = b })) , d = (! a) }))
(fix (< c = (< d = (pred (pred "apple")) > as (Nat -> ({ e : String , d : Bool }))) > as (Ref Unit)))
(fix (case (a "apple") of < c = b > => ((fix "apple") . d) | < d = a > => ((ref true) . d)))
(if (ref (true . a)) then (if (ref ({ c = false , b = (if a then b else a) })) then (case (ref "apple") of < e = e > => true | < c = c > => (let a = "apple" in 0)) else (fix 1)) else ({ d = (false := unit) , d = (! (ref (false . d))) }))
(case (succ (fix (< d = unit > as Float))) of < d = c > => (\ a : ({ b : A , b : String }) . (ref false)) | < d = c > => (succ (if (case unit of < c = c > => c | < c = a > => c) then (iszero false) else (let d = c in (iszero a)))))
(({ b = (ref (if "boy" then false else c)) , e = ({ d = true , e = "apple" }) }) := (iszero (let e = "boy" in "apple")))
(fix (pred ("boy" 1)))
(pred (fix (if (iszero "apple") then (case c of < c = d > => false | < a = c > => "boy") else (iszero c))))
((pred (let c = (unit . c) in (pred "apple"))) ((case (! true) of < e = e > => (let e = 2 in c) | < b = d > => 0) (\ a : Top . "apple")))
(case ((case (< e = b > as Bool) of < a = b > => 2 | < a = d > => ({ c = true , d = false })) := (1 as (String -> A))) of < b = c > => (ref (let d = "apple" in true)) | < a = e > => ((case (< e = "apple" > as String) of < a = a > => 2 | < b = d > => b) . c))
(iszero ((fix (pred 2)) := (! ({ c = false , e = 1 }))))
(if (if (let c = (\ e : Float . 1) in (! a)) then (ref 2) else (if (succ a) then (a b) else (pred 0))) then (case (fix (if 0 then c else b)) of < c = b > => (2 . e) | < a = d > => ((pred true) as C)) else ((iszero "boy") (pred "apple")))
(< c = (! (let d = true in 1)) > as ({ b : ({ b : (Ref Bot) , b : ({ a : Unit , e : Nat }) }) , d : (Sink (Nat -> Nat)) }))
(succ (\ c : (Sink Bot) . (2 b)))
(((! (unit := "boy")) . e) := (< b = (pred false) > as ({ c : Bot , a : (< d : A , e : C >) })))
(iszero (! (true 2)))
(let d = (ref (ref (pred false))) in ((let b = (let a = (1 unit) in ("boy" as String)) in ((false as Bot) as ({ d : Bot , e : Float }))) (! (if 1 then 2 else c))))
(({ d = (let a = "boy" in (if unit then 2 else "boy")) , e = (fix b) }) . a)
(< c = ((fix 0) as (Sink Bool)) > as (Sink (Sink (Ref B))))
(pred (\ d : ((Source B) -> (Source Unit)) . ((iszero a) as (< a : Bool , a : (< b : Bot , a : Float >) >))))
({ c = ((< b = (succ 2) > as (Source (A -> C))) as (Sink (Source Bot))) , a = ((pred 0) ({ b = 1 , d = (if b then a else c) })) })
(ref (fix (succ 0)))
(case (< a = (\ d : (< c : String , e : (C -> C) >) . (pred unit)) > as (Source (C -> ({ d : Nat , d : Bot })))) of < e = c > => (let e = (succ b) in (ref 2)) | < a = d > => (case ((ref unit) . e) of < c = b > => (case "boy" of < c = e > => 1 | < d = d > => c) | < e = a > => (case (case a of < d = b > => a | < c = a > => b) of < e = c > => (iszero "boy") | < e = b > => (let c = false in a))))
((let a = (< b = ({ a = c , a = b }) > as (Sink String)) in (if 1 then (2 := false) else 1)) as ({ d : (Float -> Unit) , c : (Ref Float) }))
(pred (case (iszero b) of < a = d > => (! (\ e : A . b)) | < b = a > => (iszero "boy")))
(case ((0 as (< b : Float , c : Nat >)) (fix ((! 0) (a := 2)))) of < d = d > => ((iszero c) := (fix (c := b))) | < a = c > => (fix (0 false)))
