(pred (\ b : ((C -> B) -> (Nat -> C)) . (let a = b in (succ c))))
((if (iszero (succ b)) then (\ b : (Bool -> (A -> A)) . (let a = c in false)) else (let b = (if (pred 1) then (if true then c else 2) else b) in (b (\ b : B . false)))) (\ a : ((Bool -> A) -> (C -> B)) . (iszero (if b then (pred 0) else a))))
(pred (iszero (if false then 2 else 2)))
(iszero (if (succ true) then (iszero true) else (iszero (iszero 2))))
(let c = (pred (succ (pred false))) in (iszero (if 2 then (pred 1) else false)))
(succ (iszero ((\ e : Bool . c) (let a = true in c))))
((let e = (let e = b in false) in (0 false)) (pred (a 2)))
(\ a : ((C -> C) -> (B -> (A -> B))) . (if (let b = false in 0) then (let e = 0 in 1) else (succ false)))
(pred (let a = (pred a) in (iszero 1)))
(iszero (let c = (\ e : (C -> Nat) . 2) in (\ c : Nat . (succ 1))))
(\ a : (((C -> C) -> C) -> ((A -> C) -> (Nat -> A))) . (let d = (\ a : (A -> A) . true) in ((if 2 then a else true) c)))
(if (if (succ b) then (let c = (\ e : B . true) in (iszero 1)) else (iszero a)) then (iszero (if b then false else true)) else (pred (if 2 then (let c = c in c) else 2)))
(let d = ((succ (pred a)) (\ b : Bool . 2)) in (if (\ b : ((C -> B) -> C) . (\ c : (Bool -> Nat) . (iszero false))) then ((iszero 0) 0) else (if (1 2) then (iszero 1) else (iszero true))))
(iszero ((succ false) (\ d : B . 2)))
((pred (true b)) (iszero (\ b : (A -> C) . c)))
(if ((if (pred 1) then (succ true) else (iszero b)) (let e = (\ e : A . false) in (succ 2))) then (\ c : (Bool -> Nat) . (a c)) else (if (succ false) then (let c = true in c) else (pred (0 b))))
(let d = (pred (b 0)) in (succ (\ a : (Nat -> Bool) . (a b))))
(iszero (succ (\ b : C . 2)))
(iszero (\ e : ((A -> A) -> B) . (pred (\ c : B . 0))))
(\ c : (((B -> A) -> A) -> (A -> C)) . (let d = (succ false) in (iszero a)))
(\ c : ((Nat -> (C -> Bool)) -> ((B -> C) -> (Nat -> A))) . ((pred (\ b : (C -> Bool) . c)) (if (2 c) then (succ 2) else (let c = 1 in 2))))
(\ d : ((B -> A) -> (C -> C)) . (pred (pred true)))
((let e = (pred (b (let b = true in false))) in ((if 1 then a else 1) (let a = 0 in a))) (if (pred (iszero a)) then (\ a : B . (if a then c else 2)) else (pred (\ e : (A -> C) . (pred true)))))
(let a = ((\ b : Bool . 2) (pred false)) in (pred (b (iszero 1))))
((succ (b false)) (pred (a 0)))
(pred ((if a then (if b then a else 2) else 2) (iszero 0)))
(\ b : ((Bool -> Bool) -> (((B -> Nat) -> (Nat -> C)) -> (Nat -> Nat))) . (\ d : (C -> A) . (if true then 0 else c)))
(succ (pred (succ (iszero a))))
(if (iszero (iszero 2)) then (iszero (\ c : B . 1)) else (iszero (pred 1)))
(succ (if (iszero (\ b : B . 0)) then (if 1 then 1 else 0) else (\ d : (Nat -> Bool) . 2)))
(if ((if (iszero false) then 0 else b) (if ((pred true) (let e = 0 in a)) then (false b) else (let e = 1 in 0))) then (let c = ((\ a : C . 0) a) in (if 0 then 1 else (if b then c else a))) else (if (pred 0) then (if false then c else true) else (succ 1)))
(if (pred (pred (pred (let a = b in 2)))) then (let d = (if (iszero (let a = true in a)) then ((iszero b) false) else (succ (let b = 0 in true))) in (pred (iszero b))) else (if (pred b) then (let c = (iszero 2) in false) else (pred (pred 0))))
(succ (\ e : (Bool -> Bool) . (pred 2)))
(iszero (succ (if (iszero 0) then (pred 2) else (let e = true in 2))))
(\ a : (((C -> A) -> ((Nat -> Nat) -> Bool)) -> ((A -> A) -> (B -> Bool))) . (pred (pred (if a then false else 1))))
(pred (\ d : (Nat -> (Bool -> C)) . (iszero (pred a))))
(\ d : ((A -> B) -> (B -> B)) . (((succ b) b) (succ false)))
(iszero (succ (let a = (iszero 0) in (if a then (if 0 then c else 0) else (\ e : A . b)))))
(succ (let d = (let a = (succ a) in (\ e : (B -> Nat) . 2)) in (succ (succ true))))
((iszero (succ a)) (\ b : (B -> (A -> Nat)) . (if a then (succ a) else c)))
((\ c : (A -> (A -> Nat)) . (iszero (pred true))) (let d = (pred 2) in (iszero a)))
(if (\ b : (Bool -> (B -> C)) . (if c then (b false) else (let a = 1 in 1))) then (succ (1 1)) else (succ (iszero true)))
((\ c : (B -> Nat) . (if true then c else (0 1))) ((let e = c in (\ b : C . b)) (true c)))
((let a = (if false then 1 else 2) in (succ (\ c : C . 0))) (pred (pred (let e = a in c))))
(if (if ((succ b) 0) then (iszero true) else (pred false)) then (pred (a b)) else (if (pred 0) then (succ 1) else (\ b : Bool . 2)))
(succ (iszero (let e = false in c)))
(succ (let d = (2 b) in (iszero b)))
(pred (\ a : (B -> A) . (a false)))
((pred (let d = (pred 2) in (let c = 2 in (succ 2)))) (succ (succ false)))
(succ (\ b : (B -> C) . (pred true)))
((if (if (let c = 2 in b) then 1 else b) then (succ (\ e : A . true)) else ((\ e : B . false) (iszero 2))) (succ (if a then false else 0)))
(iszero (iszero (pred 0)))
(succ (\ c : ((B -> Nat) -> (Bool -> Bool)) . ((let b = 1 in c) (iszero c))))
(pred (if (\ c : Bool . 1) then (let e = (1 false) in (b c)) else (iszero b)))
(let b = (succ (\ e : (C -> C) . (\ a : Bool . true))) in (iszero (let a = c in 2)))
(let c = (\ e : (Bool -> (C -> Nat)) . ((iszero true) (1 true))) in (pred (let e = ((let c = c in b) (pred false)) in (pred a))))
(iszero (iszero (if (if true then true else c) then (if 1 then a else a) else (\ a : B . a))))
(let d = (iszero (if (iszero 0) then (2 true) else (iszero 0))) in (if (\ a : ((C -> Nat) -> (A -> A)) . (iszero a)) then (if (\ d : (C -> B) . (iszero 0)) then (succ 2) else (let e = false in (1 a))) else (pred (succ false))))
(\ c : ((B -> Bool) -> ((C -> B) -> (A -> A))) . (\ c : ((C -> B) -> (A -> A)) . (if (iszero 1) then (iszero 2) else (iszero false))))
(succ ((0 1) (pred a)))
(succ (let c = (if true then c else c) in (succ 1)))
(if ((pred (succ a)) (succ 1)) then (if (let b = (succ 2) in (iszero a)) then (succ c) else (pred (iszero 2))) else (succ (2 c)))
(if ((pred b) (if 2 then (c b) else (pred true))) then (succ (if true then 2 else (if 2 then 0 else true))) else ((2 1) (pred 1)))
(let d = (iszero (iszero (iszero c))) in (pred (pred 1)))
(\ a : ((B -> B) -> (A -> C)) . (iszero (if 1 then a else 2)))
(pred (\ d : (Bool -> Bool) . (\ d : B . (0 c))))
(if (pred (pred a)) then (succ ((a b) 1)) else (pred (succ (iszero false))))
(succ (pred (\ c : A . (let a = a in 1))))
(\ a : ((C -> (A -> C)) -> ((Bool -> (C -> C)) -> ((B -> C) -> (Nat -> A)))) . (let b = (pred b) in (let a = (1 2) in c)))
(pred (succ (b true)))
((succ (pred 1)) (\ b : ((C -> Bool) -> Bool) . (succ (pred (\ c : Bool . 0)))))
((\ d : ((Bool -> C) -> (A -> A)) . (pred (pred c))) (pred (let e = (pred 2) in ((let a = 2 in 0) false))))
((succ (\ e : (C -> A) . (succ a))) (if (let e = 0 in b) then (succ c) else (pred (let a = 2 in false))))
(if (if (b b) then (succ 1) else (if b then b else 0)) then (\ d : ((B -> Bool) -> (Nat -> Bool)) . (pred (iszero c))) else (iszero (pred (\ d : Bool . 0))))
((iszero ((\ d : B . a) (\ e : B . 0))) (\ c : (A -> Nat) . (succ 0)))
(if (succ (let a = true in 0)) then (\ e : ((Nat -> B) -> (B -> C)) . (iszero 1)) else (\ e : (Nat -> (Bool -> Nat)) . (\ c : B . (succ 2))))
((succ (iszero 2)) (\ e : ((Bool -> A) -> B) . (((pred a) (if 1 then b else c)) (let e = (b false) in (let c = true in a)))))
(((\ e : (C -> B) . (pred 2)) (pred (\ e : C . false))) (if (if a then 2 else 2) then (let a = 1 in 2) else (let d = (pred true) in a)))
((pred ((let a = c in c) (true false))) ((iszero 2) ((false 0) 1)))
(let b = (pred (let d = b in false)) in (if (iszero a) then ((let d = 1 in 0) (\ e : C . a)) else (\ b : B . (\ d : C . c))))
(succ (\ b : ((A -> C) -> (B -> Bool)) . (if 2 then (iszero a) else (iszero b))))
(\ c : ((Nat -> A) -> (B -> Nat)) . (\ d : ((Nat -> B) -> ((A -> B) -> (Nat -> Bool))) . (let d = (succ (\ b : B . a)) in (a b))))
((pred (pred 2)) (iszero (\ d : (Bool -> Bool) . (\ c : B . 2))))
(succ (\ c : (B -> Bool) . (succ (pred 1))))
(iszero (iszero (succ (\ d : A . true))))
(pred (iszero (succ (let b = (succ true) in (iszero 0)))))
(pred (succ (0 (0 c))))
((let e = (if (let c = b in true) then (2 2) else b) in (\ a : (C -> C) . (succ false))) ((\ b : Bool . true) (iszero (\ c : C . 1))))
(iszero (\ a : (C -> C) . (let c = (\ a : C . false) in (succ b))))
(iszero (let d = (let e = (if 2 then true else a) in (let b = b in 1)) in (let c = (iszero (let d = true in true)) in (pred (false 2)))))
(let e = (\ c : ((Bool -> A) -> Nat) . (pred (let a = 1 in a))) in (succ ((pred a) (let e = (2 false) in c))))
(pred (\ a : ((C -> B) -> A) . (iszero a)))
(iszero ((false true) (succ (succ 2))))
(if (succ (iszero (if 2 then 1 else false))) then ((let e = (iszero true) in (pred 1)) (let a = (iszero (let c = 1 in b)) in (pred (if 0 then a else c)))) else (let b = (pred (1 2)) in (iszero (c 2))))
(iszero (let c = (if (succ 2) then (succ (if true then true else b)) else (if 2 then true else 1)) in (let c = (pred 1) in (\ c : B . 2))))
(\ b : ((Nat -> Bool) -> (Nat -> Bool)) . (succ (if a then a else b)))
(iszero (succ (let d = (iszero b) in (succ c))))
(pred ((pred a) (pred 0)))
(succ (\ e : ((C -> B) -> (B -> (C -> A))) . (pred (if (let a = false in 1) then (let d = a in 2) else 0))))
(succ (\ b : (Nat -> A) . (b true)))
(if (if (iszero (pred a)) then (\ d : A . 1) else (pred c)) then (succ ((succ (c 0)) (\ b : B . c))) else ((if false then c else a) (iszero true)))
(let d = (pred (let c = true in b)) in (iszero (pred true)))
((let d = (succ 0) in (pred c)) ((pred (iszero c)) (c a)))
(let c = (pred (false 2)) in (let a = (succ 2) in (let c = 0 in 0)))
(iszero (iszero (\ c : (C -> A) . (pred 0))))
((if ((a 1) (let c = c in 2)) then (\ a : ((B -> Nat) -> (B -> A)) . (false false)) else (\ e : ((C -> Bool) -> C) . (let b = c in true))) (let d = (\ b : (Nat -> B) . (iszero 2)) in (let e = (let a = b in c) in (succ (\ a : A . 1)))))
(let a = (succ (a true)) in (\ d : (C -> B) . ((let e = 0 in c) true)))
(\ a : (((A -> Nat) -> (Nat -> A)) -> ((C -> C) -> Bool)) . (if (\ c : B . true) then (\ e : (Bool -> A) . (pred c)) else (\ d : (A -> B) . (succ a))))
(let d = (\ a : ((B -> Nat) -> Nat) . (\ c : Bool . false)) in (iszero ((\ e : (Bool -> C) . (pred false)) ((iszero 0) b))))
(let a = (if (let d = true in true) then (if a then false else false) else (2 false)) in (\ d : (B -> C) . (pred 0)))
(pred (if (succ 1) then (if 1 then (let b = c in c) else 1) else (pred 0)))
(succ (\ e : (Nat -> Nat) . (if 0 then true else a)))
(succ (succ ((let c = false in a) false)))
(if (\ b : (((C -> Bool) -> (B -> C)) -> (Nat -> C)) . (pred (\ c : Bool . c))) then (succ (let e = 0 in c)) else (\ b : (Bool -> (A -> B)) . (1 b)))
(if (let a = (let d = ((pred c) (if true then c else 2)) in (\ c : (Nat -> Nat) . (iszero b))) in (iszero (let d = a in 2))) then (pred (if (let c = a in 1) then c else c)) else (if (if (if 1 then 0 else true) then (iszero b) else 1) then (succ false) else (iszero 2)))
((pred (\ c : (Nat -> A) . false)) (pred (iszero (\ c : Nat . false))))
(iszero (iszero (let c = (let e = false in false) in (let c = 2 in (iszero false)))))
((let e = (iszero false) in (2 c)) (iszero (iszero (if 1 then b else false))))
((succ (pred 0)) (\ d : (Nat -> (B -> Nat)) . (pred false)))
(pred (iszero (let b = 0 in true)))
((((2 0) (if c then true else c)) (if (pred b) then (pred true) else (pred a))) (\ d : (Nat -> Nat) . (if 2 then (succ 1) else (let d = 0 in b))))
(\ e : (((C -> Nat) -> (A -> (B -> C))) -> ((C -> Nat) -> (B -> C))) . (iszero (\ d : (A -> Bool) . (succ 1))))
(pred (pred (false (\ a : C . false))))
(pred (pred (pred false)))
(if (iszero (if (iszero (iszero c)) then (pred (if 2 then true else 0)) else (\ a : A . b))) then (let e = (pred false) in (iszero true)) else (succ ((pred false) (let e = 0 in false))))
(\ c : (((A -> Bool) -> (Nat -> (A -> Nat))) -> (C -> (B -> Nat))) . (succ (pred (iszero 1))))
(if (pred (pred (1 (let b = a in false)))) then (let d = (let b = 2 in 1) in (\ d : Nat . c)) else (\ a : (Nat -> Bool) . (pred c)))
(let e = (if (pred true) then (\ a : ((Nat -> B) -> C) . (iszero a)) else (if c then 2 else 0)) in (pred (let a = (if 2 then 2 else b) in (\ b : Bool . b))))
(iszero (succ (succ true)))
(if (let b = (pred 1) in (if (false a) then a else (\ d : C . a))) then (let b = (pred (succ (2 a))) in (if false then b else 0)) else (succ (pred false)))
(succ (iszero (1 a)))
((succ ((succ a) b)) (iszero (iszero a)))
(pred (\ c : (((B -> Nat) -> (Nat -> C)) -> ((Nat -> B) -> Bool)) . (1 (iszero 1))))
((succ (2 (if true then c else c))) (pred (pred true)))
((if (succ 1) then ((pred 1) (let a = c in c)) else (if (\ c : B . c) then b else (pred a))) (if (let e = (pred 1) in (if 0 then c else 1)) then (iszero 0) else (if (if (let c = false in 1) then 0 else a) then (succ a) else (let c = (\ c : C . b) in (if b then true else true)))))
(((iszero a) (succ (b 0))) (pred (\ a : (B -> Nat) . (succ true))))
(succ (pred (if (c 1) then (\ b : (B -> B) . (iszero b)) else ((iszero false) (let e = c in c)))))
(succ (iszero (iszero (if 2 then b else 2))))
(iszero ((let d = a in (succ 0)) ((succ (iszero false)) (if c then false else 1))))
(let e = ((pred b) (pred 2)) in (if (iszero true) then (succ true) else (if 2 then true else 2)))
(iszero ((let e = (iszero a) in (iszero c)) ((\ a : Bool . c) (\ e : A . false))))
((iszero (0 c)) (if ((succ (iszero 0)) (\ a : B . false)) then (pred (iszero 0)) else (\ a : (A -> B) . (a 2))))
((let c = (if (pred false) then (pred c) else (\ c : Bool . (let a = c in false))) in (if true then (\ d : C . true) else (b c))) (let e = ((succ (\ e : C . false)) ((iszero c) true)) in (succ (pred 1))))
(if (\ e : (Bool -> Nat) . (iszero a)) then (succ (iszero false)) else (let b = (pred (if a then 1 else a)) in (false (pred b))))
(if (iszero (\ a : (A -> B) . (succ (iszero b)))) then (\ c : ((Nat -> C) -> (C -> B)) . (b (iszero true))) else (if (if c then b else 0) then (iszero (\ e : B . true)) else (pred (pred false))))
(pred (iszero (iszero (if false then false else 1))))
(let d = (let a = (if (pred false) then (iszero 2) else false) in (\ a : Bool . false)) in (pred (let e = (succ true) in (if 1 then b else c))))
(iszero (iszero (succ a)))
((let e = (let a = (b b) in (pred b)) in (succ (iszero true))) (succ (if 1 then c else b)))
(succ (pred (let c = (succ b) in (iszero 1))))
(succ (succ (if (let e = a in c) then a else c)))
((let c = (pred false) in (pred 0)) (if (pred (if false then (succ a) else (iszero 0))) then (1 false) else (if false then true else true)))
((let b = ((iszero 0) (pred 2)) in (\ a : (Bool -> (Bool -> A)) . (succ (if 0 then c else a)))) (if (iszero (iszero b)) then (succ b) else (succ 2)))
(succ (let e = (succ (if false then a else 2)) in ((let c = c in 0) true)))
(\ d : (((B -> A) -> (Bool -> B)) -> (B -> Bool)) . (iszero (if (iszero 0) then (let e = b in 1) else (let d = b in 0))))
(\ d : (((Nat -> (A -> Bool)) -> (Nat -> Bool)) -> (C -> (Bool -> A))) . (if (\ b : C . false) then (if (2 b) then (\ b : A . 0) else false) else (a 2)))
(pred (if (let b = 2 in true) then (iszero (succ 0)) else (pred a)))
(succ (succ (iszero b)))
(let e = (let b = (pred (1 true)) in (iszero (let a = 2 in 0))) in (pred (pred (\ d : A . c))))
(let c = ((\ b : ((B -> B) -> A) . (let e = (\ d : C . true) in (if a then false else a))) (succ (succ false))) in (iszero (succ 0)))
(\ a : (((A -> C) -> (A -> Nat)) -> (((Nat -> B) -> (C -> Nat)) -> ((B -> Nat) -> Nat))) . (let c = (succ b) in (\ a : B . 0)))
(\ c : ((C -> B) -> (Nat -> B)) . (\ b : (C -> Nat) . (if false then 1 else true)))
((iszero (iszero (iszero 2))) (\ c : (C -> (A -> Bool)) . (pred (let c = 0 in 2))))
(\ d : ((Nat -> A) -> (Nat -> B)) . (iszero (pred c)))
(succ (succ (let a = a in (let c = 2 in false))))
(succ ((let b = 1 in (\ b : Nat . true)) (pred b)))
(if (succ (1 2)) then (pred (iszero (b c))) else (let d = (\ c : ((A -> B) -> (Bool -> A)) . (iszero true)) in (pred (succ (pred b)))))
(pred (if (let b = (iszero true) in (pred 2)) then (if (\ c : Nat . a) then (pred b) else (let c = b in 0)) else (pred (succ (if 1 then true else true)))))
(if (iszero (succ (\ d : A . c))) then (iszero (\ c : (Nat -> A) . (pred b))) else (\ b : (A -> Bool) . (iszero (pred c))))
(iszero (\ c : (Nat -> (Nat -> Nat)) . (iszero (2 a))))
(pred (succ (let c = 1 in false)))
((iszero (succ b)) (((pred false) (0 b)) (pred (iszero (pred false)))))
(let c = ((\ b : A . true) (false (succ a))) in (\ e : (((Nat -> Bool) -> C) -> (Nat -> Nat)) . ((succ a) (pred 1))))
(if (pred (succ (pred 1))) then (pred (if false then true else 2)) else ((pred (succ false)) (let e = 1 in 1)))
(succ (succ ((iszero false) (\ a : B . false))))
(iszero (pred ((\ a : Bool . false) c)))
(succ (let b = (\ c : (B -> Bool) . (0 false)) in ((let d = (c true) in b) (\ d : A . b))))
(pred (let a = (succ c) in (iszero (iszero 1))))
(\ e : ((((Bool -> Nat) -> (Bool -> Nat)) -> (C -> C)) -> ((Bool -> (B -> B)) -> (B -> Bool))) . (pred (let e = (0 true) in (pred a))))
(\ e : ((A -> C) -> (Nat -> Bool)) . ((iszero (succ b)) (iszero (pred (b 0)))))
(let e = (pred (let d = 2 in c)) in (iszero (let a = 2 in 0)))
((iszero (b (succ true))) (\ b : (B -> C) . (let d = a in 0)))
(pred (succ (let a = b in 2)))
(succ (succ (if (let b = 0 in true) then (let e = (succ b) in (let e = 0 in c)) else (succ a))))
(iszero (\ c : ((Bool -> Nat) -> Bool) . (\ c : (Bool -> C) . (a 1))))
((if (iszero (let e = 2 in true)) then (iszero b) else (pred (if false then c else true))) (if (succ a) then (let d = (iszero a) in (iszero 1)) else (\ b : (A -> A) . (\ c : (B -> A) . (succ c)))))
(let e = ((let d = 1 in a) (\ e : (B -> Bool) . (if c then b else true))) in (\ c : (B -> A) . (if 0 then c else 0)))
(let b = (\ d : (B -> A) . (if 1 then true else b)) in (pred (\ e : C . b)))
(\ e : ((B -> A) -> (B -> (A -> A))) . (let c = (succ false) in (succ a)))
(let a = (iszero (let a = 2 in 2)) in ((pred b) (if b then false else 2)))
((succ ((let b = b in true) (if b then 0 else b))) (iszero (pred (iszero false))))
(succ ((pred false) (if (succ b) then b else a)))
(iszero (iszero (iszero (succ 1))))
((succ (let e = false in (succ 1))) (succ (pred (iszero a))))
((succ (iszero 0)) (if (succ 0) then (succ true) else (iszero false)))
(pred ((iszero c) (succ (\ d : C . 0))))
(succ (let d = (let e = c in 1) in (\ d : Nat . c)))
(iszero (pred (iszero (\ c : (C -> Bool) . (\ c : Bool . 2)))))
((let a = (pred (pred c)) in (succ 0)) (succ (let e = (succ (let a = b in false)) in (succ 1))))
(iszero (pred (pred a)))
(pred (succ (if (if (\ c : Nat . c) then (iszero false) else c) then (let b = c in true) else (let a = 0 in (let a = false in a)))))
(succ ((if (iszero 1) then (0 1) else (pred 2)) (pred a)))
(let c = ((if 2 then (b false) else (iszero c)) (iszero (if (\ b : C . 1) then true else 1))) in (let a = (succ 2) in (if (\ b : B . 2) then (iszero 1) else c)))
(if (let d = (let a = 1 in 2) in (iszero c)) then (succ (\ c : A . b)) else (succ (if (if c then false else 1) then (succ 1) else (let b = (let b = 0 in 2) in (iszero c)))))
(\ c : (((Bool -> (C -> Nat)) -> (B -> A)) -> ((B -> (C -> Nat)) -> (C -> B))) . ((iszero a) (\ e : Nat . false)))
(let b = (let d = (\ d : C . 0) in (if c then true else 2)) in (if (succ (2 1)) then (let d = b in 2) else (iszero (succ c))))
(succ ((let a = b in 1) (succ b)))
(iszero (if (\ a : Nat . 2) then (\ c : (Bool -> A) . (let a = (true b) in (if a then 0 else false))) else (if (let e = (a true) in (let d = true in 2)) then (let a = c in a) else (false 0))))
(pred (let c = (succ (let e = a in a)) in (if (\ e : C . 1) then 1 else (if 0 then true else false))))
(pred (iszero (let e = a in (pred true))))
(if (pred (a true)) then (pred (iszero (iszero (0 2)))) else (pred (if (succ b) then (iszero true) else (\ b : Nat . 0))))
(let b = ((0 c) (pred 0)) in ((iszero (iszero a)) (let d = (succ a) in (if false then c else false))))
(if (if (succ (pred c)) then (\ b : (B -> Bool) . (\ a : C . false)) else (if (a (let c = c in b)) then (let e = false in b) else (iszero 2))) then (let e = (let b = (c b) in (let b = true in 2)) in (iszero (\ d : C . 0))) else (succ (iszero false)))
(\ a : ((((B -> Bool) -> (B -> A)) -> (Nat -> (A -> C))) -> ((A -> Nat) -> (B -> B))) . (if (\ d : Bool . a) then (iszero 1) else (succ true)))
(\ d : (((C -> A) -> ((Bool -> B) -> (Nat -> A))) -> (Bool -> (B -> Nat))) . (\ b : ((A -> Bool) -> (C -> A)) . ((2 a) (if a then b else false))))
(if (succ (iszero (\ a : (A -> Nat) . false))) then ((iszero 0) (if c then 2 else 1)) else (pred (false c)))
(\ d : (((C -> A) -> ((C -> Bool) -> (B -> Nat))) -> ((B -> Bool) -> (Nat -> A))) . (succ (pred (pred a))))
((if ((if 1 then a else c) (pred false)) then (let a = true in false) else (\ c : Nat . 1)) (let a = ((iszero (\ d : Bool . 2)) (pred 2)) in (pred false)))
(let a = (if (pred 2) then (iszero 2) else (iszero 2)) in (let a = (if (succ c) then (iszero 2) else 1) in (let a = (succ 0) in (let b = b in (if 0 then true else a)))))
(let d = ((iszero (\ b : (C -> C) . (if a then c else c))) ((pred a) (iszero 2))) in (succ (pred 1)))
(pred (\ e : (A -> C) . (succ 1)))
(pred (pred (let e = (succ 2) in false)))
(succ (\ c : ((Nat -> C) -> (Nat -> Bool)) . (\ b : A . a)))
(if (\ d : ((Bool -> B) -> (Bool -> Nat)) . (if true then false else true)) then (\ b : (C -> B) . (let e = (pred false) in (pred a))) else (succ (let c = (iszero b) in 1)))
(pred (iszero (iszero (succ 2))))
(succ (pred (let a = (pred a) in (succ 2))))
(iszero (((if 0 then c else 0) (iszero true)) (iszero b)))
(pred (let c = (succ (iszero 0)) in (succ (iszero b))))
(iszero (let b = (let a = b in a) in (iszero a)))
(if (succ (pred (succ a))) then (if (c 2) then (iszero (if 1 then b else 2)) else (iszero 0)) else (let e = (\ a : B . 0) in (pred false)))
(let d = (let a = (\ b : B . (false false)) in (iszero a)) in (pred (if (\ a : B . c) then true else (if a then true else c))))
(if (let b = (false (pred c)) in (pred (b c))) then (let e = (if 0 then (if 0 then 0 else b) else a) in (\ a : A . false)) else (pred (0 false)))
(succ (\ a : (((C -> Nat) -> (Bool -> C)) -> (Nat -> Nat)) . ((let c = 1 in (pred c)) (iszero false))))
(succ (succ (succ b)))
(if (pred (1 (let d = 1 in 2))) then (succ (let a = b in 0)) else (iszero (pred (succ b))))
(pred (if (if (let d = (if false then c else 1) in (iszero 0)) then (succ true) else (2 1)) then (let d = (iszero true) in (iszero b)) else (if (\ c : (C -> B) . (let e = c in b)) then (iszero c) else (if 0 then 0 else a))))
(iszero (if (iszero 0) then (pred 0) else (pred (pred b))))
(if (if ((if b then c else c) (succ 0)) then (if (pred 0) then (iszero a) else (if 1 then (let a = 2 in 1) else (iszero false))) else (iszero (let e = b in 0))) then (succ (iszero 1)) else (let c = (true (if false then b else false)) in ((\ e : B . false) (pred 2))))
((pred (iszero a)) ((if b then (\ c : Nat . 0) else (iszero 0)) (succ c)))
(succ (let e = (let b = (let c = (succ c) in (a 0)) in (let c = b in 0)) in (pred (if 2 then true else b))))
((let e = (pred b) in (2 b)) (iszero (if a then 1 else (\ e : B . true))))
(pred (succ (succ (\ e : Nat . c))))
(\ c : ((Nat -> (B -> Nat)) -> ((Bool -> A) -> ((C -> Nat) -> (Bool -> Nat)))) . (pred (false (iszero c))))
(iszero (let a = (iszero (succ 0)) in (pred (pred 1))))
(iszero (iszero (if (if 2 then c else 2) then (if (if true then a else 0) then (a 1) else a) else (iszero 2))))
(let b = (\ a : ((C -> A) -> (Bool -> A)) . (iszero (if b then c else true))) in (iszero (if b then (pred 1) else (let a = false in 2))))
(\ a : (((C -> A) -> C) -> (C -> C)) . (iszero (if (b 1) then (pred b) else c)))
(let b = (\ c : (B -> Bool) . (2 false)) in (if (succ 0) then (\ c : Nat . (let a = a in false)) else (b a)))
(let c = (let e = (pred 0) in (if (\ c : Bool . 0) then 1 else (true 0))) in (pred ((succ 2) (pred 2))))
(\ b : ((C -> A) -> (A -> C)) . (iszero (iszero 2)))
(\ e : (((A -> Bool) -> (Bool -> Bool)) -> (Nat -> (Nat -> Bool))) . (let a = (iszero (iszero 1)) in (if (0 2) then c else (iszero true))))
(iszero (\ c : (B -> A) . (let b = (iszero a) in (\ b : Nat . a))))
(let d = (iszero (succ c)) in (pred (succ (succ 2))))
(pred (pred (pred false)))
(let a = (succ (iszero (let b = 0 in false))) in (if (0 (\ a : B . 2)) then (succ (if c then false else c)) else (iszero (1 0))))
(let e = (iszero (iszero 1)) in (pred (iszero (\ e : Bool . true))))
(iszero (let b = (if true then true else 2) in (\ e : C . c)))
(if ((iszero (pred a)) (let a = c in c)) then (if (succ true) then (let e = (pred (iszero 1)) in (if (succ false) then a else 2)) else (if (succ 0) then (succ a) else (iszero 1))) else (succ (pred 2)))
(let b = (\ b : ((C -> B) -> (B -> A)) . (\ b : A . (succ false))) in (\ a : (C -> A) . (\ c : Bool . 0)))
(succ (if (if (if a then 1 else true) then (pred c) else (let e = c in false)) then (\ e : (C -> C) . b) else (iszero false)))
((\ c : ((C -> B) -> (Nat -> Bool)) . (succ (pred 0))) ((let b = (2 a) in (iszero false)) ((\ a : Nat . b) (succ 2))))
(let b = (if (let d = a in 0) then (succ (\ e : C . a)) else (false 2)) in (succ (let c = a in (succ 2))))
(\ a : (((Bool -> A) -> B) -> (Bool -> B)) . (\ c : ((A -> Bool) -> (A -> Bool)) . (false (pred 0))))
(iszero (pred (\ a : C . (\ d : C . false))))
(pred (iszero (\ d : (C -> B) . (if false then true else 2))))
(pred ((iszero (c c)) (let e = (let c = b in (if true then 0 else true)) in (false b))))
(iszero (\ a : ((C -> A) -> (Nat -> B)) . (b 1)))
(let a = (if (succ (pred 2)) then (\ e : ((C -> A) -> (A -> B)) . (a true)) else (pred (succ 2))) in (if (if (succ 2) then (succ 1) else ((pred a) (if false then c else 2))) then (if (iszero a) then b else a) else (succ (\ a : (C -> B) . (\ a : A . 0)))))
(pred (succ (let b = (if 0 then 1 else 0) in c)))
(pred (iszero (let a = (pred true) in (let b = a in a))))
(pred (iszero (\ c : Bool . (pred 1))))
((iszero (if (iszero 1) then false else false)) (let c = (pred (iszero false)) in ((let c = false in 0) (pred a))))
(let c = (pred (pred (b c))) in (if (true true) then (c false) else (if (if b then true else c) then (iszero 1) else a)))
(iszero (if (iszero (pred (iszero c))) then (iszero (2 a)) else (true (if false then c else a))))
(if (\ d : (B -> A) . (\ c : (B -> B) . (let c = 0 in false))) then ((if (if a then a else 2) then (if true then b else a) else (iszero c)) (iszero (succ a))) else (let b = (iszero (b c)) in ((succ true) 1)))
(let b = (let a = (iszero (false c)) in (let a = false in 2)) in (iszero (iszero c)))
(pred (if (iszero 2) then (let d = (if b then 0 else b) in (succ c)) else (pred b)))
(iszero (let e = ((true a) false) in (if (pred 0) then (\ d : A . false) else a)))
(pred (\ a : (C -> Bool) . (let d = c in (let b = false in b))))
(iszero (let e = (pred c) in (\ e : (C -> B) . (\ b : A . true))))
((if (0 2) then (iszero true) else (\ c : A . true)) (\ c : ((B -> A) -> (C -> Nat)) . (iszero (if false then 1 else false))))
((let d = ((succ (pred true)) (let e = c in 2)) in (\ c : (A -> A) . (0 0))) (\ a : (Nat -> Nat) . (succ 1)))
(pred (if (pred (\ d : Nat . 2)) then ((iszero c) (succ (let e = c in 2))) else (\ e : (Nat -> B) . (succ c))))
(pred (succ (iszero (succ b))))
(succ ((\ c : (C -> Nat) . (pred 2)) (pred (0 0))))
(iszero (pred (let c = (\ e : (B -> A) . (0 c)) in (if (b true) then a else (let e = true in b)))))
(\ e : ((((C -> B) -> C) -> (C -> C)) -> ((Nat -> C) -> ((C -> B) -> Bool))) . (pred (\ e : Nat . 1)))
(succ (if (\ c : B . 2) then (pred false) else (iszero a)))
(\ d : (((Nat -> A) -> (C -> C)) -> (A -> Bool)) . (succ (\ d : (Nat -> A) . (\ c : B . 1))))
(iszero (let d = (let a = (iszero 2) in (pred a)) in (\ d : (B -> C) . (if 1 then false else 1))))
(\ c : ((B -> Bool) -> (C -> C)) . (if (if 0 then (let a = b in c) else 0) then ((pred 1) b) else ((iszero c) (iszero b))))
(let e = (iszero (c (\ d : A . 0))) in (iszero (\ c : (C -> C) . (let d = false in c))))
(iszero (iszero (if (\ d : A . false) then 0 else 0)))
(\ a : (((C -> A) -> (Bool -> A)) -> (Nat -> Nat)) . (let c = (if a then false else b) in (let e = (let e = 1 in 0) in (succ (pred b)))))
((if (pred 2) then (\ d : Bool . (iszero a)) else (\ c : C . 0)) (pred ((\ d : Bool . 2) ((succ 1) true))))
(pred (if (succ false) then (iszero 1) else (let c = c in c)))
(\ e : (((C -> Nat) -> ((A -> C) -> (B -> A))) -> ((A -> B) -> (Nat -> (B -> Nat)))) . (if (pred false) then ((2 false) (succ (if 1 then 1 else b))) else (pred (iszero true))))
(succ (if (b true) then (1 b) else (c false)))
(iszero (if (let e = (if true then (b 0) else false) in (iszero a)) then (if (if true then (let a = 2 in false) else (pred false)) then (let d = false in 2) else (if false then true else b)) else (let b = 2 in true)))
(pred (succ ((iszero 0) (if 0 then c else false))))
(let c = (if (\ e : (C -> C) . (\ d : Nat . 0)) then (iszero 0) else (succ 1)) in (iszero (succ true)))
(succ (if (iszero (iszero a)) then (\ e : Nat . c) else (succ 1)))
(iszero (succ (if (succ a) then c else (succ c))))
(iszero (if (let d = c in (let b = 1 in 1)) then (succ 1) else (false true)))
(pred (succ (iszero b)))
(iszero (iszero (succ (let c = a in a))))
(pred (pred (\ a : (C -> Bool) . (iszero 2))))
(iszero (\ c : ((Nat -> B) -> (Nat -> C)) . (if (iszero true) then (0 b) else 2)))
(if (succ (pred false)) then (if (\ c : Nat . a) then (\ a : B . false) else (\ d : C . false)) else (let c = (succ 2) in (succ 0)))
(pred (if (pred 1) then (pred a) else (pred a)))
(let d = (succ (iszero true)) in (\ c : ((C -> C) -> ((Bool -> C) -> (C -> A))) . (succ (let c = (\ d : B . a) in 2))))
(if (let d = (\ c : B . 2) in (succ c)) then (if (if (let c = 0 in 0) then (\ e : (A -> Nat) . b) else (if a then a else a)) then (let d = (let d = (let e = 0 in true) in b) in (let a = a in false)) else (if (\ e : Bool . false) then 1 else (succ a))) else (succ (if (0 b) then (succ 2) else b)))
(let b = (let c = (iszero (if 0 then (succ b) else true)) in (let d = (succ c) in ((let a = a in c) true))) in (if (iszero (if 0 then 0 else 2)) then (pred 1) else (iszero b)))
((succ (succ b)) (pred (\ e : C . false)))
((if (pred true) then ((true c) (pred b)) else (pred true)) (if (1 b) then (true 2) else (let d = c in 1)))
((if (if (b 2) then b else c) then (\ c : B . (iszero false)) else (pred c)) (succ (1 false)))
((pred (pred false)) (succ (let b = 1 in 1)))
((\ e : ((C -> Bool) -> (Nat -> Nat)) . (let c = (succ 0) in (iszero b))) (\ d : (B -> (A -> Nat)) . ((if a then true else 1) (let e = (pred 0) in true))))
(if (if (pred true) then (iszero true) else (pred (\ e : (Bool -> Bool) . (1 b)))) then (iszero (succ c)) else (\ c : (B -> C) . (iszero c)))
(pred (let d = (if (true true) then (\ e : Bool . 1) else (\ d : C . b)) in (pred 1)))
(pred (pred (pred 2)))
(succ (iszero (let d = (let a = (\ c : B . c) in (c 2)) in (if 2 then a else 2))))
(iszero (iszero (let e = (iszero 0) in (pred 0))))
((if (succ (if 0 then 2 else b)) then (if (2 2) then (pred (iszero 1)) else (if a then c else false)) else (let b = (false (pred a)) in (\ a : B . (let d = true in c)))) ((iszero false) (if (b 0) then (let b = (pred false) in b) else (let c = 2 in c))))
(succ ((let a = 1 in 0) (iszero a)))
(pred (let a = (succ (iszero c)) in (if 0 then 0 else (pred 1))))
(pred (if (pred (if 2 then 0 else 2)) then (\ e : (B -> Bool) . (true c)) else (if (if 1 then (iszero false) else b) then (succ 1) else (succ true))))
(pred (\ e : ((Bool -> Nat) -> Nat) . (succ (succ b))))
(if (let c = (pred ((if b then c else true) 1)) in (iszero (1 c))) then (iszero (iszero (succ (iszero true)))) else (iszero ((let e = (false a) in 0) (let a = true in (\ a : C . false)))))
((succ (iszero c)) (pred (\ c : A . (succ true))))
(\ e : (((B -> Nat) -> ((C -> Bool) -> A)) -> (A -> A)) . (succ (if 2 then (iszero b) else a)))
(let e = ((if false then c else false) (\ a : (C -> Nat) . 1)) in (iszero (succ (pred a))))
(let e = (iszero (succ (2 0))) in ((\ d : A . a) (\ a : C . (pred 1))))
(let c = (if (0 (0 false)) then (iszero 0) else (succ true)) in (pred (\ a : (A -> A) . c)))
(iszero (if (let c = (let e = 2 in true) in (let a = b in 2)) then (iszero 0) else (let a = (c b) in (if true then c else c))))
(\ b : ((Bool -> (A -> B)) -> ((C -> C) -> Nat)) . (\ d : (Nat -> B) . (pred 1)))
(iszero (let e = (0 c) in (let a = b in b)))
(iszero (iszero (if a then 2 else a)))
(\ b : (((A -> A) -> A) -> (A -> C)) . ((let c = 0 in (if true then true else a)) (\ b : (Nat -> B) . (1 false))))
(let b = (if (let d = a in (c true)) then (succ true) else (iszero c)) in (if (if (\ b : B . 1) then a else c) then (let b = true in a) else (\ a : B . (pred a))))
(succ (succ (let a = (let d = 0 in true) in a)))
((\ d : ((Bool -> Bool) -> ((Bool -> B) -> A)) . ((\ a : (B -> Bool) . (let d = true in c)) (true b))) (let e = ((iszero true) a) in (succ a)))
(\ a : ((((B -> Bool) -> (C -> Nat)) -> ((A -> A) -> Bool)) -> ((A -> A) -> (B -> Nat))) . (if (succ c) then (c true) else (pred 1)))
(let d = (if (let b = (a b) in (succ true)) then (iszero (pred false)) else (\ b : (C -> B) . c)) in (pred (pred c)))
(\ e : (((B -> C) -> (B -> B)) -> ((Nat -> A) -> (C -> C))) . (let b = (iszero (succ (if true then 2 else a))) in (if b then true else (\ d : C . 0))))
(let b = ((pred 0) (let b = (iszero (if 2 then c else 1)) in (\ a : A . (if 2 then false else c)))) in (pred (let c = (let c = c in 1) in (pred a))))
(iszero (iszero (iszero (iszero (if c then a else 0)))))
(iszero ((2 (true true)) (\ d : (C -> (C -> Nat)) . (if (iszero 1) then (pred 2) else false))))
(succ ((let c = (let e = c in true) in (let d = 2 in false)) (if (pred b) then 1 else (iszero 2))))
(succ (pred (succ 0)))
(pred (succ ((let a = 2 in 1) (pred 2))))
(succ (if (if (\ c : A . c) then 2 else (let d = 0 in b)) then (succ (pred (if c then 0 else a))) else (if 0 then a else true)))
(succ (succ (succ (succ false))))
(pred ((let a = false in 1) (let b = (if (succ a) then 0 else 2) in (iszero true))))
(\ e : ((Nat -> A) -> (B -> Nat)) . ((pred c) (let d = true in 1)))
(iszero (succ (let c = (let c = 2 in true) in c)))
(pred (iszero (\ a : (C -> B) . (let c = (\ b : C . c) in true))))
(pred (pred (succ 2)))
(succ (if ((if false then 2 else 0) b) then (\ d : Nat . true) else (pred c)))
(if (pred (\ e : (A -> Nat) . (if false then a else false))) then ((let e = 2 in 2) (if 0 then (succ 2) else 2)) else (succ (pred (\ d : B . 0))))
(succ (pred (succ c)))
((\ b : ((Nat -> B) -> A) . (iszero a)) (succ ((iszero false) 0)))
(pred (pred (\ d : C . 1)))
(pred (iszero (iszero (false true))))
(pred (let a = (a a) in (iszero false)))
((if ((iszero true) 2) then (pred (pred a)) else (iszero (succ c))) (iszero (if false then a else (pred a))))
(pred (iszero (if (iszero 0) then b else (iszero a))))
(\ c : ((Nat -> C) -> (Nat -> A)) . (let e = (pred (if a then (iszero true) else 0)) in (succ (if c then b else a))))
(((\ c : (Bool -> C) . 0) (if (pred 2) then 2 else (c a))) (\ d : (C -> Bool) . (\ c : (A -> A) . (\ c : C . 1))))
(pred (pred (let d = 1 in (pred 0))))
(if (let c = (if (\ b : A . a) then (pred false) else (pred (iszero c))) in (if (iszero false) then (succ false) else (\ b : (B -> Bool) . 2))) then (iszero (if (if c then 0 else false) then (pred c) else 0)) else ((pred 0) ((\ b : Nat . true) b)))
(succ (iszero (succ (iszero true))))
((\ b : ((Bool -> C) -> A) . ((let d = 0 in 2) (pred (pred c)))) ((iszero b) (succ false)))
(pred (let d = ((pred b) (let c = 2 in 2)) in (\ a : B . (pred c))))
(let a = (let c = (if (\ b : C . b) then b else (succ b)) in (\ d : Nat . (if 1 then true else false))) in (pred (succ (true b))))
((succ (iszero a)) (let b = (pred false) in (if (if 1 then a else 2) then true else (let c = b in 2))))
(if (\ e : (A -> B) . (if 1 then 0 else (\ e : Bool . false))) then (\ c : ((Nat -> B) -> (Bool -> A)) . (\ c : (Bool -> B) . (\ c : Nat . b))) else (if (\ e : (Bool -> A) . (let c = c in a)) then (b false) else (succ true)))
(let e = ((iszero 1) (\ b : Bool . 2)) in (iszero (succ (if 1 then 0 else c))))
(iszero (\ e : ((B -> B) -> (C -> A)) . ((succ false) (2 2))))
(if (iszero (iszero a)) then ((succ b) (let b = c in c)) else (\ e : (B -> Nat) . (\ e : (B -> Nat) . 1)))
((\ d : ((A -> A) -> A) . (false (\ e : B . 1))) (let d = (if true then 0 else false) in (\ e : (Bool -> Nat) . a)))
(iszero (if (\ e : (A -> A) . 1) then (succ false) else ((\ e : C . 0) false)))
(pred (if (pred (let b = a in 1)) then (\ e : B . a) else (let e = 2 in a)))
(succ (iszero (c true)))
(\ d : ((Nat -> (Nat -> C)) -> (B -> (B -> B))) . (iszero (\ c : (B -> Bool) . (iszero 2))))
(succ (\ c : ((Bool -> Bool) -> (A -> Bool)) . (\ e : C . 0)))
(\ b : (((Nat -> Nat) -> (Nat -> C)) -> (C -> C)) . (pred (succ (a (succ true)))))
(\ d : ((Bool -> A) -> (Bool -> (Nat -> Nat))) . (iszero (\ b : A . 0)))
(if (succ (iszero (\ a : C . (pred c)))) then (let d = (if (\ e : A . a) then (pred c) else (succ 1)) in (if (\ c : Bool . 1) then (if false then true else 2) else b)) else ((\ e : (Nat -> Nat) . (iszero 2)) (pred a)))
(pred (let d = (pred false) in (pred (c b))))
(\ b : (((B -> C) -> (Nat -> Bool)) -> ((B -> C) -> (A -> Bool))) . (\ a : (Nat -> (C -> Bool)) . (let c = 1 in (pred 1))))
(pred (succ ((let e = false in 1) b)))
(\ e : ((Nat -> B) -> ((B -> Bool) -> (B -> A))) . (\ a : ((Nat -> C) -> C) . (\ c : A . c)))
(iszero (\ b : (((Bool -> Nat) -> B) -> (B -> Bool)) . (iszero (let d = 0 in false))))
(let b = (pred (\ d : Bool . 0)) in ((\ a : (Bool -> C) . c) (b (\ c : Bool . 2))))
(iszero (iszero (iszero b)))
(succ (\ b : ((Nat -> A) -> C) . (iszero (succ 0))))
(if (if ((c 1) (let a = 1 in 0)) then (let b = (iszero a) in (let c = a in 1)) else (iszero (iszero 1))) then (pred (let b = 2 in a)) else (let a = (succ c) in (a (succ true))))
(iszero (let a = (let e = (if (pred 2) then (false a) else (succ 2)) in (iszero (\ e : Bool . b))) in (iszero (iszero b))))
(succ (pred (iszero (let b = (pred b) in 1))))
(if ((succ 0) (1 true)) then (\ b : ((Bool -> B) -> ((Bool -> Nat) -> Bool)) . (let b = (c 1) in (let b = false in b))) else (pred (succ (succ 1))))
(let c = (if (let b = (b 1) in (if c then false else 0)) then (if (false (pred b)) then (let e = 0 in false) else ((succ c) a)) else (if (false 1) then (pred (pred 1)) else (pred 0))) in (if ((succ b) 2) then (\ b : B . (succ a)) else (\ a : B . 2)))
(\ d : ((Bool -> B) -> (C -> (A -> Bool))) . (succ (pred 0)))
(let e = (pred (let d = false in (succ false))) in (succ (let e = 0 in (succ 0))))
(iszero (let d = (\ c : Bool . (iszero 2)) in (if b then (iszero 2) else (pred 2))))
(succ ((iszero (a b)) (succ a)))
(pred (if (succ (iszero c)) then (a c) else (pred b)))
((iszero (let a = b in (pred 0))) (pred (\ b : A . c)))
(if (pred (let b = (if false then false else true) in (iszero true))) then ((iszero a) (\ e : Nat . 1)) else (if (succ a) then (pred b) else (iszero b)))
(\ b : (((B -> Nat) -> (A -> A)) -> ((A -> Bool) -> Bool)) . (\ a : ((B -> B) -> (B -> B)) . (let d = (let b = 0 in b) in (iszero true))))
(if (pred (let c = true in false)) then (pred (succ 2)) else ((if b then c else 0) (if (iszero true) then true else (if c then 2 else 2))))
(\ b : ((B -> (C -> B)) -> (Bool -> Bool)) . (let b = (succ (b 1)) in (\ a : ((C -> Bool) -> (Nat -> C)) . (let a = true in (iszero false)))))
(succ (\ e : (Bool -> B) . (let a = (let a = c in 1) in (succ 0))))
(\ d : (((A -> A) -> Bool) -> (A -> Nat)) . ((true a) (if b then b else true)))
(let a = (if (pred true) then (\ c : (A -> Bool) . 1) else (succ (pred true))) in (succ (b false)))
(if (let d = (if c then false else 1) in (c 0)) then (succ (succ 1)) else (pred (pred (succ true))))
((if (iszero b) then (iszero (pred 0)) else (pred a)) (let b = (pred a) in (let d = 0 in c)))
(iszero (pred (let c = (c 2) in (\ d : Bool . 0))))
(iszero (iszero (let a = true in b)))
((iszero (\ a : Bool . true)) (iszero (pred (\ c : Bool . 2))))
((if (let e = c in a) then (succ (succ c)) else (pred 0)) (let a = (iszero c) in (1 (\ d : C . b))))
((iszero (pred 1)) (if (\ e : (Nat -> (B -> Bool)) . (if (\ a : Bool . 1) then (succ c) else c)) then (\ d : (C -> Bool) . (\ a : B . 0)) else (if (succ b) then (if 1 then b else 2) else (\ a : B . a))))
(pred (if (let a = (succ true) in (pred 0)) then (false false) else (let a = (iszero true) in (if b then 2 else c))))
(iszero (\ d : (C -> C) . (let a = (iszero 1) in (let a = 1 in false))))
(pred (let d = (\ b : (A -> (Bool -> Nat)) . (if c then true else 2)) in (succ (\ d : (C -> Nat) . (iszero b)))))
(succ (pred (\ a : B . 1)))
(pred (let d = (pred 1) in (\ a : C . true)))
(iszero (((pred b) (pred 0)) (let b = (if (if 0 then c else c) then (pred true) else 2) in (b (iszero b)))))
(pred (if (\ d : (A -> B) . (iszero 1)) then (let e = a in 0) else (let b = (if 2 then (false 0) else (pred true)) in (if c then true else 1))))
(\ a : ((Bool -> (C -> A)) -> (C -> C)) . (let c = (iszero (\ a : C . 0)) in (false 2)))
(pred (iszero (pred 2)))
(succ (let b = (if false then c else 0) in (pred 2)))
(if (if (c (succ false)) then (pred (succ 2)) else (\ c : (Bool -> B) . (pred b))) then (pred (\ e : A . (pred b))) else (\ b : ((C -> Bool) -> (C -> Nat)) . (succ (\ a : B . c))))
(let a = (\ a : (Bool -> Bool) . (iszero (succ b))) in ((\ d : Bool . false) (pred 2)))
((if (succ (pred a)) then (iszero b) else (if 1 then c else 1)) ((let b = (pred a) in 0) (iszero (iszero false))))
((\ a : (C -> (A -> Bool)) . (b 1)) (\ e : (Nat -> C) . (\ d : Bool . 0)))
(if (let c = (\ e : (Nat -> Bool) . (let d = a in (let c = false in true))) in (\ b : (Nat -> B) . (pred false))) then (iszero (pred (succ 2))) else (let c = ((\ e : Bool . true) false) in (if (\ b : C . (if c then 0 else false)) then (let e = 1 in b) else (pred 2))))
((if ((pred 2) 2) then ((true 1) (a false)) else (succ (if b then 1 else 0))) (if (succ a) then (pred 1) else (pred (let a = false in c))))
(iszero (if (if false then true else 1) then (\ e : (A -> Nat) . 0) else (succ 1)))
(succ (pred (succ (\ e : Nat . true))))
(succ (\ d : (B -> A) . (\ e : (Bool -> (C -> A)) . (pred 2))))
(pred (succ (if c then b else 2)))
(succ (iszero (pred (iszero false))))
(iszero (let d = (iszero (true true)) in (if (if c then 0 else false) then (if a then a else true) else a)))
(succ (if (if b then b else 1) then (if 2 then 1 else a) else (iszero (0 true))))
(pred (pred (if 0 then (pred false) else (false false))))
(succ (pred (pred 0)))
(((if 2 then b else (\ b : Bool . a)) (succ a)) (succ (if (iszero b) then (pred 2) else c)))
(iszero (\ b : (Nat -> (A -> A)) . (iszero (iszero c))))
(let a = (pred (if (pred false) then (pred 2) else true)) in (\ d : ((Nat -> Nat) -> ((Bool -> A) -> (Bool -> B))) . (if false then (let d = 2 in false) else 0)))
(if (pred ((if false then 2 else true) a)) then ((succ 0) (if 1 then true else false)) else (pred (iszero (iszero 0))))
(if (\ d : (Nat -> C) . (\ d : (A -> B) . b)) then (iszero (pred a)) else (pred (\ a : ((B -> B) -> A) . (false b))))
(let c = ((let b = 0 in 2) (b (let e = c in 1))) in (iszero (if (if b then c else c) then (let a = false in b) else 0)))
(pred (succ (\ c : Nat . 0)))
(let b = (\ e : ((Nat -> B) -> A) . (iszero 2)) in (iszero (let d = true in 0)))
(iszero (iszero (pred b)))
(succ (let b = (let e = 2 in (let d = 0 in c)) in (iszero (iszero c))))
(\ d : ((B -> (B -> A)) -> ((A -> B) -> (Bool -> C))) . (let c = (succ 1) in (iszero false)))
((pred (succ true)) (iszero (\ a : (Bool -> C) . (succ 2))))
((let a = (succ (pred 0)) in (iszero (true false))) (succ (pred c)))
(\ a : ((Nat -> Nat) -> (C -> C)) . (succ (iszero c)))
(if (let b = ((succ true) (iszero (let b = true in false))) in ((let e = a in a) (succ false))) then ((false true) (iszero 0)) else (let d = (iszero b) in (pred (succ c))))
((let e = (let a = (if (let d = a in c) then b else 2) in (\ b : A . (if c then true else false))) in (let b = false in 2)) (iszero (succ a)))
(pred (iszero (2 2)))
(pred (\ b : (C -> (Nat -> B)) . (succ (iszero (iszero false)))))
(pred (pred (succ (let e = a in b))))
(succ (\ e : (Bool -> Nat) . (\ c : C . 0)))
(pred (if (if (iszero 2) then (b a) else (iszero false)) then (let b = 2 in (\ d : Bool . 0)) else (iszero a)))
(\ d : ((Nat -> (Nat -> Nat)) -> ((Nat -> C) -> (B -> B))) . (let e = (iszero 2) in (let c = a in true)))
((succ (succ a)) (let a = (let d = c in c) in (iszero (false a))))
(if (let a = (\ e : (A -> B) . (\ e : (A -> Nat) . (iszero 2))) in (succ (let e = true in b))) then (\ a : (Bool -> Bool) . (if (\ b : A . true) then b else c)) else (\ a : ((A -> Bool) -> C) . (if true then false else (pred 2))))
(let a = (\ b : ((C -> C) -> (Nat -> C)) . (pred (succ true))) in ((succ c) (if 1 then 1 else 0)))
(\ d : ((Nat -> Nat) -> (B -> A)) . (iszero (\ d : (Bool -> C) . true)))
(succ (if (succ 0) then (iszero 2) else (\ b : (Bool -> C) . (succ c))))
(pred (\ e : ((Bool -> A) -> Bool) . ((0 1) (\ b : C . 2))))
(\ c : ((C -> Nat) -> ((A -> B) -> (C -> A))) . (pred (let b = (succ true) in true)))
(if (pred (if false then c else 1)) then (iszero (pred 2)) else (iszero (b (\ e : Bool . b))))
(succ (pred (let d = 0 in (\ e : B . a))))
(let e = (succ (true a)) in ((if (succ c) then a else (pred 1)) (pred 1)))
(let e = (pred (if 1 then false else c)) in (succ (pred 2)))
(\ e : ((Nat -> (A -> C)) -> ((Bool -> Bool) -> (A -> Bool))) . ((\ c : Nat . false) (succ b)))
(\ b : (((Nat -> Bool) -> B) -> ((B -> (A -> B)) -> (B -> Nat))) . (iszero (\ b : B . c)))
(if (iszero (let e = c in 2)) then (let d = (iszero c) in (\ b : Bool . a)) else (\ e : ((Nat -> C) -> (C -> Bool)) . (pred 1)))
(pred ((pred (if b then false else 2)) (succ a)))
(let e = (iszero (1 true)) in (let a = (if (if (let c = 0 in false) then (if 2 then 2 else false) else true) then (let d = 0 in 1) else (succ false)) in ((iszero true) (let b = 1 in b))))
(succ (pred (iszero 2)))
(pred (\ a : (Bool -> A) . (pred (let d = 2 in false))))
(if (if (succ (succ true)) then (pred 0) else (\ e : (C -> Nat) . c)) then ((pred (succ true)) (succ (0 c))) else (iszero (if true then (succ a) else (succ 2))))
(succ (\ c : (B -> (A -> B)) . (pred (0 false))))
(\ e : (((B -> Bool) -> (Bool -> A)) -> (Bool -> B)) . (let e = (\ b : Bool . true) in (let a = a in (if false then 2 else 2))))
(if (pred (let d = (succ a) in (succ 2))) then (pred (\ c : B . a)) else (\ e : ((C -> C) -> (Nat -> Nat)) . ((iszero 2) true)))
(let d = (let e = (let b = (let d = true in a) in (2 a)) in (1 (if b then c else 1))) in (iszero (\ b : ((C -> Bool) -> B) . (let a = (pred 1) in b))))
(iszero (let a = (pred 2) in (if (pred false) then (let e = b in c) else c)))
(iszero (if (if 1 then 2 else 1) then (succ (\ d : Nat . true)) else (pred (succ 2))))
(iszero (if ((0 a) (succ false)) then (if (pred true) then 1 else (succ false)) else (if (succ 1) then (let d = 0 in 1) else (iszero 1))))
(pred (succ (succ ((true false) 0))))
(if (succ (pred (if (if b then 2 else 2) then (iszero true) else (\ e : A . 1)))) then (succ (pred (if 1 then false else 2))) else (iszero (let e = false in (succ 2))))
(((let c = (\ c : (Bool -> A) . (a 1)) in (succ true)) (iszero (\ c : Nat . false))) (\ e : ((Bool -> A) -> (C -> B)) . (\ c : ((B -> Nat) -> (Bool -> B)) . (if b then false else c))))
(pred (pred (\ b : Bool . (if 2 then a else a))))
(pred (pred (succ (succ 2))))
(\ e : (((B -> A) -> Nat) -> (A -> (B -> C))) . (pred (if (pred 1) then ((pred c) 2) else (let b = false in (succ 2)))))
(iszero (iszero (let a = false in 1)))
(let a = ((\ d : (Nat -> (Bool -> B)) . (iszero 1)) (pred (iszero true))) in (succ (iszero a)))
(let e = (if (iszero (pred 0)) then (let b = (succ 0) in (pred (iszero b))) else (if 1 then (if false then b else false) else (succ 1))) in (iszero (succ 1)))
(pred (let a = (iszero 2) in (iszero b)))
(\ d : (((Nat -> A) -> (Nat -> Bool)) -> ((B -> C) -> (C -> B))) . ((let d = (let b = true in 0) in (\ a : C . c)) (iszero (iszero (let b = a in a)))))
(if (pred (succ (iszero true))) then (pred (succ (b false))) else (pred (if (let c = 1 in 2) then (if 2 then true else b) else (iszero true))))
(let c = ((false false) (succ (iszero (succ b)))) in (pred (let d = (iszero true) in 0)))
(iszero (iszero ((succ 2) (succ true))))
(succ (if (let a = (succ false) in (iszero (pred a))) then (succ (if (pred 0) then 0 else (iszero b))) else (if (let d = (succ 1) in 2) then (iszero 2) else (succ a))))
((if (pred 0) then (if false then a else (pred 1)) else (\ d : C . false)) ((succ (1 (succ b))) (succ (\ d : C . 1))))
(succ (\ d : ((B -> A) -> (B -> B)) . (if (let a = a in a) then c else (succ a))))
(iszero (if (pred (succ c)) then (\ b : (A -> Nat) . (false true)) else (pred (0 2))))
(pred (iszero (succ (iszero true))))
(\ c : ((Bool -> C) -> (C -> C)) . (pred (iszero (let a = a in 0))))
(pred (succ ((1 true) (2 a))))
(if (\ d : ((A -> A) -> A) . (pred 2)) then (pred ((pred false) b)) else (let d = (\ b : (Nat -> Nat) . 1) in (iszero (succ a))))
((pred ((iszero true) (let c = (succ true) in true))) (\ d : (A -> (Nat -> Bool)) . (pred true)))
(pred (iszero (succ a)))
(pred (succ (let b = (let e = false in 2) in (iszero (if 1 then 2 else c)))))
((let a = (pred (iszero false)) in (iszero b)) (pred (\ e : (Nat -> Bool) . b)))
(let a = (if (\ b : (B -> C) . (\ e : A . 2)) then (let e = (let a = true in true) in (let e = false in b)) else (true (pred c))) in (iszero (2 false)))
((\ a : ((B -> B) -> B) . (succ (let c = 0 in 1))) (pred (let e = a in (if c then 1 else true))))
(iszero (pred (iszero c)))
(pred (\ b : (B -> (A -> B)) . (iszero false)))
(succ (if (pred (\ d : B . c)) then (\ d : (Bool -> Bool) . a) else (pred (iszero 1))))
(succ (pred (\ a : C . 1)))
(succ (\ b : (((Bool -> A) -> (A -> Bool)) -> (B -> B)) . (\ c : (A -> (C -> Nat)) . (if b then (iszero b) else (\ c : B . 0)))))
(succ (if (if a then 0 else 1) then (iszero a) else (iszero a)))
(pred (let b = (0 c) in (let e = 1 in c)))
(pred (\ b : ((A -> (A -> C)) -> ((Nat -> Bool) -> (B -> C))) . (succ false)))
(let e = (let a = (\ e : ((C -> Bool) -> (A -> Bool)) . (pred (let b = 2 in false))) in (pred a)) in (if (iszero (\ c : A . true)) then (succ a) else (iszero (let a = true in false))))
(\ b : ((Nat -> (Nat -> B)) -> (C -> (C -> C))) . (pred (iszero true)))
(if (succ (succ (pred b))) then (\ b : (Bool -> B) . (succ (if true then a else 2))) else ((iszero true) ((succ false) b)))
(pred (succ (0 a)))
(let c = (succ (let e = (if false then true else 2) in false)) in (if (\ e : (C -> Nat) . (0 true)) then (\ a : A . false) else (let d = true in 2)))
(if (let e = (\ a : Bool . (iszero b)) in (iszero (succ false))) then (pred (let a = (succ b) in 0)) else (pred (pred true)))
(\ a : (((C -> Nat) -> (B -> A)) -> (Bool -> B)) . (if (let a = c in true) then (succ false) else (let a = a in (\ e : A . true))))
(\ d : ((Bool -> B) -> (A -> (Bool -> Nat))) . (succ (false c)))
(iszero (\ a : (((C -> Nat) -> (C -> Bool)) -> (Nat -> (A -> Bool))) . (let a = (succ a) in (succ (pred false)))))
(succ (if (pred 0) then (let b = true in 1) else (1 1)))
(if (iszero (\ c : (B -> Bool) . (if true then c else true))) then (if (iszero (pred 0)) then (let c = (\ a : Nat . 0) in b) else (if (if b then 2 else true) then (let d = (let e = a in false) in (pred a)) else (succ a))) else (\ e : ((Nat -> A) -> (Bool -> B)) . (iszero a)))
(\ e : ((C -> (C -> B)) -> (A -> A)) . ((pred c) (let a = a in 0)))
(let e = (\ a : ((Nat -> Bool) -> (B -> A)) . (iszero 1)) in (succ ((let d = b in 0) (pred false))))
(iszero (\ a : (A -> A) . ((\ b : A . c) c)))
(\ a : (((Bool -> Nat) -> B) -> ((Bool -> B) -> (C -> Bool))) . (\ a : (Bool -> A) . (let a = (let e = 2 in true) in c)))
(\ c : (((A -> C) -> (Bool -> Bool)) -> ((Nat -> C) -> (A -> (A -> Nat)))) . (if (let c = a in (let d = 0 in true)) then (succ true) else ((pred a) (a a))))
(pred (if (succ (succ a)) then (iszero (let a = false in 1)) else (pred false)))
(succ (iszero (\ d : (C -> (C -> C)) . (if 2 then (if c then 0 else 0) else a))))
(pred (iszero (let a = a in c)))
(if (let b = (if b then 1 else 2) in (if a then 2 else c)) then (iszero (if 1 then a else c)) else (pred (succ 1)))
(if (pred (if b then c else 0)) then (iszero (if (iszero 2) then (iszero false) else (let b = c in (succ b)))) else (if (let b = 2 in (\ e : C . false)) then (let b = (let d = a in 2) in (iszero 1)) else (iszero false)))
(pred (succ (succ a)))
(pred (pred (true a)))
(pred ((succ (pred b)) (\ c : C . (pred b))))
(let b = (succ (pred (succ false))) in (succ (iszero a)))
(pred (if ((let e = 0 in 1) (let c = b in c)) then (iszero (0 b)) else (let a = (pred b) in (let a = false in 1))))
(let a = (\ a : (A -> A) . (pred (succ 1))) in ((if (let e = false in 0) then (let c = 0 in (if c then 1 else 2)) else (let e = 1 in c)) (pred 2)))
(let c = (let b = (\ a : B . 0) in (iszero 0)) in (let d = (iszero 0) in (\ b : (B -> C) . (iszero false))))
(pred (succ (succ 0)))
(if (pred (if (\ d : B . c) then (if 0 then 0 else 2) else (succ 2))) then (if (pred (pred 2)) then (if (\ c : C . true) then true else true) else (if 2 then c else 1)) else (iszero ((\ e : (C -> B) . 0) (2 false))))
(iszero (if (pred (\ e : Nat . true)) then (let c = (0 (b c)) in (succ c)) else (let d = (if 0 then false else false) in (let d = 1 in false))))
(iszero (\ d : ((A -> C) -> (B -> Bool)) . (\ a : (A -> B) . (succ true))))
(iszero (succ (1 b)))
(iszero (iszero (pred false)))
((pred (true false)) (iszero ((\ d : Nat . c) (\ e : Nat . a))))
(pred (\ e : (((Nat -> B) -> (A -> B)) -> ((Nat -> Nat) -> C)) . (iszero false)))
(let c = (if (if (iszero true) then (pred c) else (succ false)) then (if (if 1 then (let c = 1 in 2) else (if true then 1 else 1)) then (let c = b in a) else (\ e : Nat . c)) else (pred (\ d : A . (if a then false else c)))) in (succ (succ c)))
(\ b : (((C -> Bool) -> Bool) -> (A -> B)) . (pred (\ e : Nat . (if 0 then 2 else 0))))
(\ e : (((A -> B) -> C) -> ((Nat -> (Bool -> A)) -> (C -> C))) . (iszero (succ 0)))
(pred (\ e : ((C -> Bool) -> ((Nat -> A) -> (B -> A))) . (pred false)))
(pred (if (if (succ 2) then (pred b) else (pred 0)) then (if false then 0 else 1) else (0 (succ b))))
(\ c : (((B -> C) -> ((Bool -> Nat) -> (Bool -> A))) -> ((C -> (C -> C)) -> (C -> B))) . (iszero (iszero 0)))
((iszero (iszero b)) (succ (succ false)))
(\ d : ((((C -> B) -> (C -> A)) -> (Bool -> B)) -> ((Nat -> B) -> C)) . (\ e : (B -> A) . ((iszero b) (if c then a else 2))))
((iszero (if (pred c) then (if (if true then c else a) then false else (let a = b in true)) else (let b = true in 1))) (pred (iszero false)))
(let c = (iszero (pred (2 false))) in (succ (if (\ c : (A -> B) . (pred false)) then (iszero 2) else (if false then true else false))))
(succ (let c = (iszero (false b)) in (iszero (succ a))))
(succ (if ((let e = (pred 2) in (pred b)) (if 2 then b else (iszero c))) then (\ c : (A -> (Bool -> C)) . (c a)) else ((\ e : Nat . c) (if c then 2 else false))))
(\ c : ((B -> Nat) -> (A -> (B -> Nat))) . ((if 2 then a else 1) (succ a)))
((pred ((c 2) (pred c))) ((let e = (c 2) in false) (pred (iszero b))))
(iszero (\ c : (C -> C) . (\ d : Nat . c)))
(iszero (if (succ 2) then (if b then a else true) else ((let d = 0 in 0) (\ c : Nat . c))))
(iszero (if ((iszero 2) ((2 a) (iszero 2))) then (\ e : (A -> C) . (c a)) else (\ b : C . (iszero false))))
(\ b : ((Bool -> B) -> (A -> C)) . (pred (iszero b)))
(pred (if (iszero (a 0)) then (succ (pred (succ false))) else (let d = (\ d : A . 0) in (b false))))
(\ c : (((B -> Nat) -> (Bool -> A)) -> ((Bool -> B) -> ((Nat -> C) -> Bool))) . ((pred (iszero 1)) (succ true)))
(let c = (succ (let d = (let e = 1 in false) in (pred a))) in ((pred b) (if (a (\ d : Nat . true)) then (\ d : Nat . 1) else (iszero 2))))
((pred (\ d : C . c)) (\ b : ((B -> B) -> (Bool -> B)) . (pred 1)))
(iszero (let c = (succ (succ true)) in (let a = a in true)))
(let c = ((let b = (iszero (c false)) in (iszero c)) ((pred 0) (let e = b in 2))) in (pred (false true)))
(iszero (iszero (\ d : (Nat -> C) . (succ a))))
(pred (pred ((pred a) (if a then (iszero a) else c))))
(pred (let e = (succ (if b then a else 2)) in (\ a : (C -> (B -> B)) . (if true then 1 else false))))
(let a = (\ e : (B -> B) . (succ true)) in ((a true) (pred 2)))
(pred (\ c : (C -> Bool) . (\ d : (A -> C) . b)))
(pred (if (\ d : (B -> Bool) . 0) then (iszero (if 1 then b else 0)) else (succ (pred 2))))
(let e = (let a = (iszero (0 a)) in (succ (succ c))) in (\ c : (A -> A) . (let d = c in 0)))
(let c = (iszero (b 2)) in (iszero (if 0 then c else 1)))
(succ (let b = (let b = (pred true) in 2) in (\ e : (Bool -> B) . (pred 1))))
(((pred (succ 2)) (let e = true in (\ b : Bool . b))) (let d = (iszero true) in (0 1)))
(let d = (iszero (c 0)) in (pred (pred 0)))
(if (\ e : ((A -> C) -> (B -> Nat)) . (let c = (\ b : Bool . b) in (let e = c in 1))) then (let e = (\ a : A . c) in (if 2 then c else 0)) else (let d = (let a = (iszero b) in (if true then a else b)) in (let e = 1 in (if 2 then b else 0))))
(iszero (iszero (succ (if 0 then false else b))))
(succ (pred (succ (0 true))))
(((1 (c 0)) (let c = (let e = (if c then 2 else b) in (c 0)) in (true a))) (((iszero (succ 1)) (pred a)) (iszero (1 (pred 0)))))
((if (succ b) then (let a = a in 1) else (iszero (iszero c))) (let e = (succ true) in (1 c)))
(succ (if ((pred c) 1) then (succ (0 a)) else (pred (pred true))))
(let e = (if (\ c : C . false) then (\ e : (Nat -> Bool) . false) else (pred false)) in (if (\ d : (B -> Nat) . 0) then (iszero c) else ((\ c : A . b) 2)))
(pred ((let c = 1 in 2) (iszero b)))
(\ e : ((A -> Bool) -> (A -> C)) . (\ c : ((Nat -> A) -> (C -> C)) . ((0 1) (iszero false))))
(if ((iszero (succ c)) ((if b then 2 else a) false)) then (if (let d = b in a) then ((pred c) 2) else (2 a)) else (pred (let b = c in (iszero b))))
(pred ((if (iszero (\ d : B . false)) then (pred a) else (succ (iszero a))) ((let c = c in b) (iszero a))))
(iszero (succ (iszero 2)))
(pred (if (iszero (iszero false)) then (pred (pred b)) else (succ (let a = (succ 2) in (let c = c in false)))))
(succ (pred (\ a : (A -> C) . (iszero 2))))
(let d = (succ (iszero (succ 0))) in (let b = (iszero 2) in (succ (\ b : Bool . (true 1)))))
((let c = (if 0 then c else (pred 2)) in (pred (let d = c in 2))) (succ (\ e : C . b)))
(succ (\ e : (Nat -> Bool) . ((\ c : B . 2) a)))
(succ (pred (iszero (\ c : B . true))))
(\ a : ((Nat -> Nat) -> (B -> (Bool -> C))) . (succ (let e = 0 in (pred true))))
(iszero ((pred 1) (if (pred c) then (let a = 2 in c) else (iszero c))))
(if (let a = (\ a : Nat . a) in (iszero true)) then (let a = (let b = (false false) in (let d = 1 in a)) in (let a = (iszero false) in (pred 1))) else (succ (iszero (let d = true in c))))
(if (let a = (succ 0) in (iszero (iszero false))) then ((\ d : C . a) (\ b : (A -> Bool) . (false false))) else (if (\ b : (Nat -> A) . (succ 0)) then (let b = false in (false 1)) else (pred true)))
(succ (iszero (iszero (succ c))))
(succ (pred (succ (pred c))))
(iszero ((if false then b else b) (iszero 1)))
(if (if ((pred c) (0 0)) then (pred (b b)) else (\ c : (C -> B) . true)) then (succ (let e = (let e = c in 2) in (succ a))) else (let b = (iszero (succ c)) in (succ 0)))
(succ (let c = (if a then (succ false) else b) in (if 2 then b else 2)))
(iszero (\ a : ((Nat -> Nat) -> A) . (let b = 0 in b)))
(succ ((\ a : ((Bool -> Bool) -> A) . (0 true)) (succ (pred a))))
(let b = (iszero (\ c : (B -> A) . true)) in (if (let c = (let b = false in true) in (if a then 0 else (pred false))) then (a b) else ((iszero c) (let c = 1 in 0))))
(let b = (let b = (false 0) in (pred c)) in (if ((let d = (if b then false else false) in 0) (pred 0)) then ((iszero (pred c)) (c 2)) else (if (iszero 0) then (succ (let e = 1 in 0)) else (if (succ 2) then (if a then b else a) else 1))))
(pred (\ b : ((C -> Nat) -> B) . (iszero false)))
((pred (pred (\ e : C . 0))) (\ a : ((Bool -> B) -> (B -> Bool)) . (pred (c c))))
(if (pred ((succ (false false)) (succ c))) then (iszero (pred 1)) else (succ (if 0 then b else (1 b))))
(succ (\ c : ((Bool -> Bool) -> (C -> Nat)) . (succ (pred 2))))
(((false c) (iszero b)) (if (if (iszero (iszero c)) then (pred (succ b)) else (if (succ b) then (if c then false else a) else (let d = 0 in 1))) then (c (let b = 1 in true)) else (iszero (if 1 then 1 else 2))))
(\ c : (((C -> A) -> (Bool -> Nat)) -> (B -> Bool)) . (pred (let d = (\ a : C . 1) in 0)))
(iszero (iszero ((pred a) (succ 0))))
(\ e : (((B -> A) -> ((B -> Bool) -> Nat)) -> (((Nat -> Nat) -> Bool) -> (B -> Bool))) . (\ d : ((Bool -> C) -> Nat) . (iszero a)))
(\ e : ((Bool -> A) -> ((C -> C) -> ((Nat -> A) -> (B -> Nat)))) . (succ (a true)))
(iszero (if (iszero (succ (\ c : C . 0))) then (succ (\ b : A . false)) else (\ b : B . (iszero a))))
(succ (let a = (if c then false else false) in (succ false)))
(pred ((iszero false) (let e = 2 in a)))
(if (let a = (succ (\ e : B . c)) in (let a = (let d = (pred b) in (if c then 2 else a)) in (iszero false))) then (let d = (let c = (succ 0) in false) in (succ a)) else (let e = (iszero (pred true)) in (let e = (succ 2) in (succ c))))
(iszero (let a = (succ (iszero b)) in (if true then (1 a) else (iszero 0))))
((\ d : ((B -> Bool) -> (A -> A)) . (if (\ e : A . (iszero b)) then (let e = (pred a) in false) else (if a then b else 2))) (succ (let b = (c b) in (iszero c))))
(pred (\ b : ((Nat -> (Bool -> C)) -> (B -> A)) . (iszero (if 1 then b else 0))))
(pred (succ (\ a : (A -> B) . (succ c))))
(pred ((1 c) (if false then 0 else false)))
(succ (succ (1 (c a))))
(if (if (let e = (let c = true in false) in (succ a)) then ((let b = b in c) false) else (\ d : (A -> Bool) . (1 2))) then (\ e : (Bool -> Bool) . (if a then 2 else b)) else (\ c : (A -> B) . (iszero c)))
(iszero (if (if 2 then 0 else false) then (\ a : A . false) else (if 1 then c else c)))
(if (let c = (pred (let a = 0 in 1)) in (\ a : A . b)) then (if (if (let c = false in 2) then (if 1 then b else false) else (iszero false)) then (pred (1 c)) else (pred (succ 1))) else (pred (let d = (let a = 2 in 0) in c)))
((iszero ((iszero (succ 0)) (succ 1))) (let b = (let d = (succ b) in (iszero b)) in (\ e : ((Nat -> A) -> Nat) . (succ 1))))
(succ (\ b : ((C -> C) -> (C -> A)) . (succ (iszero 0))))
(\ a : ((Bool -> B) -> ((Nat -> C) -> A)) . (let e = (succ a) in (iszero false)))
(if (if (succ b) then (let e = false in (2 1)) else (if false then 0 else 2)) then (if (pred (\ d : Nat . 1)) then (\ e : A . 0) else (let c = true in a)) else (let a = (iszero a) in (let d = (succ c) in (let e = 0 in 2))))
(succ (iszero ((succ 2) (succ (let b = a in 1)))))
(let d = (pred (\ c : (Bool -> C) . (\ e : B . 2))) in ((iszero (iszero 2)) (\ c : Nat . c)))
(iszero (let d = (c 2) in (let c = false in c)))
(\ e : (((Nat -> B) -> Bool) -> (B -> A)) . (let c = (if (if 2 then a else c) then (pred 2) else true) in (succ 0)))
(if (pred (if b then (pred true) else (pred true))) then ((if b then a else c) (if false then 1 else 0)) else (iszero (let e = 0 in b)))
(iszero (((1 2) (\ e : B . 0)) (1 (iszero c))))
(succ (succ (pred 1)))
(iszero (iszero (b c)))
(succ ((let c = a in (0 2)) (\ a : Nat . (let a = c in 1))))
(pred ((iszero c) ((let b = true in false) (let a = false in b))))
(succ (pred (if (succ false) then (pred 1) else (pred 2))))
(let d = (succ (\ d : (Bool -> A) . 1)) in (\ d : ((C -> (Nat -> Bool)) -> (C -> Bool)) . ((a c) (1 a))))
(succ (iszero (pred (0 false))))
((let c = (if 0 then b else c) in (let a = (succ 1) in 0)) (\ a : (B -> C) . (\ b : Bool . 2)))
(iszero ((\ e : B . a) (let c = false in b)))
(let d = ((let a = a in 0) (false a)) in (\ d : (((Bool -> B) -> Bool) -> ((C -> Bool) -> C)) . (\ e : C . (pred 2))))
(let a = (succ (if true then false else 2)) in (\ d : ((C -> C) -> (Nat -> Nat)) . (let a = c in 0)))
(\ e : ((C -> (Bool -> B)) -> ((B -> B) -> (A -> B))) . (iszero (let d = (let b = 1 in b) in 0)))
(succ (succ (iszero (iszero b))))
(iszero (if (pred (pred 0)) then (pred (let a = a in 2)) else (iszero true)))
(\ e : ((Nat -> A) -> ((A -> Bool) -> (C -> C))) . (iszero (\ a : (Bool -> A) . (iszero 2))))
(succ (let a = (iszero (pred false)) in (iszero c)))
(if (((let d = false in 2) (1 false)) (if a then (iszero a) else b)) then (if (succ true) then (pred b) else (iszero a)) else (pred (if a then (iszero 2) else c)))
(pred (pred (let e = false in 1)))
(pred (iszero (\ d : B . (pred true))))
(let e = (if (\ a : (C -> B) . (if 1 then 2 else 0)) then (iszero c) else (pred 2)) in ((iszero true) (pred 2)))
(if (pred (iszero 1)) then (if (iszero 2) then (iszero 1) else (iszero (iszero true))) else (\ c : (A -> Bool) . (pred true)))
(iszero (pred ((pred 0) b)))
(let a = (succ (succ b)) in (succ (\ a : (B -> A) . (if false then (iszero c) else (a false)))))
(if (iszero (if 0 then c else 2)) then (succ (iszero (0 false))) else (if (let b = (if a then 2 else 2) in (\ c : Bool . 0)) then (iszero 1) else (\ e : Bool . c)))
(if (if (succ 0) then (a 1) else (let e = 0 in 2)) then (let b = (let b = (a 0) in (pred 2)) in (succ b)) else (iszero (succ c)))
(pred (iszero (\ b : (B -> C) . (if 2 then (let c = 2 in a) else (let d = false in c)))))
(\ b : ((C -> Bool) -> (Nat -> (Bool -> A))) . (succ (let e = (if c then 2 else true) in 0)))
(let d = (pred (iszero c)) in (let c = (let b = (let a = 1 in 0) in (iszero 0)) in (pred 2)))
(if (let b = (succ b) in (succ (succ 2))) then (if (succ true) then (iszero 0) else (\ b : (B -> Nat) . (pred true))) else (iszero (pred (let c = true in 0))))
(succ (if (iszero true) then (b (\ e : B . true)) else (pred 1)))
(pred (succ (if (\ a : C . false) then 1 else true)))
(((succ (if b then (\ e : C . 2) else (2 true))) (if (2 0) then false else c)) ((\ a : (Bool -> Bool) . a) (iszero (iszero 1))))
(succ (if (succ b) then ((2 0) (let a = false in (if false then 1 else b))) else (pred 2)))
((let d = (\ e : (Nat -> Bool) . (let a = 2 in a)) in (iszero false)) (let e = (let d = b in (let d = b in 1)) in (let e = (let b = c in a) in (pred a))))
((iszero (if (pred 1) then (let a = true in (iszero 2)) else (if 0 then (succ b) else (iszero c)))) (iszero (let c = false in 2)))
(let e = (if (\ c : (A -> B) . (\ b : A . true)) then (let b = true in false) else (iszero (\ d : Nat . true))) in (let c = (let d = (a 1) in 0) in (let e = b in b)))
((pred (succ (1 true))) (if (succ c) then (succ (1 false)) else (\ e : A . a)))
((succ (iszero (succ 2))) (if (if (\ a : Nat . b) then (let a = 0 in 1) else (if b then 1 else 1)) then (iszero true) else (\ c : Nat . 0)))
(iszero (iszero (let c = (succ a) in (pred b))))
(succ (\ d : (Bool -> (B -> B)) . (iszero a)))
(iszero (pred (c c)))
((\ a : ((Bool -> (C -> C)) -> (B -> (A -> Nat))) . (succ ((let b = false in 2) a))) (let c = (if b then a else c) in (if 1 then a else 2)))
(pred (if (succ a) then (if (succ (if true then b else false)) then (pred 1) else (succ false)) else (if ((0 true) (succ 1)) then ((let b = 0 in 0) (2 false)) else (pred 1))))
(let c = (if (false (iszero 0)) then (let a = b in true) else (\ a : A . (iszero 0))) in (succ (\ e : (B -> Bool) . (iszero 0))))
(let e = (\ b : (((B -> Nat) -> Nat) -> ((Nat -> Nat) -> Nat)) . (iszero (iszero false))) in ((iszero b) (b (let a = c in 0))))
(\ d : ((B -> (A -> Nat)) -> ((C -> C) -> ((B -> Bool) -> Bool))) . (let a = (\ d : (Nat -> A) . c) in ((iszero (let b = false in a)) (iszero 1))))
(pred (let e = (succ c) in (pred 2)))
(pred (succ (iszero 1)))
(pred (let a = (\ b : (B -> A) . (let c = a in a)) in (iszero (if (if false then false else a) then true else (let e = b in 2)))))
((((pred 1) (c false)) (iszero a)) (let c = (succ (pred (succ a))) in (\ c : B . (\ a : Bool . a))))
(succ (let d = (succ (\ d : Bool . 1)) in (succ (false c))))
((if (if 2 then 1 else a) then (let d = b in 0) else (0 1)) (let d = (pred true) in (if 1 then (succ false) else true)))
((pred ((2 0) c)) (succ (succ ((iszero true) c))))
(iszero (pred (pred (succ 2))))
(pred (if (pred (\ a : Bool . 1)) then (iszero (let a = 0 in c)) else (if (iszero a) then 0 else (pred 1))))
(\ e : (((Nat -> Bool) -> (C -> B)) -> (B -> (Nat -> Nat))) . (iszero (iszero a)))
(\ b : ((Bool -> Bool) -> (Bool -> Bool)) . (pred (if (succ 0) then 2 else b)))
(let a = (\ e : ((Nat -> Bool) -> (A -> B)) . (\ c : (A -> Nat) . (pred (if false then c else c)))) in (iszero (if (succ 0) then (pred false) else 1)))
((let d = (\ e : ((B -> A) -> C) . (iszero 0)) in (iszero (\ d : Bool . 2))) (iszero ((\ b : (B -> B) . (2 false)) (let d = 2 in true))))
(iszero (let c = (c 2) in (succ a)))
(if (if (iszero b) then (b (a b)) else ((\ a : A . false) (if b then 1 else 0))) then (let e = (iszero (if (let c = c in c) then a else (2 a))) in (\ a : (A -> C) . (let b = a in 0))) else (pred (\ b : (Nat -> B) . false)))
(\ e : (((Bool -> B) -> (C -> Nat)) -> (((B -> A) -> Nat) -> (B -> Bool))) . (\ b : (Bool -> (C -> Nat)) . ((\ d : A . b) false)))
(let b = (pred (let b = 2 in true)) in (\ e : ((Bool -> C) -> (Bool -> A)) . (succ (iszero (let a = c in false)))))
(let c = (let d = (\ d : Bool . true) in (pred c)) in ((iszero (1 false)) (\ e : Nat . b)))
(if (pred (\ e : (C -> C) . (if false then 1 else b))) then (\ a : ((Nat -> Nat) -> (Bool -> Bool)) . (iszero (iszero (1 2)))) else ((if b then 1 else 2) (if (let c = 0 in 1) then c else (let d = 0 in true))))
((iszero (if 0 then 1 else true)) (succ (b false)))
(if ((if 0 then false else false) (iszero true)) then (iszero (succ (let c = (a 2) in b))) else (iszero (let e = (if true then 0 else c) in 0)))
(succ (iszero (\ e : (Bool -> B) . b)))
(let e = ((let e = 1 in (iszero b)) (succ true)) in (\ d : (A -> (Nat -> C)) . ((pred 1) (succ a))))
((let b = (let e = c in c) in (if true then true else false)) (succ (let d = 0 in (iszero a))))
(\ b : (((B -> C) -> (A -> Bool)) -> ((C -> B) -> (B -> Nat))) . ((\ c : ((A -> Nat) -> A) . (let c = true in (succ 1))) ((pred c) (pred 1))))
(if (succ (if (if c then 2 else true) then true else (if 1 then b else 0))) then (\ c : (B -> B) . (let b = b in a)) else (\ d : (((Nat -> B) -> (C -> Nat)) -> ((Nat -> A) -> (A -> Bool))) . (b 0)))
(let c = (if (pred (let b = b in 0)) then (true a) else (iszero 1)) in (succ (let c = 1 in 2)))
(\ b : (((B -> Bool) -> (C -> (Nat -> Nat))) -> ((C -> A) -> (Bool -> A))) . ((\ e : Nat . 1) (let e = a in 1)))
(\ b : ((Bool -> B) -> (A -> Bool)) . (\ d : ((B -> C) -> C) . (iszero true)))
(pred (iszero (\ a : (A -> (A -> Nat)) . (succ (pred false)))))
(succ ((let b = 1 in (\ c : C . 1)) (succ (\ b : C . 0))))
(\ b : (((C -> A) -> (Nat -> A)) -> ((A -> (A -> Bool)) -> (Bool -> (B -> Bool)))) . (iszero (let d = (pred 0) in b)))
(iszero (\ a : ((B -> A) -> (Bool -> C)) . (if (iszero 1) then true else (succ 2))))
(pred (iszero (\ c : B . (1 c))))
(succ (let c = ((\ c : B . c) false) in ((succ c) (0 true))))
(succ (((2 0) 1) (pred (let e = false in 1))))
(\ b : (((C -> A) -> Nat) -> (B -> B)) . (pred (if (if (0 b) then (iszero b) else (let a = b in a)) then (2 false) else (iszero 2))))
(if (iszero (if (\ a : C . (iszero a)) then (let b = (pred 1) in b) else (iszero a))) then (succ (iszero (succ b))) else (iszero (1 c)))
(succ ((if (if 1 then 1 else a) then (if 2 then b else 1) else (b false)) (iszero (succ a))))
(succ (let e = (succ true) in (pred b)))
(pred (\ a : ((A -> Nat) -> (C -> Bool)) . (c c)))
(iszero ((succ (iszero 1)) (iszero (succ b))))
(if (if (pred false) then (\ e : (B -> Nat) . 1) else (let e = true in true)) then (succ (\ e : (C -> Bool) . (if a then 2 else b))) else (pred (true 0)))
(\ e : ((((C -> C) -> (Nat -> Nat)) -> (C -> Nat)) -> ((A -> (C -> C)) -> ((B -> Nat) -> A))) . ((let c = 2 in 0) (pred 2)))
((pred (pred a)) (succ (let d = (iszero b) in (\ c : (B -> Nat) . 2))))
(if (if (let a = (0 true) in 0) then (if (succ c) then (succ 0) else ((0 false) (succ true))) else ((true b) (false false))) then (if (\ d : B . 2) then (iszero 0) else (succ (if true then 2 else 1))) else ((let d = (pred a) in (iszero 1)) (pred a)))
(succ (succ (succ (\ c : B . false))))
(\ e : (((Bool -> B) -> (Nat -> A)) -> ((Nat -> C) -> (Nat -> (B -> Nat)))) . (let b = (2 (pred c)) in (let c = (let a = false in 0) in a)))
(let d = (if (iszero 1) then (false (a a)) else (succ (iszero a))) in (let e = (iszero true) in (b c)))
(iszero (if (if b then false else b) then (let a = 1 in c) else (\ d : B . b)))
(iszero (pred ((pred true) (let a = 1 in c))))
(iszero (\ c : (Nat -> Nat) . (succ 1)))
(let c = (\ c : ((Nat -> A) -> (Bool -> A)) . (iszero true)) in ((let b = (\ e : B . 0) in (iszero 2)) (if (pred (2 2)) then (iszero true) else (if false then (if a then true else false) else (iszero false)))))
(succ (iszero (succ (succ 0))))
(succ (iszero (let b = a in 0)))
(pred (succ (iszero (let a = a in true))))
(if (succ (\ d : (C -> B) . false)) then (\ b : (A -> Bool) . (iszero (let c = b in (succ 1)))) else (if (\ d : C . a) then (a 0) else (succ 0)))
(\ a : (((A -> Bool) -> B) -> (C -> A)) . (\ a : ((Bool -> A) -> (Bool -> Nat)) . (1 0)))
(\ d : ((Bool -> C) -> (Nat -> (Bool -> Nat))) . (let e = (\ b : A . (pred 1)) in (if a then (let a = c in 1) else a)))
((\ c : ((Bool -> Nat) -> C) . ((pred true) true)) (let b = ((false true) (iszero 2)) in (pred (0 false))))
(succ ((if (succ 2) then (iszero false) else (let d = 0 in 2)) (succ (let a = b in false))))
(succ (if (succ 1) then (succ true) else (pred true)))
(if (succ (if (let d = false in b) then (pred false) else (0 true))) then (\ c : (((A -> A) -> (B -> Bool)) -> ((Bool -> Nat) -> Nat)) . (let d = 2 in 0)) else (let a = (\ c : (A -> A) . 0) in (let d = (let a = (\ c : Nat . true) in (\ b : Nat . c)) in (iszero a))))
(\ c : (((A -> Bool) -> Nat) -> ((B -> A) -> ((C -> C) -> (B -> C)))) . (pred (pred (false 0))))
(let a = (iszero (if (iszero c) then (let a = false in true) else (pred c))) in ((if c then false else c) (\ c : C . (if a then 2 else c))))
(\ d : ((((Bool -> Nat) -> B) -> (B -> C)) -> ((A -> C) -> Bool)) . (iszero (pred 2)))
(succ (iszero (pred (succ b))))
(\ e : ((B -> Bool) -> (Nat -> Nat)) . (succ (let d = (let d = true in 0) in 0)))
(let c = (succ ((if (pred true) then (pred 2) else 0) (let c = true in (\ b : A . a)))) in (iszero (succ (iszero false))))
((pred (iszero (if b then (\ e : A . b) else true))) (let e = (let c = (let b = true in false) in 2) in (iszero (let b = 0 in 2))))
(succ (if (iszero (let d = true in a)) then (c 2) else (\ c : (Bool -> B) . (if 0 then false else 1))))
(iszero (pred (if true then 2 else a)))
(if (succ (succ c)) then (iszero (let d = (if 1 then 2 else 0) in (if (iszero a) then (succ b) else c))) else (let e = (let e = (let d = b in c) in (pred false)) in (pred c)))
(pred (if (pred a) then ((\ b : B . c) false) else (\ a : (A -> Nat) . (2 1))))
(let d = (succ (\ c : (Nat -> B) . b)) in (iszero (\ a : A . c)))
(if (iszero (pred (if false then 2 else 0))) then (if (pred (pred true)) then (succ 2) else (iszero (true 2))) else (let a = (a 0) in (pred true)))
(succ (iszero (\ a : (C -> (Bool -> A)) . (iszero 0))))
(pred (if (\ a : Nat . (succ true)) then (pred b) else (\ c : (B -> C) . 1)))
(\ a : ((A -> (A -> Nat)) -> ((Bool -> A) -> (Nat -> B))) . (pred (pred false)))
(\ c : (((B -> B) -> (C -> Nat)) -> ((Bool -> B) -> (Bool -> B))) . (succ (let a = (succ (let c = 2 in false)) in (\ c : B . 1))))
(\ b : ((Bool -> C) -> (A -> B)) . (let e = (pred (false true)) in ((let e = a in (if b then a else false)) (a (succ a)))))
(let d = (iszero (succ true)) in (let a = (succ (let a = false in a)) in (pred (if 0 then b else b))))
(if (let a = (if b then (if a then c else true) else 2) in (let d = (let e = false in c) in (\ e : B . 0))) then (\ a : (C -> A) . (iszero 2)) else (iszero (pred 2)))
(\ b : (((Bool -> B) -> (B -> A)) -> ((Nat -> Nat) -> Bool)) . (iszero (if true then b else 2)))
(let b = ((\ b : Bool . (if 0 then 0 else c)) (iszero (succ true))) in (\ a : ((B -> Bool) -> (C -> B)) . ((if c then (\ d : Bool . false) else 2) (let d = c in (if 1 then 2 else b)))))
(succ (pred ((pred c) false)))
(let a = (if (succ (if 1 then b else a)) then (iszero (iszero true)) else ((if c then a else true) (if a then c else false))) in (succ ((succ 2) (iszero false))))
(succ (\ e : (A -> Bool) . (let a = (\ d : B . 0) in true)))
(succ (let a = (\ e : ((B -> B) -> C) . (let c = c in true)) in (\ d : (Nat -> B) . (let b = a in b))))
(succ (let d = (pred (let e = b in 1)) in (pred false)))
(let a = (\ b : (B -> Nat) . (false 0)) in (if (if c then (let c = a in b) else (pred true)) then (iszero (let a = 2 in false)) else ((pred true) (let d = (succ 0) in (let d = true in b)))))
(succ (if (if b then c else 2) then (pred 1) else (succ 0)))
(if (\ a : (B -> C) . (true true)) then (pred (b 1)) else ((let c = (succ 2) in (pred c)) (iszero 1)))
(succ (let e = (iszero a) in (if c then c else (succ a))))
(iszero (\ b : (A -> B) . (\ c : Nat . c)))
(if ((let a = (iszero a) in a) (let c = (\ e : Nat . true) in (\ b : A . 2))) then (let a = (if a then 0 else (a c)) in (\ b : (Bool -> A) . (succ 0))) else (iszero (succ (iszero false))))
(pred (if (if 2 then (succ false) else (let a = b in false)) then (succ false) else (let b = 2 in false)))
(iszero (if (let d = (let b = 2 in 1) in (let b = true in b)) then (pred (\ a : Nat . (pred false))) else (if 1 then (iszero c) else 1)))
(pred ((succ 1) (iszero 0)))
(\ b : ((C -> Nat) -> (A -> Nat)) . (((pred 0) (\ d : C . b)) (\ a : B . 2)))
(let c = (iszero (2 true)) in (if ((succ 2) (\ d : Bool . true)) then (if (let e = true in a) then (\ e : A . b) else (succ 0)) else (pred (iszero 2))))
((succ (succ b)) (if (if (pred b) then (pred b) else b) then (\ d : B . 0) else (if 1 then b else 2)))
(\ d : (((Bool -> Bool) -> (A -> Nat)) -> (Nat -> Nat)) . (if (let a = (\ c : C . false) in c) then (iszero (succ 2)) else ((if 0 then true else a) (if a then b else false))))
(\ b : (((Nat -> B) -> Nat) -> (A -> C)) . (iszero (succ 2)))
(succ (if (succ 2) then (\ c : B . true) else (succ c)))
(pred (iszero (iszero a)))
(((let e = false in a) (if true then c else b)) (iszero (pred (if a then false else b))))
((pred (let c = false in 2)) (\ e : (B -> Bool) . (succ false)))
((let b = (\ c : Nat . (iszero false)) in (if (succ false) then a else (pred a))) (succ (if c then (0 0) else b)))
(iszero (iszero (let c = (if a then (succ c) else 2) in (iszero true))))
(let b = (\ c : (A -> B) . (if (\ c : A . b) then 0 else 1)) in (let e = (iszero (let d = b in 0)) in (c (\ d : B . 1))))
(iszero (succ (iszero (if b then true else b))))
(succ (\ a : (Bool -> (A -> Bool)) . (if (\ c : C . false) then false else true)))
(\ b : ((Bool -> C) -> (A -> (A -> A))) . (succ (pred (pred 1))))
(let e = (succ ((if (iszero b) then true else (\ c : Nat . a)) (let c = (iszero 1) in (iszero true)))) in (succ (\ b : (B -> B) . true)))
(let d = (pred (iszero ((let d = false in 2) true))) in (iszero ((iszero true) (succ 2))))
(pred (let d = (iszero 0) in (if a then 1 else 0)))
(if (succ (let b = c in 1)) then (let a = (succ a) in (\ c : Bool . a)) else (iszero (pred (iszero true))))
(pred (let d = (iszero c) in (false (iszero 1))))
(let d = (if (\ b : A . 2) then (0 b) else (if c then 2 else (b a))) in (if (succ (if true then 1 else a)) then (if (pred 1) then (succ 2) else (iszero 2)) else ((if true then 1 else a) (pred 2))))
(\ c : ((Nat -> (B -> Bool)) -> (Bool -> B)) . (let b = (let b = ((pred false) (pred true)) in (iszero false)) in ((1 true) (false (pred false)))))
(succ ((iszero 2) (succ (a true))))
((succ (\ a : (Nat -> A) . (let c = (b 0) in 1))) (let e = (if 1 then false else b) in (succ (1 b))))
(let c = ((0 true) (iszero b)) in (if (if true then 1 else 2) then (iszero (\ e : C . false)) else (succ (b 1))))
(let a = (\ b : ((A -> A) -> (A -> Nat)) . (succ (iszero a))) in (let a = (let a = (\ a : A . 2) in (\ c : A . a)) in (pred c)))
(\ e : (((C -> C) -> (Nat -> B)) -> (((C -> C) -> B) -> ((Nat -> Nat) -> C))) . (((succ false) (iszero 0)) (succ (succ c))))
(iszero (pred (\ b : (Bool -> C) . 2)))
(\ a : (((A -> Nat) -> ((A -> B) -> (B -> Bool))) -> ((B -> B) -> (Bool -> B))) . (\ c : (Nat -> Bool) . (succ (iszero c))))
(if (succ (if true then 2 else (\ c : A . 2))) then (succ (iszero (\ b : Bool . b))) else (iszero (if false then a else (iszero b))))
(iszero (succ (\ b : (Bool -> C) . (if true then b else a))))
(let a = (succ (\ b : (Bool -> B) . (pred 0))) in ((pred (\ a : Nat . b)) (\ e : C . b)))
(iszero (if (pred 2) then (\ c : Bool . false) else (iszero true)))
(pred (succ (pred true)))
(pred (succ (succ (pred a))))
(pred (let d = (if (iszero 2) then b else 2) in (\ c : (Bool -> A) . 1)))
(let e = (pred (iszero (iszero 0))) in (let e = (succ (\ a : B . false)) in (pred (\ a : C . 0))))
(pred (let b = (1 false) in (iszero false)))
((\ a : (Bool -> (Nat -> Bool)) . (\ a : (Bool -> A) . (pred (iszero true)))) (\ b : (((Nat -> A) -> Bool) -> (Nat -> B)) . (succ ((let a = 1 in 1) a))))
(\ e : ((A -> C) -> (B -> Nat)) . (pred (let b = (\ e : A . 2) in (1 (pred 0)))))
(let c = ((iszero true) (iszero 2)) in (if (let a = (2 true) in (\ e : C . c)) then (if (iszero true) then (iszero 0) else (succ 1)) else (succ (a b))))
(iszero (if (iszero false) then (iszero (false 0)) else (succ (if (let e = a in b) then (let d = 2 in 0) else (\ c : Bool . 0)))))
(\ d : (((Nat -> Bool) -> (Nat -> Nat)) -> ((A -> C) -> ((A -> C) -> Nat))) . ((succ 1) (\ b : Nat . (iszero false))))
(succ (if ((let d = false in a) (\ c : Bool . (\ d : Nat . false))) then (if a then true else b) else (if (\ c : C . a) then (pred b) else (b a))))
(\ e : (((B -> Bool) -> (B -> C)) -> ((B -> Bool) -> (C -> (C -> B)))) . (iszero (pred b)))
(pred ((pred (let a = 0 in c)) (\ c : (Nat -> C) . ((2 1) true))))
(if (((\ a : A . a) (let e = 2 in 0)) (iszero (\ a : Bool . b))) then (succ (iszero a)) else (\ a : ((Nat -> B) -> Nat) . (if (let b = a in 2) then (if b then b else false) else true)))
(succ ((pred (iszero 0)) (if true then (iszero 1) else false)))
(if (\ e : ((B -> Bool) -> (Bool -> C)) . ((if 2 then a else 0) (iszero b))) then (pred ((let c = (c true) in (0 b)) (succ b))) else (let c = (\ b : (Nat -> B) . (succ a)) in (\ b : ((Nat -> Bool) -> (C -> A)) . (2 b))))
(pred (\ c : ((A -> C) -> (C -> Bool)) . (let b = (iszero a) in (iszero b))))
(succ (if ((succ b) c) then (pred (iszero b)) else ((pred 2) (let d = b in 0))))
(succ (pred (iszero c)))
(if (iszero (if a then (succ true) else (if b then c else 2))) then (if (iszero (succ 2)) then (let e = (iszero c) in 2) else (pred 0)) else (pred ((\ e : (A -> C) . true) (iszero 1))))
(pred (succ (\ a : B . 2)))
(succ (succ (let a = b in (iszero true))))
(\ d : ((B -> C) -> (Nat -> Bool)) . (pred (if 2 then a else 0)))
(if (iszero (pred (b false))) then (if (if false then 2 else c) then (0 (pred a)) else (succ 1)) else (pred (succ (1 (pred 2)))))
(pred (pred ((\ a : A . 2) (let a = false in true))))
(let b = (let d = ((true b) (true c)) in ((\ d : Bool . 1) (\ b : Nat . true))) in ((iszero false) (pred 1)))
(succ (if (\ a : Nat . 2) then (succ false) else (a false)))
(pred (if ((if c then b else false) c) then (\ c : (C -> Nat) . a) else (((if false then 1 else 2) c) (let a = false in true))))
((iszero (if (let c = (let e = a in 1) in (let a = 1 in true)) then (pred a) else (b (\ e : A . 2)))) (\ b : ((C -> Bool) -> (C -> B)) . (if b then 0 else (succ true))))
(let c = ((\ b : B . (iszero b)) (\ d : C . (a 2))) in (\ c : ((A -> Bool) -> (A -> Bool)) . (iszero (\ c : Nat . true))))
(let b = (pred (iszero 2)) in (let b = (succ a) in ((pred 1) (iszero a))))
(succ (if (let c = (\ d : C . 0) in 2) then (let e = (let c = true in (pred true)) in (succ c)) else (if (pred (\ c : B . 1)) then (if (let b = a in false) then 1 else (iszero a)) else (true 1))))
(iszero (let a = (\ c : (B -> A) . (pred true)) in (pred true)))
(\ e : (((C -> (A -> B)) -> (Bool -> C)) -> (((A -> B) -> (C -> Nat)) -> ((Bool -> A) -> (Bool -> A)))) . ((let e = (\ e : C . c) in (iszero 0)) (succ (a 2))))
(pred (succ (if true then true else true)))
(pred (if (succ false) then (let c = (iszero c) in 2) else (pred 0)))
(pred (iszero (let e = c in (succ c))))
(\ d : (((Bool -> A) -> B) -> (A -> B)) . (let b = (\ e : Nat . false) in (b a)))
(succ (if (succ false) then (iszero false) else (succ b)))
(iszero (if (succ (let d = (iszero 0) in 1)) then (iszero b) else (succ false)))
(iszero (\ c : (A -> C) . (pred 2)))
(let e = ((pred (if true then b else a)) (let c = c in 1)) in (pred (pred 0)))
(succ ((succ (a (if 0 then false else 1))) (let d = (let c = 2 in false) in (pred b))))
(if (\ d : (B -> (A -> A)) . (succ (b true))) then (if (iszero 0) then (succ 2) else (pred false)) else (let c = (let e = (succ false) in b) in (iszero a)))
(iszero (pred (let a = (succ b) in true)))
(pred (pred ((\ a : B . true) (false a))))
(iszero (succ (a b)))
(iszero (pred (succ a)))
((iszero ((pred 0) (if b then c else true))) (\ b : ((A -> A) -> (Nat -> Bool)) . (let b = (pred (iszero true)) in (if 1 then c else 1))))
(let e = (\ d : ((Nat -> Nat) -> ((Nat -> B) -> (Bool -> Nat))) . ((pred 0) (pred (succ a)))) in ((if (iszero false) then (\ a : B . b) else (if 1 then 0 else b)) (iszero (let d = a in true))))
(\ a : ((C -> A) -> (C -> Bool)) . ((\ c : (A -> B) . (\ a : C . true)) (succ (if 1 then c else 0))))
(let a = ((pred (pred 0)) (iszero (if a then a else (pred 0)))) in (succ (iszero c)))
((let b = (\ d : (Bool -> Bool) . a) in (a a)) (pred (let d = (let a = a in c) in false)))
(iszero (\ c : (Bool -> Nat) . (pred a)))
(succ (succ (if false then 0 else true)))
(\ b : (((Nat -> B) -> (C -> C)) -> ((Bool -> (A -> B)) -> (Bool -> Bool))) . (\ a : (C -> (C -> Nat)) . (2 c)))
(\ e : (((Bool -> A) -> ((C -> Bool) -> (B -> Nat))) -> ((C -> B) -> (Bool -> Bool))) . (let a = (iszero 0) in (if a then a else false)))
(succ (let c = (\ d : C . (succ 1)) in (false (if false then 0 else 0))))
(iszero (if (\ c : (C -> Nat) . (if a then 1 else b)) then ((pred true) (0 a)) else ((\ e : (Bool -> A) . (iszero 0)) (\ d : Bool . true))))
(pred (iszero (iszero 1)))
(succ (iszero (let c = b in 0)))
((\ a : (A -> Bool) . (pred (pred false))) (let c = (pred c) in ((if a then c else c) (iszero b))))
(iszero (\ a : (C -> Nat) . (iszero false)))
(let c = (if (if (\ c : C . b) then (true false) else (\ e : C . false)) then (\ c : Nat . 2) else (pred true)) in (((iszero false) (iszero (let e = 0 in true))) (if (if 1 then c else 2) then (if 2 then c else a) else (iszero 0))))
(pred (iszero (let d = 1 in 2)))
(((\ b : (C -> Bool) . a) (\ a : Bool . (2 c))) (iszero (succ (\ c : (Bool -> B) . 1))))
(succ (\ b : (((A -> Bool) -> Bool) -> (B -> C)) . (let c = (\ b : (Bool -> Bool) . (pred 0)) in (pred 1))))
(let a = ((\ c : (Bool -> C) . 2) ((a a) 1)) in ((succ (pred c)) (pred (let e = false in a))))
(\ c : ((Bool -> C) -> (Bool -> (A -> C))) . (\ a : (Nat -> Nat) . (\ a : (Bool -> A) . (\ a : Nat . 2))))
((if (iszero false) then (let e = b in a) else (let a = 2 in (if 1 then 1 else false))) (pred (let e = (succ false) in 0)))
(iszero (let c = (\ e : (Bool -> Bool) . 0) in (iszero (let c = true in false))))
(succ (if ((b b) b) then (\ b : A . c) else (let c = (succ 2) in (iszero a))))
(if (((let a = (if 0 then c else 2) in 1) (b (pred true))) (if 0 then false else c)) then (\ b : ((Bool -> B) -> (Bool -> C)) . (if c then c else (\ b : B . 2))) else (iszero (let d = (iszero 2) in (\ c : B . 1))))
(pred (if (if (iszero 0) then false else false) then (succ 0) else (if 2 then false else a)))
(iszero (let a = (\ c : (Bool -> Nat) . (pred b)) in (succ (\ b : Bool . c))))
(let a = (if (if 2 then (succ 1) else (if a then 2 else true)) then (succ 1) else (iszero (iszero a))) in (((pred false) (a 2)) (pred 2)))
(\ e : ((C -> (Nat -> A)) -> ((B -> B) -> (C -> B))) . ((pred false) (pred (succ true))))
(\ e : (((Nat -> Nat) -> (A -> Nat)) -> ((C -> Bool) -> ((B -> Nat) -> B))) . (pred (\ e : (Nat -> Bool) . true)))
(let a = (succ (iszero (iszero false))) in (let d = (pred true) in (0 1)))
(if (pred ((succ (if 0 then b else 2)) (succ (let e = a in false)))) then (iszero (let a = (pred b) in c)) else (pred (succ (b false))))
(iszero ((let c = (if b then 1 else true) in (\ d : Bool . a)) (let a = (\ c : A . b) in (let e = a in 0))))
(pred (let c = (pred (if 2 then c else 2)) in (if (let e = 2 in false) then (if b then true else true) else (pred a))))
(if (succ (pred (b b))) then (iszero (if 2 then 2 else 1)) else (succ (pred (\ b : (Nat -> B) . (1 false)))))
(succ (if (if b then 0 else 2) then (if (if a then 2 else a) then false else (pred b)) else (if (succ (\ b : B . false)) then (let e = 1 in (false 1)) else (if true then 1 else 0))))
(\ b : ((A -> Nat) -> ((Nat -> A) -> Bool)) . (pred (succ true)))
(\ a : ((C -> Nat) -> (Bool -> Bool)) . (pred (true (pred 2))))
(let c = (iszero (if 0 then 0 else 2)) in (if (pred false) then (\ a : (A -> Bool) . (2 true)) else (succ (succ 0))))
((pred (pred (if 1 then false else 2))) (((\ c : Nat . (2 2)) (let d = (iszero c) in (c a))) (let c = (succ (\ c : B . 1)) in (if 2 then false else 1))))
(if (\ e : ((B -> Nat) -> ((B -> B) -> B)) . (pred (true a))) then ((if (false 1) then (iszero 0) else (\ e : Nat . a)) (let a = true in b)) else (let b = (pred 2) in (0 b)))
(if (pred (pred 0)) then (\ c : (C -> Nat) . (1 c)) else (let c = (if 1 then (pred a) else a) in (iszero (let c = (succ 0) in (2 a)))))
(succ (let e = (iszero false) in (let c = 2 in c)))
(succ ((iszero (pred c)) (pred (let b = true in false))))
(succ (succ (succ (succ (if 0 then true else c)))))
(if (succ (iszero (iszero false))) then (iszero (let a = (iszero true) in (iszero 1))) else ((2 2) (iszero (\ d : C . 1))))
(let e = (iszero (if (\ e : (A -> A) . (let a = c in false)) then (iszero a) else (iszero false))) in ((if (succ 1) then b else (pred 0)) (if b then 2 else true)))
((iszero (2 (\ c : Nat . b))) (succ (iszero (if a then 1 else (2 false)))))
(iszero (iszero ((if b then 1 else a) (if (c 2) then c else true))))
(succ (pred (let c = c in false)))
(pred (succ (succ b)))
(if (\ d : ((A -> B) -> ((Nat -> Nat) -> (Bool -> Bool))) . (\ a : (C -> B) . (let b = 1 in 1))) then (succ (if (let a = false in c) then false else 1)) else (succ (\ a : C . false)))
(if (pred (succ 0)) then ((let c = (\ e : Nat . b) in (pred 1)) (let e = 0 in (pred c))) else (let c = (pred false) in (succ (\ b : B . 2))))
(pred (iszero (iszero 2)))
(pred (succ (let a = false in a)))
(\ c : (((Bool -> Bool) -> C) -> (B -> Nat)) . (succ (succ (2 2))))
(\ c : (((Nat -> C) -> (A -> Nat)) -> ((Nat -> Bool) -> (A -> Nat))) . (iszero (let e = 0 in (if false then b else a))))
(pred (if (iszero a) then (if 0 then c else a) else (succ (if 0 then c else a))))
(succ ((\ a : Nat . 0) (\ d : C . (let a = 0 in 2))))
((if (pred (let d = true in c)) then (pred (if 1 then 0 else a)) else (pred (iszero a))) (succ (if 0 then a else b)))
(iszero (\ b : (B -> (A -> B)) . (iszero (pred a))))
(\ d : (((Nat -> B) -> (Bool -> Nat)) -> ((Bool -> B) -> (C -> A))) . (pred (\ e : C . 1)))
(let e = (let c = (if (succ (pred false)) then (let e = (succ false) in (iszero true)) else (pred 2)) in (if (c 2) then (2 true) else (succ b))) in (succ (\ c : (B -> Nat) . (if 2 then (succ 2) else 1))))
((succ (let b = c in c)) (pred (iszero 2)))
(if (if (\ c : (A -> Nat) . (true 1)) then (let c = false in 0) else (let b = 0 in 0)) then (\ e : ((B -> (C -> Nat)) -> (C -> A)) . (\ c : (B -> A) . (iszero b))) else (succ (succ (\ e : (Bool -> C) . false))))
(\ a : (((A -> C) -> (B -> C)) -> ((A -> (C -> B)) -> ((Nat -> A) -> (Bool -> C)))) . (iszero (1 b)))
(iszero (succ (iszero (false false))))
((let d = (iszero 2) in (iszero (0 a))) (iszero (succ (succ c))))
(if (succ (succ b)) then (let d = (iszero (succ 2)) in ((if (let c = 2 in true) then a else true) (iszero b))) else (iszero ((succ true) (pred (iszero 0)))))
(iszero ((succ c) (if true then a else 2)))
(iszero (succ (\ c : (B -> Nat) . (if c then 2 else 0))))
(if (iszero (let c = ((iszero 0) 1) in (succ b))) then ((iszero (c 0)) ((if false then false else a) ((true false) (if a then true else 0)))) else (((pred c) (\ e : Bool . b)) ((pred a) (iszero b))))
(if (if (pred (pred b)) then (if (iszero 0) then (succ 1) else (\ e : B . 0)) else (\ a : Nat . 2)) then (pred (if 1 then false else c)) else (succ (succ (if a then 1 else 2))))
(\ a : ((Nat -> B) -> (Bool -> B)) . (succ (iszero (1 1))))
(\ e : (((C -> Bool) -> (Bool -> B)) -> (C -> (B -> Nat))) . (\ c : ((A -> Bool) -> (Nat -> Nat)) . (\ a : (B -> Nat) . (succ 1))))
(iszero (pred (pred (pred true))))
(succ (if (iszero false) then (succ a) else (iszero c)))
((let a = (pred (if true then c else 1)) in (\ c : (A -> A) . true)) (\ c : ((C -> Bool) -> A) . (\ b : B . false)))
(iszero (\ a : (Nat -> Bool) . (succ b)))
((\ d : (Nat -> A) . (iszero (if a then 1 else b))) (let b = (if a then 1 else 1) in (let e = c in 0)))
(((let c = (let e = a in 1) in a) (iszero (succ (let e = a in 1)))) (iszero (succ (succ c))))
((iszero (pred true)) (let c = ((succ 2) (iszero c)) in (if (succ a) then false else 1)))
(iszero (let d = (succ (false (let b = 2 in b))) in (let b = c in a)))
(if (iszero (let b = a in 1)) then (succ (pred (iszero true))) else (pred (succ (iszero a))))
(if (\ c : ((Bool -> B) -> (Bool -> A)) . (\ c : Nat . (pred c))) then (iszero (\ c : (C -> (C -> C)) . ((\ d : Bool . c) (if false then c else b)))) else (\ e : ((C -> C) -> (A -> (B -> Nat))) . (\ a : (A -> (Nat -> B)) . (if b then 2 else 1))))
(\ c : ((A -> A) -> ((A -> Nat) -> (B -> B))) . ((2 (let c = false in 2)) (\ b : B . c)))
(let c = (let d = (iszero false) in (succ true)) in (pred (iszero 2)))
(pred (let a = (\ a : A . 2) in (\ a : (C -> Nat) . (let c = b in 1))))
(iszero ((succ (let d = (true 1) in (if 0 then c else true))) (iszero (pred b))))
(succ (let d = (let c = 1 in (pred false)) in (iszero (succ b))))
(\ d : ((C -> (Bool -> C)) -> ((Nat -> Bool) -> C)) . (if ((iszero c) true) then (iszero (succ b)) else (succ true)))
(succ (pred (if (let a = 2 in c) then (\ a : Bool . b) else false)))
(let b = (succ (succ true)) in (if ((pred 0) (let b = false in (if false then 1 else c))) then (let b = 1 in (succ b)) else (let e = (let c = 2 in true) in (succ b))))
((let e = (let e = (false false) in (\ a : A . true)) in (let e = false in (succ c))) (if (iszero (succ 0)) then (let a = (let d = 2 in true) in (succ 1)) else (pred (let b = c in b))))
(let b = (pred ((let a = a in c) (iszero 0))) in (if (1 b) then (let a = (if c then 0 else c) in b) else (succ (pred 0))))
((let e = (pred (iszero (\ e : Nat . a))) in ((let c = 1 in 0) (iszero 0))) (let e = (let a = (succ a) in ((pred b) (if 1 then a else b))) in ((\ b : Bool . b) (\ c : B . 1))))
(\ c : (((A -> Nat) -> (B -> B)) -> (Bool -> Nat)) . ((\ d : (Nat -> C) . (\ b : Bool . b)) (let c = (\ c : C . a) in (succ 1))))
(if (let a = (pred a) in (let a = 0 in 2)) then (succ (iszero b)) else (succ (succ 1)))
(if ((iszero c) (if false then 2 else false)) then ((a (let b = b in b)) (\ a : Bool . 1)) else (succ (\ a : A . b)))
(iszero (let d = (succ false) in ((if true then (if c then true else 1) else (if a then 2 else a)) (if (iszero a) then (pred 0) else (succ c)))))
(succ (succ (if true then b else true)))
(\ a : ((Nat -> (C -> B)) -> (((Nat -> C) -> (Nat -> B)) -> (A -> (C -> C)))) . (\ e : ((B -> Bool) -> (Nat -> C)) . (let e = (let d = 1 in 2) in (if c then a else 0))))
(if (succ (\ e : Nat . 2)) then (iszero (false false)) else (let c = (let b = (\ d : Bool . 1) in 0) in (let a = (let e = c in b) in 1)))
(succ (if (let c = (if false then c else a) in (a 0)) then (if 1 then (succ 2) else (a 2)) else (succ (let c = 1 in c))))
(pred (\ b : ((B -> C) -> Bool) . (if (0 false) then (a false) else (if a then b else c))))
(iszero (succ (let b = 1 in a)))
(iszero ((if 1 then 2 else (1 a)) (\ c : Nat . (succ 2))))
(\ d : (((Bool -> C) -> (Nat -> (C -> Nat))) -> (((C -> Bool) -> A) -> (Bool -> C))) . ((\ b : B . 1) (iszero true)))
(iszero (pred (if false then (succ b) else true)))
