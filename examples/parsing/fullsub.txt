((((let a = (pred false) in (\ e : Nat . unit)) (pred unit)) as (C -> ({ c : Unit , a : String }))) as ({ e : ({ d : ({ a : Float , b : String }) , d : ((Unit -> A) -> ({ c : Unit , d : Nat })) }) , d : ({ c : (Nat -> Unit) , a : (B -> Nat) }) }))
(\ d : (({ a : (A -> Nat) , d : ({ e : Nat , e : Bool }) }) -> ((C -> Bool) -> ({ e : ({ c : String , a : B }) , b : (C -> Bool) }))) . (if (unit a) then (pred "boy") else ((0 as (Unit -> B)) (pred b))))
(pred ((succ a) . e))
({ c = ({ a = (succ 1) , d = (c "boy") }) , d = (pred (let a = (let b = false in 0) in false)) })
(\ e : (({ d : ({ a : String , b : Top }) , d : String }) -> ({ b : ((C -> Top) -> Bool) , c : ({ b : B , a : (Nat -> String) }) })) . ((pred 0) as ({ b : (String -> B) , b : Float })))
(let b = (iszero (iszero b)) in ({ d = (iszero (1 as B)) , e = ({ a = (iszero "apple") , a = (\ b : Float . (pred 0)) }) }))
(fix ({ d = (fix 0) , b = (\ a : Nat . "boy") }))
(((\ d : Bool . unit) . e) as ((({ c : A , a : Nat }) -> (Unit -> B)) -> ((Top -> B) -> ({ e : B , a : (Float -> Nat) }))))
({ d = (({ a = b , e = c }) . e) , b = (if (pred "apple") then (pred true) else (fix (fix c))) })
(succ (fix (\ e : Unit . b)))
(iszero (succ (let b = "apple" in "boy")))
(let a = (pred (if 0 then (iszero a) else unit)) in ((let c = ({ b = 1 , b = a }) in (true 1)) as ({ e : (String -> Unit) , e : (Unit -> String) })))
(pred (fix (succ (\ d : C . "apple"))))
((if (fix 0) then (fix unit) else (pred (\ d : Nat . c))) . e)
((pred (c (iszero "boy"))) ((succ 2) as (String -> Nat)))
(fix ((true (pred c)) . e))
(succ (((fix c) (iszero "apple")) . b))
(fix ((pred (iszero 2)) (unit a)))
(\ e : ((({ e : Top , c : B }) -> (B -> ({ b : Unit , b : C }))) -> (Top -> String)) . ((\ a : (Unit -> ({ d : C , e : Bool })) . (if a then unit else false)) . d))
(iszero (iszero (succ c)))
({ d = (if (iszero ({ b = (let b = "boy" in true) , a = (iszero false) })) then (let e = ((1 0) as String) in (pred false)) else (true 0)) , c = (if (iszero (iszero unit)) then ((succ false) ({ b = (\ e : A . true) , d = (\ e : Nat . a) })) else (\ c : A . 2)) })
(if (if (let a = (fix "boy") in (let b = (false . e) in b)) then (\ a : (Nat -> Top) . unit) else ((fix "apple") . e)) then (let d = (pred (2 as Unit)) in ({ b = c , a = (0 . b) })) else (pred ("apple" . c)))
(((if b then true else a) (if 1 then (b true) else (let c = false in 2))) . c)
(succ (succ ((if true then false else "apple") as ({ a : ({ b : Unit , e : C }) , d : B }))))
(fix (({ d = (succ true) , d = "boy" }) . d))
(\ b : ({ b : ((Unit -> Top) -> (({ c : A , d : Bool }) -> Bool)) , a : ({ b : ((Unit -> String) -> (B -> Top)) , b : ({ c : B , d : B }) }) }) . (fix (succ "boy")))
(((let a = "boy" in false) . b) . a)
(succ (\ e : (C -> Nat) . (fix (fix 2))))
(\ e : ({ e : ({ a : Bool , e : Bool }) , a : (Nat -> B) }) . ((if "boy" then a else false) . c))
(succ (succ (pred c)))
((({ d = true , b = unit }) as ({ a : C , c : ({ d : C , a : Bool }) })) ((if (let e = 0 in 0) then (let d = "apple" in 1) else "apple") as (C -> Float)))
((pred (fix true)) (pred (iszero (2 "apple"))))
(\ d : ({ e : (Unit -> B) , b : (A -> A) }) . (let c = (unit as A) in ((if a then 2 else (succ c)) . b)))
(iszero (succ (2 as C)))
(let c = ({ a = (if 2 then "boy" else (pred c)) , a = (succ ({ a = "boy" , d = (c as String) })) }) in (let a = ({ a = (succ 0) , b = (succ b) }) in (let b = "apple" in (unit as Unit))))
(succ ((pred ({ e = true , b = c })) (1 (false . a))))
(if (fix (succ 2)) then (({ c = "apple" , c = 0 }) . c) else (pred (let a = false in (true . c))))
(let a = (fix ((pred false) . e)) in (pred (let b = 0 in a)))
(\ e : ({ e : ({ d : ({ a : Nat , a : Top }) , c : Top }) , c : ({ c : (C -> Top) , a : ({ c : Bool , d : A }) }) }) . ((\ e : A . (pred 0)) as (({ e : Bool , d : Unit }) -> ({ d : Unit , b : Top }))))
((\ d : (B -> ({ b : Top , a : B })) . (let c = (pred 2) in ((succ "boy") (succ 1)))) (succ (c as ({ a : Top , a : Top }))))
((if (("apple" b) as Bool) then (pred (fix unit)) else ((b . d) a)) . d)
(let a = (fix (let a = (if c then c else b) in (let e = 0 in c))) in (succ (let d = (if (fix a) then 1 else true) in (let d = "apple" in 1))))
((if (fix "boy") then (if 2 then a else b) else (a as Nat)) as ({ a : (({ b : B , e : C }) -> Unit) , b : ({ e : ({ d : Top , c : A }) , e : ({ c : ({ c : A , d : String }) , c : ({ b : Bool , d : String }) }) }) }))
(if (if (if 0 then (pred 1) else (unit as Top)) then ({ c = (fix c) , e = true }) else ("apple" as ({ b : Top , e : Top }))) then ((let c = "boy" in "boy") . c) else (iszero (b as ({ c : String , c : Top }))))
((if (succ c) then (iszero "apple") else (if true then (if "apple" then "apple" else "boy") else (let d = b in a))) as ((Bool -> String) -> (({ e : Bool , d : Nat }) -> ({ a : Float , b : Float }))))
(((iszero c) (b (unit . c))) as ({ e : (({ d : Bool , d : Bool }) -> (Nat -> Bool)) , c : ({ e : ({ e : C , d : B }) , b : ({ e : Nat , b : Unit }) }) }))
((if ((1 . c) . d) then (\ e : (Unit -> Top) . (succ 1)) else (c . b)) . b)
(iszero ((\ b : ({ c : Float , c : Unit }) . (unit . e)) . d))
(let d = (pred (iszero 0)) in ({ a = (2 as Nat) , d = (let e = b in true) }))
(\ b : ({ c : (Nat -> Nat) , d : (({ e : Nat , c : Bool }) -> Top) }) . (((\ c : Bool . true) as A) (c "boy")))
(iszero (\ c : ({ d : Bool , d : Nat }) . (let e = b in 0)))
(\ a : ({ c : (Nat -> (Nat -> String)) , d : ({ a : C , b : ({ a : Unit , c : Unit }) }) }) . ((pred a) . a))
(\ a : (({ b : ({ d : (C -> C) , d : Unit }) , e : ({ c : C , d : A }) }) -> ({ a : ({ c : Top , c : Top }) , a : (Bool -> B) })) . (({ d = ({ e = "boy" , d = (iszero c) }) , c = (iszero 1) }) (succ unit)))
(fix (succ ((succ 2) . a)))
(fix (let e = ((a . c) unit) in (iszero (({ a = 1 , e = 0 }) as Bool))))
(let c = ((succ (succ b)) (let e = "boy" in 1)) in (if (if true then "apple" else 1) then (\ e : (C -> Bool) . (let b = unit in 2)) else ((succ "boy") 0)))
(((fix false) . d) as ((C -> Bool) -> (Bool -> B)))
(iszero (\ a : ({ a : C , e : String }) . (\ a : ({ c : Top , b : Float }) . 0)))
(iszero (pred ({ d = false , d = 2 })))
(let c = (\ a : (Unit -> A) . (false as (C -> B))) in (pred (a . e)))
(pred (\ c : ({ a : Unit , e : (Top -> A) }) . (if a then (succ c) else (succ 1))))
((iszero ("boy" (fix 2))) . e)
(if (let c = ((iszero unit) as (C -> Top)) in (pred (pred "apple"))) then (pred ({ d = "apple" , e = false })) else (iszero ({ b = 2 , d = (iszero true) })))
(pred (("apple" . d) (\ e : Float . "apple")))
(\ e : (((Float -> A) -> ({ e : Unit , c : Top })) -> ({ a : (C -> A) , b : ((String -> A) -> String) })) . ((fix (\ b : Nat . unit)) as (((Float -> Float) -> ({ a : Bool , e : Unit })) -> (Nat -> Float))))
(\ c : ({ b : (({ c : B , a : Float }) -> ({ c : Nat , d : Bool })) , e : ({ a : (Bool -> Top) , c : ({ a : B , d : Nat }) }) }) . (((0 as Bool) (if b then unit else 1)) (if 0 then "apple" else c)))
(fix (pred ("boy" as Nat)))
(succ ({ a = (pred a) , d = (fix (if true then true else a)) }))
((fix (iszero c)) . c)
({ d = (let b = (0 true) in (iszero ({ c = 0 , b = 1 }))) , a = (fix (succ ((let d = 1 in 1) b))) })
(iszero (iszero (if (fix b) then (let e = false in unit) else (pred ({ b = 0 , c = unit })))))
(\ d : ({ b : (Bool -> ({ b : String , c : Top })) , d : (Unit -> Nat) }) . (let e = ("boy" . b) in (false a)))
(pred (\ d : ({ b : (Bool -> Top) , c : ({ b : Nat , c : Top }) }) . ((2 a) as ({ e : B , b : Top }))))
(succ (if ((b as A) as (Top -> Bool)) then (let b = true in ("boy" as Unit)) else (succ (if true then a else "boy"))))
(((succ (pred (succ 1))) as ((({ d : Nat , b : Top }) -> Float) -> ({ d : ({ c : A , a : String }) , a : ({ c : Nat , e : Bool }) }))) . c)
({ a = ({ e = (\ a : ((String -> B) -> A) . (fix true)) , c = ({ b = true , b = false }) }) , b = (fix ((let c = b in c) (if 0 then unit else 1))) })
(pred (((false . e) "apple") (succ (if "apple" then "boy" else true))))
(if (\ a : ({ c : ({ e : A , c : Float }) , b : ((Float -> A) -> ({ c : Float , a : Float })) }) . (\ c : (Top -> (Top -> C)) . (unit true))) then (let b = (if (if b then (\ a : A . true) else (succ a)) then (let a = false in (iszero b)) else ("apple" (false "apple"))) in (let c = false in (\ a : A . unit))) else ((\ a : Top . true) . d))
(\ b : ((B -> ({ a : String , a : B })) -> ({ e : Float , c : ({ c : B , a : Nat }) })) . (iszero (b . e)))
((iszero (if false then a else true)) ({ b = (let e = (a c) in (\ e : C . false)) , e = (let e = (iszero 0) in ({ b = 1 , c = "apple" })) }))
(pred ((fix (let c = "apple" in c)) . b))
(iszero (\ d : (({ b : A , b : String }) -> (B -> C)) . ((iszero 1) as (A -> (Top -> Float)))))
(fix ({ a = (succ c) , a = (fix (iszero true)) }))
(fix (fix ({ b = "boy" , c = 2 })))
(succ ((2 as (String -> String)) as ({ b : String , a : String })))
((let e = (unit . a) in (let b = 2 in (pred b))) (let a = (pred (let d = 2 in b)) in (let e = (b "boy") in (let c = unit in "apple"))))
(fix (fix (if (unit . d) then (fix 0) else (pred true))))
(if (((if 2 then "boy" else 2) . c) as ({ d : ({ e : A , e : ({ c : B , b : Nat }) }) , d : (C -> Top) })) then (iszero (2 as (C -> Bool))) else (succ (fix "apple")))
({ a = (pred (iszero 0)) , e = ((if (b . e) then "apple" else c) ({ c = c , d = 1 })) })
(((if (pred c) then (fix c) else (\ e : String . unit)) . b) as (({ c : (A -> Unit) , e : (Bool -> Top) }) -> ((Bool -> Top) -> ({ b : Bool , e : C }))))
({ b = (({ c = 0 , b = (2 "apple") }) . a) , a = ((if unit then b else 1) (pred true)) })
(((c as String) as (C -> ({ e : A , b : Float }))) . e)
(\ b : ({ a : ((C -> Bool) -> (Nat -> C)) , c : ({ b : (Float -> Nat) , a : (B -> String) }) }) . (((succ a) as Nat) (if (("apple" . c) . d) then (if (\ b : Unit . 2) then ({ c = "apple" , e = "boy" }) else false) else ((true . c) as (B -> Float)))))
(((iszero (succ (iszero false))) as ({ a : (Unit -> (Float -> C)) , e : ({ e : Bool , b : String }) })) (iszero (let d = (pred 0) in ({ e = true , d = ({ d = b , a = false }) }))))
(succ (iszero (pred 2)))
(iszero (let d = (unit . d) in (a as ({ c : Bool , a : Top }))))
(\ e : ({ a : ((A -> A) -> A) , e : (({ a : Unit , b : A }) -> A) }) . ((let c = a in (if 1 then unit else false)) (true as Top)))
((pred (unit . c)) . e)
(if (pred (iszero true)) then ((\ e : ({ b : B , e : Nat }) . (1 true)) . b) else ((1 as String) as ((B -> String) -> (Nat -> (C -> C)))))
(let c = (let a = (({ e = (iszero a) , b = a }) . c) in (if (if c then "boy" else unit) then ({ b = false , d = (iszero 1) }) else (iszero (true as Unit)))) in (((succ c) as ({ b : Unit , e : String })) (c as ({ b : Bool , b : String }))))
(if (succ (\ c : ({ c : C , d : (A -> Top) }) . (fix unit))) then ({ a = (succ (iszero 1)) , b = (pred (succ 1)) }) else (succ (\ b : ({ d : Bool , c : Top }) . c)))
(\ a : ({ d : ({ c : C , c : ({ b : Nat , a : C }) }) , c : ({ d : Nat , c : Bool }) }) . (let b = (succ 0) in ((\ e : Nat . (unit 1)) . d)))
(fix (iszero ({ c = a , e = c })))
((pred (succ c)) as ({ a : ({ a : ({ b : Float , c : Float }) , d : ({ a : String , e : A }) }) , c : ({ d : String , c : Unit }) }))
(fix (succ (\ b : B . b)))
(({ c = (2 as A) , c = (\ d : C . unit) }) as ((Nat -> Bool) -> ({ e : C , b : String })))
(pred ((a as C) . c))
(fix ((pred "apple") (succ (if true then "boy" else c))))
(fix (pred ({ b = false , e = (fix "apple") })))
(((fix 0) as (A -> String)) . e)
((\ b : (({ b : Bool , b : B }) -> ({ c : String , e : Unit })) . ((unit as C) . a)) as (({ a : A , d : Bool }) -> ({ a : ({ b : Unit , a : Unit }) , d : C })))
(succ ((succ (false false)) (true c)))
(succ (iszero ({ a = (succ (1 b)) , a = (let d = (false as C) in "apple") })))
(iszero (((let c = (let b = "boy" in unit) in 1) . b) as ({ a : Top , e : Float })))
(iszero (({ d = (let a = b in true) , e = 0 }) . d))
(pred (let e = (if unit then true else false) in (pred false)))
(if ((iszero ({ a = unit , a = a })) as ((Top -> Nat) -> ({ b : Top , c : ({ b : Bool , b : Float }) }))) then (("apple" . c) as ({ c : (String -> A) , a : A })) else (iszero ((pred b) . a)))
(((fix (1 as C)) . c) as ({ b : (B -> Top) , b : ({ c : B , c : A }) }))
({ d = (iszero (fix ({ e = c , c = 2 }))) , a = ((iszero c) (\ c : Float . false)) })
(\ a : (({ d : (Unit -> Bool) , d : B }) -> ({ e : Float , a : Float })) . (let a = (succ (2 "boy")) in (if true then 2 else "apple")))
(iszero ((("apple" . e) as ({ d : Float , b : Nat })) as (Top -> Top)))
(fix ({ b = (pred (let e = 0 in unit)) , a = (({ e = (let d = false in false) , b = a }) (if "apple" then 2 else false)) }))
(((\ c : (Nat -> Float) . (let b = (fix unit) in true)) ({ c = (pred c) , c = (iszero "boy") })) . e)
(((unit . c) . c) as ({ e : ({ e : ({ c : Float , c : Nat }) , e : ({ c : Bool , c : C }) }) , e : (({ a : Unit , c : ({ b : A , a : String }) }) -> ({ b : Top , e : C })) }))
({ e = (succ ({ d = (pred 2) , c = "apple" })) , e = (iszero (pred true)) })
((succ ((if 2 then 0 else true) . d)) . c)
(succ ({ a = (\ a : Bool . unit) , b = (let e = "apple" in true) }))
(pred (let b = (let e = false in 0) in (true as C)))
(pred (iszero (iszero (iszero a))))
({ a = (fix (let a = "boy" in unit)) , e = ((if a then "apple" else "apple") as ({ a : ({ b : C , e : Unit }) , a : Float })) })
(fix (((pred 0) . b) as (({ e : String , c : String }) -> A)))
(\ b : (({ e : Unit , e : A }) -> ({ e : Unit , d : Unit })) . (fix ((\ b : A . "apple") . e)))
(fix ((\ e : ({ a : B , e : Top }) . (let b = false in 2)) . c))
(let b = (if (\ b : (A -> Bool) . (if a then "apple" else c)) then (pred (if "apple" then "apple" else 0)) else (iszero unit)) in (iszero (unit as A)))
(pred (pred ({ e = 0 , c = 2 })))
(fix ({ c = ((unit b) as ({ d : Nat , a : Float })) , d = (iszero (\ b : Float . "apple")) }))
(pred ((\ c : (Bool -> Nat) . "apple") ("apple" . a)))
(if ((iszero c) as ({ c : Float , c : B })) then ((\ a : (({ e : B , b : String }) -> (B -> A)) . (iszero unit)) . c) else (if ((c unit) ({ c = unit , a = "boy" })) then ((iszero 2) . a) else ({ d = (fix unit) , a = (pred "boy") })))
(let a = ((\ a : C . "apple") . e) in (iszero (\ c : (Top -> B) . (let d = c in 1))))
((pred (let a = (\ c : (Top -> Unit) . false) in (if 2 then false else a))) as (((Unit -> Nat) -> String) -> (({ e : String , e : Bool }) -> ({ b : Nat , b : Top }))))
(((b "apple") as (Float -> A)) as ({ e : ({ a : Bool , c : (B -> Top) }) , d : ({ c : ({ d : C , b : Nat }) , b : (Unit -> Float) }) }))
(if (let c = (let e = false in 1) in ("boy" as Bool)) then ({ a = ({ e = 2 , b = 2 }) , a = (if c then unit else 1) }) else ({ b = (iszero (succ "apple")) , b = (iszero ({ e = 1 , b = b })) }))
(\ d : (({ a : ({ d : ({ b : String , d : C }) , b : Float }) , d : ({ b : String , c : B }) }) -> ({ b : (({ c : A , e : A }) -> (Bool -> Unit)) , d : ({ a : C , b : A }) })) . (fix (fix (\ e : B . false))))
(succ (let b = (pred 1) in (let d = (let c = false in 0) in 1)))
(let b = (succ (let a = ({ e = unit , c = false }) in false)) in (succ (let b = c in (fix a))))
(\ c : (((Nat -> Bool) -> (Nat -> B)) -> ({ c : Top , d : A })) . ({ d = (b unit) , e = ({ e = "apple" , c = 2 }) }))
(succ (let c = ({ b = false , b = unit }) in (iszero (succ "boy"))))
(fix (succ (pred (if (\ d : C . 2) then a else (if true then c else true)))))
(\ c : ({ e : ({ b : (Bool -> String) , c : (C -> Unit) }) , d : (C -> String) }) . ((let e = a in (fix true)) . a))
(fix (let c = (pred (\ e : Float . c)) in (succ ({ b = b , e = b }))))
(succ ({ e = ({ b = (iszero true) , c = (let e = "boy" in 2) }) , b = (iszero a) }))
(fix (((1 . c) as Bool) (succ (pred 1))))
(\ a : ((({ a : (Nat -> Nat) , e : Top }) -> (Float -> Top)) -> ({ a : Bool , a : ({ b : Float , e : Nat }) })) . (let c = (let c = "boy" in c) in (1 as String)))
(fix (\ d : ((Float -> Float) -> (Bool -> ({ c : C , c : Unit }))) . ((pred false) (fix c))))
(succ ({ c = (pred (let e = a in 1)) , d = (let d = (\ d : Nat . c) in "boy") }))
(if (\ c : (String -> String) . (fix c)) then ({ e = (iszero 0) , c = (succ (c as B)) }) else (\ e : ({ e : B , b : Bool }) . ({ d = 2 , c = unit })))
(((2 . d) . d) (iszero ({ d = a , e = (let a = b in "apple") })))
(\ c : (((({ b : Nat , a : Float }) -> Bool) -> (A -> Nat)) -> (B -> C)) . (fix ({ e = 1 , e = (false as B) })))
(fix (let b = ({ b = (if a then "apple" else "boy") , c = ({ b = a , b = 0 }) }) in (\ e : (Nat -> Float) . (1 . d))))
(succ (succ (fix (let c = 0 in (pred 2)))))
(let e = (succ (fix unit)) in (let c = (let d = 2 in (iszero "apple")) in (iszero 2)))
(iszero ((succ b) as ({ a : Unit , c : B })))
(if (let e = (if b then unit else 0) in (succ "apple")) then (\ c : ({ a : ({ a : Nat , a : Float }) , b : (Bool -> String) }) . (pred (fix "boy"))) else (let c = (let a = ("boy" . c) in (2 1)) in (iszero (let d = a in c))))
(succ (\ b : ({ b : Float , e : ({ c : B , d : String }) }) . ((pred true) false)))
(fix (fix (if 0 then 1 else c)))
(if (if (fix c) then ({ c = true , b = 1 }) else (if false then "boy" else false)) then ((1 as A) as ((Nat -> A) -> ({ e : A , b : Bool }))) else (let b = (\ d : ({ c : String , c : B }) . (false as Float)) in ((false . c) . d)))
({ b = (fix (((iszero c) as ({ c : Bool , c : Bool })) (if (iszero "boy") then false else c))) , e = (let a = (let a = "boy" in a) in (false unit)) })
(succ (let a = (fix (succ "apple")) in (pred (iszero b))))
({ d = ({ b = (0 . c) , b = ({ b = true , d = (succ c) }) }) , d = (\ e : (({ c : C , c : Top }) -> (Nat -> Nat)) . (let e = "boy" in a)) })
(iszero (pred ({ a = c , a = unit })))
(fix (fix (if true then 1 else unit)))
((iszero (succ (unit . e))) . c)
(\ b : ((Top -> B) -> ((C -> C) -> ({ c : C , b : Unit }))) . (\ c : ({ e : Unit , d : Bool }) . (\ a : ({ b : (Bool -> Nat) , b : A }) . (if "apple" then (succ 2) else unit))))
(succ ((let d = (let c = b in a) in (\ a : B . c)) . c))
(if (fix ((0 (fix 1)) ("boy" (if true then 1 else 1)))) then (((succ false) . b) as ((B -> A) -> ({ b : C , b : Unit }))) else (\ d : ({ d : (Unit -> A) , c : (Top -> Float) }) . (pred 2)))
((let b = (iszero "apple") in ({ a = false , e = false })) as (((Float -> Top) -> ({ a : ({ b : String , e : Top }) , e : C })) -> (({ a : (C -> Top) , d : Bool }) -> ({ d : Unit , a : ({ b : Nat , a : Float }) }))))
(succ ((succ false) as ({ a : Nat , b : B })))
(if (let d = ({ c = (\ d : B . "apple") , e = (0 as Nat) }) in (if unit then 2 else 0)) then (let d = (iszero unit) in (iszero ((true unit) as (Nat -> Nat)))) else (if (unit . b) then (iszero false) else (\ e : C . c)))
(iszero (\ e : ({ e : ({ a : Bool , a : B }) , c : ({ e : B , c : Float }) }) . (fix ({ a = 0 , a = (let a = unit in true) }))))
(\ c : ({ b : (({ c : String , d : (B -> C) }) -> ({ e : Top , a : B })) , b : ((Float -> A) -> String) }) . ((2 as Float) as (Bool -> Float)))
((iszero (pred a)) (iszero (let a = (\ e : C . "apple") in (succ true))))
(if (pred (\ a : Top . b)) then (if (succ 0) then (pred 2) else (\ b : (({ c : B , a : C }) -> B) . ((if unit then true else b) . b))) else (succ (\ d : (String -> Bool) . 0)))
((succ ({ b = (succ b) , d = (pred unit) })) as ({ d : ({ b : ({ c : Bool , c : String }) , c : ((Bool -> String) -> ({ e : Nat , d : Nat })) }) , e : ({ b : (A -> C) , a : (Float -> String) }) }))
(iszero ((let c = ((unit . c) 1) in ({ c = a , b = a })) . c))
(\ e : (({ e : (Top -> Unit) , d : ({ c : ({ e : Nat , e : C }) , e : A }) }) -> ({ e : ((Bool -> B) -> (String -> B)) , a : (({ a : Float , a : Float }) -> Float) })) . (\ e : ({ b : ({ a : Top , b : Unit }) , d : B }) . (0 . a)))
((succ ((unit . e) . b)) . b)
((let c = (succ (if unit then (unit as Unit) else (c as Float))) in ((let d = false in 1) . a)) . e)
(let a = (\ c : (B -> Nat) . (let c = (\ a : Unit . "apple") in (if 1 then (succ "apple") else (pred "apple")))) in ({ c = ((1 as Float) as (A -> Float)) , e = (iszero false) }))
(fix (pred ((let e = ({ e = 1 , b = 0 }) in 0) . a)))
(iszero ({ d = ({ e = ((1 as Bool) as (Top -> Float)) , a = (\ e : Float . c) }) , e = ({ d = 2 , d = (true as A) }) }))
((fix (let e = unit in true)) (let c = (\ a : A . "apple") in (succ "apple")))
(fix ((if 2 then 0 else false) as ((Nat -> Nat) -> (C -> Nat))))
(\ b : ({ a : ({ b : B , d : Unit }) , e : (Bool -> A) }) . (let c = (\ c : Top . unit) in (pred (fix a))))
(succ (iszero (false ("boy" a))))
({ b = ((({ d = false , b = unit }) ({ b = unit , c = b })) (succ (if false then 2 else false))) , a = (succ (iszero (fix 0))) })
(if (fix (fix 1)) then ((pred (succ 0)) . a) else (fix (fix (2 b))))
((succ (fix c)) as ({ d : ({ e : (String -> Float) , a : (Unit -> C) }) , b : ({ b : (C -> Unit) , d : ({ c : Bool , e : (Unit -> C) }) }) }))
(pred (if ({ a = "boy" , e = (fix 0) }) then (iszero false) else (succ b)))
(pred ({ b = (if false then a else (succ false)) , c = (let e = (pred 1) in a) }))
((iszero (true . e)) (iszero ((c as B) . d)))
(iszero (pred ({ b = (succ c) , b = (let e = "boy" in 2) })))
(iszero (((fix 0) . b) ({ e = (succ true) , b = ("apple" as Nat) })))
(if (if (fix (fix true)) then ({ e = ({ a = false , c = true }) , b = ({ b = ({ a = 0 , a = false }) , e = true }) }) else (succ (iszero a))) then (\ c : ({ d : Bool , c : Bool }) . (fix 2)) else (({ a = 0 , c = "boy" }) (let a = "boy" in false)))
(fix (iszero (pred (\ d : B . 2))))
(if (if ({ c = (let a = b in "boy") , e = false }) then ((2 as Nat) as ({ d : (Bool -> Bool) , a : ({ a : A , c : C }) })) else (fix (let c = 2 in (\ a : Top . false)))) then (iszero (if (let a = true in a) then (if 2 then 2 else 0) else ((fix 1) as (Bool -> A)))) else ((if 1 then 0 else false) . c))
(let d = (iszero (\ a : Top . a)) in ({ a = (iszero "apple") , d = ("boy" . a) }))
(pred (({ a = unit , c = 0 }) (unit as Bool)))
(\ c : (({ b : ({ c : (C -> Top) , e : ({ b : A , b : Nat }) }) , e : (Unit -> ({ d : Unit , b : String })) }) -> (({ d : B , e : Nat }) -> (Nat -> Nat))) . ((\ a : Bool . c) ((pred false) . a)))
(let a = ((if (let c = 2 in false) then 2 else (let c = 2 in unit)) as ({ c : ({ a : C , d : B }) , a : ({ b : A , d : Float }) })) in ((pred b) ({ d = unit , b = b })))
(if (fix (succ (\ a : C . 2))) then ((0 . a) ({ d = false , b = (succ "boy") })) else (if ((unit . e) as ({ c : Bool , d : String })) then (if (fix "boy") then (\ c : B . 2) else ((unit c) . e)) else ((fix c) . c)))
(if (iszero (fix c)) then (iszero (\ a : Unit . a)) else (fix (fix (succ 0))))
(iszero (\ d : ((C -> A) -> (B -> String)) . (\ a : (Nat -> B) . (iszero "apple"))))
(iszero (iszero ({ b = 1 , c = "apple" })))
(iszero (succ (let d = (c . b) in (a c))))
(let b = (((succ 2) . a) (let a = 2 in 1)) in (((true b) . c) as ({ c : ({ d : A , c : Top }) , c : ({ b : Top , a : String }) })))
(\ c : ({ e : ((Unit -> Float) -> (Unit -> Nat)) , d : (({ c : A , c : Bool }) -> (String -> Bool)) }) . ((true c) . a))
({ b = (let e = (\ e : B . 2) in (let c = b in a)) , c = ((pred 0) as ((Float -> ({ a : Float , b : Top })) -> ((Top -> Top) -> String))) })
(succ (iszero (iszero 2)))
(let e = ({ d = ({ c = unit , d = 0 }) , e = (\ a : Float . (iszero a)) }) in (fix ("apple" . d)))
({ c = (((succ 2) as ({ b : Unit , b : Bool })) . a) , d = (let d = (fix 1) in ((unit as A) as ((C -> Bool) -> Float))) })
(succ (succ (unit a)))
((if (b 0) then (c . e) else (pred (iszero "apple"))) (\ e : ({ c : Top , c : Unit }) . ((fix false) as (Nat -> A))))
(if (\ d : ({ e : C , a : Top }) . (fix (\ c : Top . true))) then ((succ 1) as (Unit -> ({ e : Nat , b : C }))) else (let d = (pred 2) in (succ 0)))
(iszero (fix (a as (Bool -> Float))))
({ c = ((\ a : A . a) (b as A)) , d = ((let d = ({ b = a , c = 1 }) in 2) . b) })
((pred (succ c)) . c)
({ a = (pred (false as Top)) , b = ((false "boy") (iszero "apple")) })
(fix (\ c : (Top -> B) . (true . d)))
(iszero ((fix (let d = 0 in "apple")) ((0 . d) as ({ a : Unit , e : B }))))
(let e = ((pred (fix c)) as ((Top -> String) -> Bool)) in (if (if unit then b else 0) then (iszero (fix b)) else (let d = (\ e : ({ d : Float , d : Nat }) . a) in ({ d = false , d = 1 }))))
((let c = (\ a : ({ b : Bool , b : B }) . (succ true)) in (\ b : (A -> B) . 0)) as ({ a : (C -> C) , e : ({ e : C , d : ({ b : Unit , e : Bool }) }) }))
({ e = ((let d = (pred 0) in (pred true)) ((let e = 2 in unit) . c)) , d = (iszero (if 0 then 1 else 0)) })
(pred (succ ((b as Float) as ({ b : Top , a : A }))))
(fix (if (\ a : Float . 1) then (if "apple" then true else a) else (let e = "apple" in "apple")))
(fix (pred ("apple" 0)))
(iszero (succ (iszero unit)))
(fix ((iszero (pred 1)) . b))
(iszero (succ (succ (fix c))))
((\ a : ({ a : Bool , a : Float }) . (\ a : ({ a : String , a : A }) . (if c then 1 else b))) . c)
(succ ((pred 2) as ({ e : Bool , e : B })))
(pred (succ (if 1 then "boy" else false)))
(iszero (\ e : ((B -> Unit) -> (Top -> Nat)) . (unit . c)))
(succ (iszero (iszero 2)))
((succ (succ (succ 2))) . d)
(({ c = ({ e = (let e = (if true then 0 else "boy") in (fix b)) , b = ({ d = (if false then false else a) , a = (succ 2) }) }) , e = (let c = (\ c : B . a) in (\ c : String . 0)) }) as (({ b : ({ d : String , b : A }) , b : (Bool -> Unit) }) -> ((Top -> Float) -> ({ b : Float , c : C }))))
(iszero ((\ d : ({ b : Float , d : C }) . (true as A)) . e))
((iszero (let e = 0 in a)) . c)
(((if 1 then (let d = 2 in c) else false) (unit "apple")) . a)
({ d = ({ b = (iszero 1) , a = (0 . d) }) , b = (iszero (fix unit)) })
((fix ((\ a : B . "boy") 1)) as ({ d : (Unit -> B) , c : ({ c : Unit , c : Nat }) }))
(if (iszero ((succ 0) . a)) then (\ d : (Float -> Nat) . (succ (\ d : ({ c : Bool , b : Unit }) . ({ e = "apple" , a = "apple" })))) else (let c = (if (\ c : Unit . 0) then (iszero unit) else ((succ 1) . e)) in (let c = (\ d : Unit . 0) in ({ d = b , a = (\ a : Float . b) }))))
(({ c = (a as Unit) , c = ({ e = (let d = 2 in a) , e = 1 }) }) ((fix (succ 2)) ({ e = 0 , a = "boy" })))
(let b = ((iszero 1) (pred true)) in (if (let b = true in a) then (let b = false in c) else (let d = 0 in c)))
(succ (let e = ("apple" 0) in (succ false)))
(if (\ a : (Bool -> Unit) . (iszero a)) then ((fix true) . c) else (succ (fix unit)))
((let e = (if a then ({ e = a , c = 1 }) else (succ "apple")) in ((true (1 1)) as (Float -> A))) (fix (pred (pred 2))))
(pred ({ a = ((c as Unit) . e) , a = ({ a = (let e = (let a = c in "boy") in (a as String)) , c = (pred "boy") }) }))
(fix (if (\ c : Unit . unit) then (fix b) else ("boy" (iszero "apple"))))
(if ((\ a : String . (\ e : A . false)) (c as ({ a : B , d : Nat }))) then ((if (succ 0) then (iszero (succ a)) else (c as B)) as ({ a : Nat , a : (Unit -> String) })) else (iszero ((unit as C) . d)))
(fix (succ (pred false)))
((iszero (let e = true in (a . d))) . c)
(iszero (pred ("boy" as Bool)))
(\ e : ({ b : ({ b : Top , a : (A -> Float) }) , c : ({ e : Nat , e : B }) }) . (if (iszero false) then (let c = (1 "apple") in unit) else (c . a)))
(\ d : (({ c : (Bool -> Top) , d : Float }) -> ((({ d : Top , c : Nat }) -> Nat) -> (String -> Bool))) . ((\ d : (Top -> C) . ((pred a) "boy")) . e))
(succ (("boy" . d) . a))
((\ a : (({ c : B , d : A }) -> (Float -> B)) . ("boy" as A)) as ((({ e : String , a : C }) -> (String -> B)) -> ({ b : ({ c : String , c : Top }) , d : ({ c : String , a : C }) })))
(if ((iszero ((iszero true) as ({ a : Unit , c : Bool }))) (("boy" 1) as ({ c : Nat , b : C }))) then (if (if (unit c) then b else 1) then (pred "boy") else (iszero "apple")) else ((if (iszero ({ c = unit , c = c })) then (iszero 1) else (pred ({ c = 1 , e = true }))) as ((String -> Unit) -> (String -> C))))
(if (iszero (if (let e = (\ a : Unit . "boy") in true) then ("boy" a) else ("apple" (\ e : C . true)))) then (iszero (succ false)) else ((iszero true) . e))
(fix (let a = (if unit then (let e = true in c) else ({ e = 2 , b = c })) in (if true then 0 else c)))
(fix (if (iszero c) then (let b = 0 in c) else (\ b : B . (\ b : Bool . a))))
(iszero ({ b = (1 unit) , c = (2 (iszero true)) }))
((pred (pred (true false))) . b)
({ e = ((\ b : C . false) . a) , c = (succ (fix c)) })
(((if 2 then 2 else b) as ({ c : B , b : C })) as ({ d : (B -> (C -> A)) , e : ({ b : Nat , c : Bool }) }))
(\ d : ({ c : ({ b : Bool , d : (Float -> String) }) , e : ((Top -> Unit) -> ({ c : Nat , b : C })) }) . (if (pred (let e = unit in 1)) then (iszero (if 1 then 2 else 0)) else (1 . d)))
(\ a : ({ a : ({ a : ({ c : Nat , a : C }) , d : (Float -> Nat) }) , a : (({ b : Nat , e : Top }) -> ((Top -> C) -> (Nat -> Nat))) }) . (iszero (succ 1)))
(let b = (if (\ e : ({ b : B , e : B }) . (2 as Bool)) then ((false as B) . b) else ((fix a) 2)) in (iszero (a 0)))
(iszero (\ d : ({ b : ({ a : Nat , a : Bool }) , c : (Top -> String) }) . (b . e)))
(iszero (pred (if (if unit then unit else a) then ((fix 0) . e) else ((a . c) . a))))
(let b = (fix (iszero ("boy" . c))) in ((iszero (iszero b)) as (Float -> ({ b : Bool , e : B }))))
((\ e : ({ c : ({ a : C , a : B }) , a : (Nat -> C) }) . (pred (fix 0))) ((2 as ({ e : Nat , b : Unit })) as ({ d : (String -> Float) , e : (Float -> C) })))
({ b = ({ d = (a 2) , a = (succ 0) }) , a = ((let b = 2 in c) (fix "boy")) })
(\ b : ({ b : (Nat -> B) , e : ({ c : Unit , a : C }) }) . (\ a : ({ a : Unit , b : String }) . (c true)))
(iszero (succ (pred a)))
(fix (pred (if "apple" then true else 2)))
(\ e : ({ b : (B -> C) , b : ({ d : Nat , e : Top }) }) . (succ (if 2 then c else unit)))
((iszero (if 1 then 0 else (b a))) . e)
(({ d = (iszero false) , b = (let c = "boy" in (iszero "boy")) }) . e)
(((b . a) as (Nat -> Unit)) ((fix ({ c = b , d = "boy" })) (succ (if true then false else "apple"))))
(succ (iszero (("apple" c) ({ d = unit , e = b }))))
(let a = ({ e = (succ (iszero false)) , b = (false as ({ a : Float , e : B })) }) in ((pred 0) as (String -> String)))
(fix (if ({ a = false , a = false }) then ((\ d : Top . 0) c) else (if "boy" then (a . e) else (c as String))))
(\ a : (({ c : ({ d : (Unit -> Top) , b : C }) , d : (({ c : Top , b : B }) -> ({ d : A , c : Top })) }) -> (B -> Nat)) . ((c 1) as (({ d : B , e : Unit }) -> A)))
(((iszero ({ d = (true unit) , e = 1 })) as (Unit -> (B -> String))) as ((B -> Float) -> (Unit -> B)))
((pred (fix (fix unit))) . a)
(if ({ c = ((\ d : Bool . unit) true) , c = (if false then "apple" else 0) }) then (({ d = (fix true) , c = c }) . d) else (let c = (if "boy" then "boy" else (\ c : Nat . 2)) in (fix ("boy" as B))))
(succ (pred ((iszero c) (if "boy" then unit else unit))))
(pred (\ d : ({ a : (A -> Unit) , a : String }) . (\ a : (Top -> Unit) . false)))
(\ d : (({ a : ({ a : Nat , d : Nat }) , d : ({ a : B , c : C }) }) -> ({ d : ({ d : Top , e : Float }) , c : (B -> Top) })) . (fix ((b as C) . e)))
((fix (pred (iszero 1))) . a)
((("apple" as Unit) as ({ c : A , b : A })) as ({ a : (Top -> (Top -> Nat)) , e : (B -> (Bool -> Float)) }))
(pred ((false as ({ a : Unit , a : Nat })) (succ "boy")))
(\ a : ({ d : ((Top -> (C -> Nat)) -> ({ d : ({ b : C , d : Float }) , b : ({ c : C , e : Unit }) })) , d : (({ e : String , e : Float }) -> (B -> Bool)) }) . ((\ a : String . "apple") . d))
(\ d : (({ a : ({ e : A , d : Top }) , a : (Unit -> String) }) -> ((Bool -> Float) -> Float)) . (({ d = false , d = b }) as ({ d : Nat , d : Top })))
(succ ((pred (let c = (false as String) in 1)) . b))
(if (succ (let c = "boy" in "boy")) then ((pred c) (if b then (\ b : B . a) else 0)) else (\ b : (C -> Top) . (\ c : C . 2)))
((fix (b . e)) . e)
(iszero (\ a : ({ e : (Nat -> Bool) , d : ({ b : A , e : Top }) }) . (succ false)))
(pred ((let c = (succ true) in (iszero b)) . a))
(let e = (if ("apple" as String) then (succ 0) else (iszero (fix 1))) in (iszero (let c = a in 1)))
(succ (iszero (iszero false)))
(if (pred ((2 . d) (c 1))) then ({ c = (if unit then 2 else true) , a = (\ d : B . true) }) else (iszero (succ "apple")))
(iszero ({ b = (fix (if a then b else false)) , c = ((pred 0) . b) }))
(fix (fix (fix ("apple" as Nat))))
({ d = (fix (succ 1)) , c = ((succ b) . a) })
(\ b : ((({ e : C , d : A }) -> ({ d : Float , b : B })) -> ({ a : Float , d : (Unit -> Unit) })) . ({ b = ({ a = (if "boy" then false else "apple") , b = (pred 2) }) , c = (0 as Top) }))
({ c = ((false true) . b) , c = ((false as (String -> String)) (a . d)) })
(\ a : ({ c : ({ b : Nat , a : B }) , c : ((Bool -> C) -> (Nat -> Bool)) }) . ({ e = ("apple" 0) , b = ({ d = unit , b = 1 }) }))
(fix (fix (if true then "apple" else "apple")))
(let e = (({ d = (iszero unit) , d = (iszero (b as Top)) }) (succ (fix 2))) in (fix (fix ("boy" . a))))
(iszero ((let d = (\ e : C . "apple") in (iszero "apple")) . e))
(((if a then "apple" else ("boy" . e)) (a as ({ c : String , c : Top }))) . d)
(fix (succ (2 2)))
({ e = (if (\ e : (String -> B) . (unit as Top)) then (\ e : A . "apple") else ({ d = (iszero 2) , e = (pred c) })) , a = (\ a : (Bool -> Top) . (c 0)) })
(((succ ((succ "apple") 0)) . d) as ({ e : (({ b : B , e : Bool }) -> ({ a : Float , b : A })) , d : ({ c : (Nat -> String) , c : (C -> ({ b : C , d : Nat })) }) }))
(iszero (succ (({ c = 1 , c = 0 }) as Bool)))
(iszero (let e = (fix (pred "boy")) in ((2 as (A -> Bool)) as ((C -> Unit) -> String))))
((((iszero a) . e) ((if 0 then a else a) . d)) (iszero ((\ b : (B -> C) . false) (true as Bool))))
(iszero (\ e : ({ d : (({ a : Float , b : Nat }) -> Bool) , d : ({ c : String , c : Unit }) }) . ((c . a) . d)))
({ e = (iszero (c . e)) , c = ((pred (fix c)) (fix (fix "boy"))) })
(fix ((fix "apple") as ({ e : ({ e : Nat , d : Unit }) , e : (C -> Bool) })))
(pred ((succ true) . c))
({ b = (((if "apple" then 0 else unit) as (Nat -> String)) . b) , b = (iszero (iszero c)) })
(iszero (((if 1 then "apple" else "apple") . d) as (Nat -> ({ c : Unit , e : A }))))
({ c = ({ e = ({ b = (c 2) , c = unit }) , c = (a c) }) , a = (\ d : (String -> Unit) . (\ c : String . true)) })
(if ({ c = (if "boy" then 0 else "apple") , e = (fix (unit as String)) }) then (if ((iszero unit) (pred "boy")) then (\ b : (Float -> ({ e : Unit , c : Top })) . (pred "boy")) else (let d = (c "boy") in c)) else (({ e = a , b = b }) . e))
((({ e = (fix false) , c = (\ c : Top . 1) }) (iszero (iszero unit))) . a)
(fix (let e = (iszero "boy") in ({ b = false , e = b })))
(\ d : ((({ a : A , c : Unit }) -> ({ a : A , c : A })) -> (({ e : Unit , c : String }) -> ({ d : String , d : A }))) . (((\ b : Bool . 0) (fix c)) as (A -> Unit)))
(fix (let d = (if (a c) then (2 unit) else (0 . c)) in (\ c : ({ e : String , e : A }) . true)))
(fix (if (if c then b else true) then (let b = a in 0) else (pred (\ a : Bool . 1))))
({ e = (succ ({ c = c , d = (pred c) })) , e = (fix (fix (iszero b))) })
(({ d = (a . c) , e = (pred (pred true)) }) . b)
(let a = (iszero (false . a)) in ((if (fix 1) then (\ e : Top . unit) else (let a = (iszero "boy") in (pred 0))) as ({ e : (Unit -> C) , e : ({ c : (Bool -> String) , b : Unit }) })))
(iszero ((if 1 then ({ a = "apple" , c = false }) else 2) as (Float -> Float)))
(succ ((succ (false as ({ a : C , a : C }))) . d))
(if (fix ((pred c) as (Nat -> ({ e : B , e : C })))) then (iszero (let b = (fix ("apple" as B)) in (let b = b in c))) else (if (fix ({ d = 2 , c = unit })) then (0 . c) else (iszero a)))
((fix (succ "apple")) as (({ e : ({ e : Top , d : B }) , b : ({ d : A , d : ({ a : A , b : Float }) }) }) -> ((Unit -> String) -> B)))
(if (iszero (b "apple")) then ((if ("apple" as A) then 0 else b) . e) else (pred (0 . e)))
((iszero (if 0 then false else c)) as (({ a : Bool , a : Float }) -> ({ a : ({ c : String , b : Bool }) , c : (B -> Unit) })))
(((iszero unit) ({ a = b , d = c })) as ({ b : (Nat -> B) , b : ((Top -> C) -> ({ b : String , d : Nat })) }))
(succ (succ ({ b = (succ unit) , e = "boy" })))
({ d = (if (1 . d) then (if b then unit else a) else (fix (iszero "apple"))) , a = (succ ({ b = (pred "boy") , a = (pred a) })) })
(((let a = 0 in 1) ((let b = 0 in false) (fix a))) ({ e = ((c 0) as Top) , e = (a . a) }))
(((fix 2) as ({ d : B , b : String })) ({ d = (pred true) , a = (pred (c as C)) }))
((fix (unit . b)) (let b = ({ e = a , b = ({ a = unit , a = 0 }) }) in (if (succ 2) then "apple" else 2)))
(pred (iszero (({ e = 0 , c = 1 }) (iszero a))))
(iszero (succ (1 . d)))
((\ c : ((Nat -> String) -> Nat) . (let c = (1 . b) in (\ c : Float . false))) . b)
(let d = (let a = (pred "apple") in (fix 1)) in ((succ false) as (({ a : C , c : B }) -> ({ d : Top , c : C }))))
((iszero (iszero (fix unit))) (pred (if ({ b = a , d = a }) then (\ b : ({ d : Nat , b : A }) . (let e = "apple" in 1)) else (pred c))))
(pred (fix (succ ({ e = 1 , b = unit }))))
(((if (\ d : String . 0) then (1 . b) else 2) as (C -> C)) . b)
({ e = ((let c = 1 in false) . b) , a = (\ c : ({ e : Nat , d : C }) . (\ a : B . 0)) })
(\ e : (((Nat -> B) -> (C -> String)) -> ({ e : ({ a : Nat , e : Top }) , c : A })) . ((0 . e) . e))
(fix (succ (c . b)))
(\ a : (({ d : Top , a : String }) -> (B -> Top)) . ({ d = (succ 2) , b = ("apple" "boy") }))
(succ (let d = (({ a = c , b = false }) (iszero ("boy" . e))) in ({ a = (succ "boy") , d = ({ b = 2 , c = a }) })))
((iszero (let b = (succ unit) in (let e = "apple" in unit))) . a)
(fix ((fix (iszero "apple")) (if (pred "apple") then (let b = b in 0) else (false as C))))
((iszero ((if a then b else 1) as ({ a : Float , b : C }))) (succ (\ a : Bool . true)))
(pred (\ e : ((A -> B) -> ({ e : A , e : C })) . ((fix (c unit)) (fix a))))
((\ b : ({ c : String , c : (Float -> Top) }) . ("apple" as C)) (\ d : (Float -> A) . (fix (pred false))))
(\ b : (({ e : ({ a : Top , b : Float }) , a : (A -> C) }) -> (Bool -> ({ d : Nat , a : B }))) . (fix (2 b)))
({ e = (succ (let a = (pred (\ a : Nat . a)) in (succ (b as A)))) , e = (succ (succ c)) })
({ c = (if ((fix "apple") as (Nat -> String)) then (\ e : Bool . true) else ((succ false) . d)) , b = (succ (pred (a as Unit))) })
(((iszero (unit a)) . a) as ((String -> A) -> (B -> Top)))
(({ b = (succ 1) , b = (fix 0) }) as ((Bool -> (Top -> Unit)) -> ({ e : ({ b : String , c : B }) , d : ({ a : Float , b : String }) })))
(succ (((succ a) (unit . d)) (iszero (\ a : A . b))))
(let c = (let d = (true . e) in (pred unit)) in ({ d = (iszero (succ unit)) , a = (\ d : (String -> Float) . (true . a)) }))
(if (succ ((c c) as ({ c : Unit , c : Unit }))) then (pred ({ c = (\ a : Nat . unit) , b = ("boy" unit) })) else (iszero (fix (c true))))
(\ e : ((Bool -> Bool) -> ({ e : ({ d : A , c : Float }) , c : Bool })) . (iszero ({ a = (fix 2) , e = 1 })))
(if (let d = (succ false) in (true as Unit)) then (if (\ b : C . false) then (iszero (if 0 then "apple" else "apple")) else ({ d = ({ d = 1 , d = true }) , c = 2 })) else (if (\ a : B . b) then (iszero "apple") else (pred b)))
((pred (\ c : Nat . a)) . b)
(if ((b . d) . a) then ({ b = (succ (succ false)) , e = (pred (succ c)) }) else (fix (pred b)))
(if (\ d : ((Top -> B) -> (A -> String)) . (\ c : Bool . true)) then (fix ({ e = (let a = true in b) , c = (pred 2) })) else (let c = (unit as Bool) in (if 0 then (pred a) else false)))
(let e = (if (\ c : Top . false) then (fix ("boy" "apple")) else (a . e)) in ({ b = (\ e : ({ e : C , a : String }) . (a "boy")) , e = ((\ b : Bool . true) (pred true)) }))
(\ a : ({ e : (A -> Top) , b : (Unit -> Nat) }) . ((\ a : Float . (iszero true)) . e))
(({ d = (if false then 0 else "apple") , c = (fix a) }) . a)
(if (\ e : ({ c : (A -> Nat) , a : (({ d : Float , e : Unit }) -> ({ a : Unit , c : C })) }) . (1 true)) then ((false true) (fix "apple")) else ((("boy" as Top) as (String -> Top)) as ({ d : Unit , e : B })))
(\ d : ({ d : ({ a : (Bool -> Bool) , d : (String -> String) }) , b : ({ a : (Nat -> Unit) , c : ({ d : Bool , a : B }) }) }) . (pred (let a = (a . b) in 1)))
(pred ((iszero (\ e : String . unit)) . d))
(pred ((true (fix "apple")) as ((A -> Bool) -> C)))
(iszero (({ b = (pred "boy") , c = true }) (({ d = b , c = 2 }) as ({ c : Unit , a : ({ e : Nat , c : Unit }) }))))
(iszero (succ (succ ({ b = "boy" , e = (unit . e) }))))
({ d = (pred (fix (let e = "apple" in unit))) , a = (\ a : (B -> C) . (if "apple" then 2 else a)) })
(\ d : ((A -> ({ b : Float , c : Nat })) -> (Float -> Nat)) . ({ b = (\ b : Nat . b) , a = (false . b) }))
(pred (if (({ e = "apple" , b = 2 }) b) then (iszero ({ a = 2 , d = "apple" })) else ({ c = 1 , d = (succ c) })))
(((let e = ((fix a) . e) in (false 1)) . e) . b)
((\ d : (Float -> B) . (succ ({ b = 1 , a = 0 }))) as ({ d : ((Unit -> A) -> ({ c : ({ a : Float , c : String }) , b : Top })) , d : (((B -> Bool) -> Unit) -> ({ c : Top , c : Top })) }))
(((succ ({ c = b , a = b })) as ((Unit -> Float) -> C)) as ((C -> String) -> ({ a : C , e : A })))
(pred (pred (fix c)))
(iszero (if (if b then "boy" else (fix true)) then (\ a : (A -> A) . 1) else ({ e = false , c = true })))
(fix (if (let b = b in (fix b)) then (b as (C -> Float)) else (false . b)))
(if (if (true as Unit) then (a as ({ e : String , b : A })) else ((1 b) as Nat)) then (iszero (let d = 1 in a)) else (\ c : ({ a : Nat , b : String }) . (fix (let a = 0 in "apple"))))
(pred ((pred ("boy" . d)) as ({ c : Float , e : A })))
({ a = ((iszero (let b = c in true)) . e) , c = (pred (\ c : Float . 0)) })
(succ (pred (2 as (Bool -> Float))))
(((pred (fix "boy")) . d) as ({ b : ((Float -> String) -> (C -> A)) , d : ((Nat -> B) -> ({ c : Unit , d : String })) }))
(\ c : ({ d : ({ c : ({ c : (String -> Top) , a : C }) , b : ({ b : ({ e : Nat , e : A }) , e : ({ c : Top , a : Top }) }) }) , a : (({ e : String , d : String }) -> ({ b : A , c : Nat })) }) . (pred (\ a : ({ b : (A -> B) , d : ({ e : Float , c : Nat }) }) . (fix c))))
(let a = (if (if b then "apple" else 1) then (fix c) else (succ false)) in ({ b = (true "boy") , d = (if (unit true) then (unit . d) else ({ d = 1 , a = 2 })) }))
(\ c : ({ a : (Unit -> String) , d : ({ b : Unit , e : Top }) }) . (iszero (pred false)))
(if (succ (let a = (iszero a) in "boy")) then (let b = ("boy" ({ e = 1 , d = 0 })) in ((let b = false in true) . d)) else ((\ c : ({ b : String , b : B }) . (true 2)) as ({ c : ((String -> Nat) -> (Bool -> Float)) , b : ({ c : Bool , b : Bool }) })))
(let d = ({ d = (b as Nat) , d = (if unit then c else unit) }) in (succ (\ a : C . a)))
(if (fix (fix (if (if 0 then true else "apple") then false else false))) then (iszero (succ (\ a : B . "apple"))) else ((c as (Top -> C)) . c))
(pred ((let d = (a as String) in 0) . e))
(if ((pred (succ 0)) as ((A -> Nat) -> ({ e : ({ d : Unit , b : Float }) , a : ({ e : C , c : Unit }) }))) then (fix (\ a : A . "apple")) else ((fix (if 2 then 2 else 2)) as ({ e : ({ c : ({ e : Float , e : Unit }) , c : ({ c : C , e : B }) }) , d : (Nat -> C) })))
(iszero (if ((false . c) (let a = (unit a) in (false . d))) then (if (\ a : C . (succ 1)) then (iszero c) else (\ e : Bool . c)) else ({ c = (fix 1) , b = "boy" })))
(\ c : (({ d : Top , e : C }) -> ({ a : (({ d : Top , d : Float }) -> B) , e : (B -> Top) })) . (\ d : (({ c : Nat , e : Top }) -> (String -> Float)) . (fix (succ 0))))
(\ b : (({ c : String , c : String }) -> ({ c : Float , e : Nat })) . (("apple" as B) (succ (succ 1))))
(let e = ((let d = 0 in "boy") ("apple" . d)) in (fix (if (pred a) then (0 as String) else ({ b = a , e = false }))))
(fix (((b . a) . d) (pred (succ "boy"))))
(pred (if (\ b : ({ c : String , c : Nat }) . (succ (2 as A))) then (succ (true . d)) else (\ a : Unit . false)))
(if (iszero ((false as A) (\ d : A . b))) then (succ (succ 0)) else ((true . e) as (C -> A)))
({ d = (if (if (let c = ({ c = "boy" , b = c }) in 2) then (pred unit) else (false . e)) then ((iszero a) . b) else ((iszero 0) . c)) , a = (iszero (2 . b)) })
({ d = ((({ d = b , a = 1 }) as (Float -> ({ c : Float , b : String }))) ((fix c) (a as String))) , e = (if (c . e) then (c 1) else (if 0 then true else 1)) })
(((fix (fix "boy")) as (B -> A)) (((false . a) as (A -> B)) (fix 1)))
(pred (fix (fix ("apple" as C))))
(let d = (if (unit true) then (if 1 then c else "apple") else (let c = "boy" in (pred a))) in (\ c : (Top -> Bool) . (c as Unit)))
(iszero ((let a = true in "apple") (0 as Top)))
({ c = (succ (\ b : (Top -> Nat) . ((\ b : String . "apple") (if 2 then "apple" else false)))) , d = (fix (fix (succ unit))) })
(if (\ a : (Top -> A) . (let d = 2 in "apple")) then (((iszero 2) . d) ({ c = (succ c) , d = ("boy" as (B -> A)) })) else (succ ("boy" a)))
(let c = (((let b = true in "boy") as (Unit -> A)) . a) in ((let d = (let a = false in "boy") in ("boy" "boy")) (\ d : (A -> Bool) . (fix false))))
((if (pred true) then (if unit then 0 else a) else (pred unit)) as (({ c : String , e : ({ a : Float , d : Top }) }) -> ({ b : (Nat -> C) , b : Unit })))
((((fix true) (if b then "boy" else unit)) as (({ e : String , e : A }) -> A)) as ({ e : (String -> A) , d : ({ a : ({ a : Nat , b : Float }) , e : (C -> Float) }) }))
(if (succ ((iszero 0) (c . b))) then (\ b : (({ c : Unit , b : (C -> Nat) }) -> ({ a : Unit , a : B })) . (iszero (false "boy"))) else (let e = (false (2 . e)) in (\ c : ({ a : Nat , e : String }) . (let d = "apple" in c))))
(pred (fix (succ a)))
({ c = (\ b : (Bool -> Bool) . ((0 as B) false)) , b = ((iszero 1) as (Top -> ({ a : C , c : A }))) })
(if (iszero (pred b)) then (pred (\ b : B . true)) else (fix (if (fix "boy") then 1 else "boy")))
({ a = (pred (2 1)) , b = (let b = (succ "boy") in ("apple" (true true))) })
((\ d : ({ c : A , e : A }) . (pred false)) as (({ e : Nat , c : String }) -> (String -> B)))
(if ({ b = (let c = b in (pred 0)) , d = (if "boy" then ("apple" "boy") else false) }) then (if ((succ b) (pred "apple")) then ({ e = "apple" , c = 1 }) else (iszero (pred (a c)))) else ((1 1) as (B -> Float)))
(({ e = ((2 2) as Top) , c = (succ (1 "apple")) }) as ({ a : ({ e : Nat , e : Nat }) , b : (({ b : C , e : A }) -> C) }))
(succ (if ((0 . d) (succ true)) then ((fix 1) (fix false)) else ((0 false) as String)))
((pred (if (iszero 0) then (iszero (let b = 0 in false)) else (a . b))) as ({ c : (({ b : B , e : ({ d : String , b : Bool }) }) -> ({ e : Top , a : Nat })) , e : ({ c : (Top -> Nat) , e : Unit }) }))
(((\ d : ((String -> String) -> ({ c : C , d : B })) . (iszero false)) (("apple" . b) as (Nat -> Top))) as ({ e : (String -> Nat) , d : ({ e : Unit , e : A }) }))
(fix (iszero (a . c)))
(if ((if ({ d = c , e = b }) then "apple" else (0 . a)) ((succ unit) (fix a))) then (iszero ({ e = (c as Top) , e = (\ c : Bool . (iszero c)) })) else ({ d = (iszero (succ "boy")) , c = ({ d = "apple" , c = true }) }))
(succ ({ b = (succ "boy") , a = (succ false) }))
((fix ((fix false) . e)) ((fix (0 as A)) as ((B -> Bool) -> (Unit -> Top))))
((pred (c as B)) . e)
((if ((pred "boy") (a (let b = true in c))) then (2 as (Top -> String)) else (fix (succ 2))) as (({ b : ({ b : (Nat -> String) , a : ({ a : Float , d : Bool }) }) , c : ({ c : Nat , a : Bool }) }) -> ({ a : (Bool -> B) , c : ({ d : (C -> Unit) , c : (Top -> Unit) }) })))
((\ a : ({ e : (C -> B) , a : (Nat -> B) }) . (\ a : B . (let a = a in 1))) (\ c : ({ b : Float , c : String }) . (("boy" a) (fix a))))
(({ d = (pred a) , c = (let c = c in (unit as A)) }) as ({ d : ({ c : Float , b : String }) , b : (String -> ({ b : Unit , c : Unit })) }))
(fix (if (fix 2) then (fix (let a = (pred true) in (pred 2))) else (pred (iszero "apple"))))
(if (succ (let e = a in ({ e = b , d = 2 }))) then (\ c : (Float -> Top) . ({ e = 2 , e = unit })) else (if (pred ((fix false) (c as A))) then (succ (fix a)) else (iszero "apple")))
(\ e : ({ d : (({ c : A , d : B }) -> B) , e : (Float -> Bool) }) . ((succ false) (\ b : (A -> C) . b)))
(let a = (\ a : ({ b : C , b : A }) . (\ b : ({ a : Unit , b : B }) . ("apple" as B))) in (pred ({ e = "boy" , d = b })))
({ b = (fix (false . b)) , e = ({ c = (iszero b) , d = (\ a : ({ a : B , e : A }) . (fix 0)) }) })
(fix (if (let a = c in false) then (pred 1) else (let a = (2 . c) in "apple")))
((((2 as Unit) . b) . b) as ({ e : ({ e : Float , b : ({ b : Nat , e : String }) }) , e : ({ a : B , c : (Float -> String) }) }))
(if ({ a = (let b = (let b = unit in 2) in false) , e = (iszero 2) }) then ((unit . a) (iszero (let e = "boy" in "boy"))) else (((let d = a in 2) as ({ e : B , e : Bool })) . e))
((let b = ({ b = (iszero 1) , b = (true true) }) in (pred (iszero "apple"))) . a)
(iszero (iszero (\ c : Top . "boy")))
(((if 0 then (pred 2) else "apple") ({ b = a , e = 1 })) (iszero (unit as (String -> C))))
(if (iszero (fix "boy")) then (if (fix a) then (let d = true in (fix unit)) else ("apple" 1)) else (pred ((if c then (succ false) else (\ a : Unit . 1)) as ({ e : String , e : C }))))
(pred (iszero (iszero ({ d = 2 , a = "apple" }))))
(\ d : ({ d : ({ a : ({ b : Nat , a : Nat }) , e : (Nat -> Float) }) , a : ({ c : ({ e : C , c : Float }) , c : ({ a : Top , a : Float }) }) }) . (let a = (let c = (true 1) in (fix 2)) in (if (\ b : String . a) then ({ b = a , b = 2 }) else (false as String))))
((succ (iszero (succ 1))) . e)
({ d = (if (if true then a else 1) then ((succ (pred 0)) (iszero a)) else (false (let b = unit in b))) , e = (let c = ({ c = (\ e : B . b) , c = 1 }) in (c . a)) })
(if ({ a = (pred (\ b : ({ a : C , c : Unit }) . a)) , a = (pred (iszero true)) }) then (pred (iszero "apple")) else (let e = (true as String) in (("apple" . e) ({ e = c , e = b }))))
((({ d = (c as Unit) , e = a }) as ({ d : Unit , e : ({ b : C , e : Float }) })) . e)
(pred (iszero (\ a : ({ b : String , e : B }) . (succ c))))
({ b = (("boy" as ({ c : Nat , b : Top })) (if unit then false else (if 1 then true else c))) , e = (iszero (\ c : ({ e : Bool , a : Top }) . (1 as Top))) })
(iszero (iszero (succ (\ e : Nat . 1))))
(iszero (let d = (fix 0) in (succ "boy")))
(if ((succ c) as ({ b : C , d : Top })) then (fix (b . d)) else (({ a = ("apple" . b) , d = (c 0) }) as (Unit -> (C -> Unit))))
(succ (if (fix (let d = "apple" in 2)) then (2 as ({ e : C , a : Float })) else ({ d = c , b = 1 })))
({ e = (let a = (\ e : String . 0) in (false as Top)) , d = (((if false then 0 else "apple") as String) ((unit false) . c)) })
(pred (if ((pred unit) . a) then ((false as Unit) ((let c = "boy" in 2) . c)) else ((let b = 2 in (unit as Bool)) as (A -> Float))))
(succ (if (0 as Top) then (if 2 then (succ false) else (let a = unit in 1)) else ({ c = (let c = a in b) , e = (2 . d) })))
(if (pred (if "apple" then "boy" else c)) then ((false a) (\ b : A . ({ a = 1 , b = 1 }))) else ((let c = (pred "apple") in (succ false)) (succ (fix "apple"))))
((let a = (if a then ("boy" 1) else true) in (succ 0)) as ({ b : (({ e : String , e : Float }) -> String) , a : ({ b : Top , d : Float }) }))
((iszero (succ ((pred unit) . a))) . d)
(let d = (fix (pred ({ c = 2 , c = "apple" }))) in ((iszero ({ c = 1 , a = 2 })) . b))
((fix ((\ b : Top . b) as (B -> B))) . c)
(pred ((if (false as Bool) then (succ (if "boy" then b else true)) else (pred b)) (let a = (pred a) in (let a = (0 0) in unit))))
(pred (iszero ((succ true) "apple")))
(pred (let a = (fix (if "boy" then 1 else false)) in (iszero b)))
({ a = (\ e : ({ a : A , e : C }) . (succ 1)) , a = (let a = (fix "boy") in (iszero (iszero b))) })
((iszero (c . a)) as (((String -> Float) -> ({ b : Float , c : (Top -> A) })) -> (({ b : A , c : Nat }) -> Unit)))
({ b = (succ ({ c = (true . d) , b = (fix ("apple" . e)) })) , e = (pred (fix 1)) })
(((if a then 2 else (c . d)) as ({ a : ((A -> String) -> ({ d : Unit , c : Bool })) , d : (C -> ({ d : B , b : Nat })) })) . e)
(fix (pred (succ 0)))
(({ e = (pred b) , b = (let b = "apple" in a) }) as ({ a : ({ d : ({ d : Float , a : B }) , e : (({ a : Bool , b : Top }) -> Float) }) , a : ({ b : (Nat -> C) , e : String }) }))
(pred (if (pred (iszero a)) then (let d = a in (iszero true)) else ({ a = (a as Top) , c = (let e = "apple" in unit) })))
(succ (iszero (fix b)))
((("apple" as Float) . d) as ({ a : (C -> A) , c : ((Bool -> Float) -> Top) }))
({ d = ({ c = ((pred 0) . e) , a = (unit as ({ e : B , e : C })) }) , a = ({ c = (if (pred b) then (fix 2) else b) , a = ({ a = (fix false) , c = c }) }) })
(fix (if (pred c) then ("apple" "boy") else (iszero "boy")))
(succ (pred ({ b = (if true then b else true) , b = (1 2) })))
(succ (pred (iszero 2)))
(succ (iszero (let b = a in a)))
({ d = (iszero (succ (\ c : String . unit))) , d = ((fix 0) as ({ b : Nat , c : A })) })
(let a = (iszero (succ (if a then b else b))) in (\ e : ({ a : Bool , b : A }) . (a 1)))
((iszero (iszero "boy")) as ((({ a : Nat , d : A }) -> (Float -> Top)) -> ({ e : A , a : B })))
((((let b = "boy" in 0) as C) . c) as (({ c : Unit , c : Top }) -> ((Unit -> Top) -> ({ c : C , a : C }))))
(succ (fix (pred true)))
(((fix false) . b) as (({ c : (Top -> (Float -> B)) , a : ({ d : String , c : Top }) }) -> ((Bool -> String) -> String)))
(succ (((if c then a else 1) as (Top -> String)) . a))
(({ d = (fix unit) , a = (let c = ("apple" a) in (succ "boy")) }) as (((Top -> Unit) -> C) -> (Float -> Nat)))
({ a = (\ a : ({ d : ({ d : C , c : Unit }) , c : C }) . (let d = "boy" in 2)) , d = (succ (succ (iszero unit))) })
(((pred a) as ({ a : String , b : B })) . d)
({ b = (pred (if (2 "boy") then (let e = "boy" in (let a = 1 in a)) else ((succ c) . b))) , b = ((succ false) . d) })
((if (pred unit) then (pred (let a = a in false)) else (if "boy" then 1 else 1)) (succ (iszero (\ c : Nat . unit))))
(if (let a = (iszero ("boy" as B)) in (a as String)) then ({ b = (let a = (\ d : Bool . b) in (fix unit)) , d = (if (a as C) then (pred true) else (fix (fix b))) }) else ({ a = (fix (iszero 0)) , b = ((iszero ("apple" 2)) ({ c = "apple" , e = true })) }))
(if (fix (pred (iszero 0))) then ((true . e) . a) else ((let c = "apple" in a) as (Unit -> Bool)))
(\ a : ({ b : ({ d : (Bool -> C) , a : ({ d : Bool , e : Unit }) }) , d : ({ b : ({ b : C , c : B }) , e : ({ b : Top , d : Unit }) }) }) . ((iszero b) (iszero (pred false))))
((fix (succ (a c))) as ({ b : ((({ d : C , a : Float }) -> Top) -> (C -> A)) , c : ((Bool -> String) -> Bool) }))
(\ d : ({ e : (({ b : B , a : A }) -> String) , e : ((Top -> Unit) -> C) }) . (\ d : ({ a : (Float -> A) , c : ({ b : B , c : A }) }) . (\ d : (Nat -> Nat) . (fix "apple"))))
(((let b = "apple" in (pred b)) (\ c : Bool . unit)) (if ((true as C) (\ b : Top . 2)) then (let a = ({ d = 0 , b = "apple" }) in ({ b = 2 , d = 2 })) else ({ d = (unit . d) , d = (iszero a) })))
(fix (let b = (c . e) in (iszero (if true then c else 0))))
(if (iszero (({ e = 1 , d = 0 }) "boy")) then (\ b : ({ d : Float , d : Top }) . (\ c : ({ d : Nat , c : B }) . a)) else (succ (succ c)))
(succ ((succ (let b = true in 0)) as (({ a : Nat , b : Top }) -> ({ d : Unit , c : C }))))
(if (fix (let c = 0 in (0 . b))) then (\ a : ((String -> A) -> (Nat -> A)) . ({ b = (0 unit) , a = (let a = 2 in 2) })) else (succ (fix (pred unit))))
(fix (succ ({ d = b , a = (true a) })))
(pred (succ (iszero ({ b = c , c = a }))))
(let b = ((pred (pred false)) . a) in ((\ c : ({ e : (String -> String) , a : ({ a : Nat , d : B }) }) . (let d = "boy" in 1)) as ({ b : A , c : ({ d : Unit , b : C }) })))
(\ d : ((C -> Top) -> (C -> ({ a : Nat , e : B }))) . (({ d = 1 , e = (c . d) }) . d))
(fix (iszero (\ a : ({ e : Unit , a : Nat }) . "apple")))
(iszero (fix (if 0 then 1 else a)))
(iszero ({ b = (fix c) , a = (succ ({ e = unit , e = unit })) }))
(if ((pred b) as ({ b : B , a : Unit })) then (iszero (pred b)) else (if (2 . e) then ({ e = ({ b = true , c = true }) , a = (fix "boy") }) else (\ d : (String -> Top) . (succ false))))
(if (let c = ((\ d : Unit . b) "boy") in (let c = (let d = 2 in unit) in (succ a))) then (if (a (pred 1)) then (\ c : ({ a : Bool , a : String }) . (iszero 2)) else (\ e : Unit . 2)) else (fix (let a = (fix unit) in ("boy" 2))))
(((fix (pred 0)) . e) as (({ a : A , e : Top }) -> (({ a : A , b : B }) -> ({ c : C , b : String }))))
({ c = ((succ (if c then "apple" else b)) . a) , a = ((succ "apple") ((fix c) as ({ c : Unit , e : Top }))) })
((fix (pred false)) as (({ c : A , c : String }) -> (Nat -> ({ b : String , b : B }))))
(pred (let e = (if unit then ("apple" . d) else (let b = a in c)) in ((pred c) as (Unit -> C))))
(fix ((let b = ((let d = b in 1) . a) in (true . b)) (if (let a = unit in 1) then (succ 0) else unit)))
(succ ({ c = (succ b) , b = (let c = 2 in 1) }))
(let b = ((let c = (succ 1) in (succ a)) . a) in (let a = (fix false) in ((fix 0) as A)))
((let c = (succ (a . a)) in (pred "apple")) . b)
(succ (pred (let d = "boy" in "apple")))
(if (let a = (pred 0) in (\ b : ({ b : Bool , a : Bool }) . ((pred true) (iszero b)))) then (fix ({ e = 2 , e = (if 0 then unit else 1) })) else ({ a = ({ c = (let c = unit in "apple") , d = ("apple" as Float) }) , b = (if false then "apple" else false) }))
((succ (iszero (a "boy"))) as (({ c : B , b : Float }) -> ((String -> B) -> String)))
({ b = (\ c : ({ d : B , a : A }) . (fix false)) , c = (succ (succ ((let c = c in unit) as ({ b : Unit , c : A })))) })
({ d = (if (let e = (unit "apple") in 2) then (if (pred "apple") then (\ a : (A -> A) . (let d = "apple" in 0)) else (fix unit)) else (if (succ true) then ({ e = 0 , d = c }) else (1 true))) , b = (pred (\ a : Float . 2)) })
(let b = (iszero (succ 1)) in ((b c) as ({ d : ({ b : Float , d : Bool }) , d : Float })))
(if (iszero (let c = c in "apple")) then ((succ (fix 0)) (iszero a)) else (fix (fix (fix unit))))
({ c = (\ c : ({ d : ({ e : C , d : Bool }) , e : C }) . (fix (pred true))) , e = ((pred (let b = a in true)) (fix (if unit then (true c) else a))) })
((fix (\ d : (Top -> Bool) . (let a = (if 0 then c else 2) in c))) as ({ e : ({ c : ({ d : B , b : Bool }) , a : (Unit -> String) }) , b : ({ c : ((Nat -> A) -> Unit) , c : (Float -> Float) }) }))
(succ (((succ 1) (2 2)) (iszero (\ b : C . 0))))
(iszero (succ (\ b : (Unit -> Top) . (succ (iszero true)))))
(succ (fix (let b = 1 in "boy")))
(let c = (if (fix (b as A)) then (if c then (succ 1) else ({ b = 2 , a = unit })) else (if unit then true else false)) in (({ b = (\ b : (Nat -> Unit) . (2 . d)) , d = (\ b : Bool . ("boy" as B)) }) ((2 as (A -> Nat)) as ({ b : ({ c : A , e : Top }) , e : (B -> A) }))))
((\ d : (A -> Top) . (fix ({ c = "boy" , a = a }))) as ({ e : ({ a : (Top -> String) , b : ({ b : Unit , e : Top }) }) , e : ({ e : ({ d : Top , b : Top }) , b : (Bool -> Float) }) }))
(\ e : (({ b : Nat , d : B }) -> ({ d : ({ c : A , e : Nat }) , a : Nat })) . (pred (\ a : ({ b : Unit , a : String }) . (unit . c))))
(let d = (if (succ ("boy" as B)) then (iszero (pred (if 2 then a else 0))) else (if a then c else ("apple" as Bool))) in (fix (if b then true else c)))
((iszero (iszero (if b then c else true))) (iszero (iszero (succ 2))))
(\ b : ({ e : ({ c : ({ a : String , e : Bool }) , d : Top }) , b : ({ b : (Bool -> C) , a : Bool }) }) . ((if ({ d = a , c = 0 }) then (succ 2) else (c false)) . a))
(pred (pred (\ b : B . (succ c))))
(\ a : (({ b : (C -> C) , d : ({ d : C , e : Bool }) }) -> (({ b : ({ a : C , c : Unit }) , b : Bool }) -> (Nat -> Float))) . (((if b then 1 else 2) (0 as A)) as ({ e : A , b : Float })))
(fix (succ (let a = 2 in "apple")))
(fix (succ (if (if false then a else false) then (let d = (iszero true) in b) else (let c = 0 in b))))
(\ d : ({ d : ({ a : Nat , d : Nat }) , b : ({ a : ({ e : B , d : Float }) , e : ({ a : B , b : Float }) }) }) . (succ ({ a = (true . d) , c = (succ c) })))
(let e = (fix ((fix 2) (true false))) in (succ (succ (succ "boy"))))
(\ c : (({ c : ({ b : ({ a : Bool , c : B }) , b : Float }) , c : ({ e : C , c : String }) }) -> (({ a : String , d : Bool }) -> ({ d : C , b : ({ d : A , d : String }) }))) . (iszero (("boy" false) as ({ d : Bool , d : Nat }))))
(fix (let d = (fix a) in (iszero (fix c))))
((fix (({ e = c , a = unit }) as Bool)) as ({ d : ({ c : A , e : Unit }) , a : ({ e : ({ a : String , e : A }) , d : A }) }))
(iszero ((\ e : A . "apple") . e))
(({ c = (pred (if 2 then 1 else "apple")) , e = (pred 2) }) as ({ a : ({ d : B , e : Top }) , c : (Nat -> C) }))
(({ d = (\ d : ({ c : Nat , d : (A -> Top) }) . (false b)) , a = (iszero (\ c : B . a)) }) (fix (if 0 then a else "apple")))
(fix (succ (pred (0 . b))))
(\ e : (({ e : ({ a : Nat , e : Nat }) , a : ({ a : A , e : ({ e : Nat , d : Bool }) }) }) -> ({ e : ({ e : String , e : Bool }) , c : ({ a : Nat , e : Float }) })) . (({ d = false , d = (iszero "boy") }) (\ b : ({ d : Unit , c : String }) . (fix false))))
(fix (succ (fix (let c = "apple" in unit))))
((fix (let b = unit in (let a = "boy" in 0))) . c)
(let b = ((pred unit) . e) in ((2 . d) as (Top -> B)))
(succ (succ (("apple" a) . c)))
(iszero (succ (iszero (if "apple" then "apple" else b))))
((pred (0 . b)) . a)
(if ((false 1) as (({ a : (Float -> Top) , b : String }) -> ({ b : (String -> C) , c : Unit }))) then (\ a : ({ b : String , d : (Unit -> C) }) . (pred a)) else (let b = (if 1 then b else c) in (let e = ("apple" unit) in b)))
((((let c = false in b) as ({ a : Nat , c : C })) as ({ b : String , c : C })) . a)
(pred (({ a = unit , d = a }) . a))
({ c = (((\ e : Top . (succ b)) (\ e : Unit . "apple")) . d) , c = (((if 1 then (iszero 1) else 1) (if c then false else 0)) . d) })
(let d = (pred (fix (fix (pred unit)))) in ({ e = (iszero (fix c)) , d = (pred (if (let a = 1 in unit) then "apple" else (pred true))) }))
(pred (pred (pred "boy")))
(pred (\ d : ((B -> Float) -> Float) . ("boy" as A)))
(succ ({ e = (iszero (iszero false)) , b = ((let a = true in unit) . e) }))
((pred (iszero 2)) as ({ d : ({ c : Top , c : Nat }) , c : ({ d : (Bool -> C) , d : ({ d : A , b : Unit }) }) }))
(iszero ((fix "apple") (let c = (iszero a) in (pred unit))))
(pred (let e = (fix (succ "apple")) in (\ d : A . 1)))
(pred (iszero (let a = (if false then (if 1 then b else b) else (unit . b)) in (if 1 then (iszero c) else false))))
(((let a = (0 . d) in unit) (fix (if (let d = "apple" in unit) then 0 else "boy"))) as ({ b : ({ d : Nat , e : Nat }) , c : (B -> Nat) }))
((let c = (succ 0) in (c a)) . b)
((succ (succ 1)) as ({ b : ({ a : ({ e : Bool , d : Float }) , e : ({ c : String , b : Bool }) }) , e : ({ b : (String -> String) , c : (Float -> Unit) }) }))
((iszero (if unit then 1 else true)) . c)
(if (let d = (let a = ({ a = 2 , a = true }) in (iszero 1)) in (\ c : (Bool -> B) . (iszero true))) then (fix (fix (2 true))) else (\ c : ({ c : A , d : Bool }) . ((fix unit) (let c = (1 as Bool) in (let d = 2 in a)))))
((iszero (iszero false)) as (({ b : (Nat -> Top) , e : ({ d : String , e : (Float -> Float) }) }) -> (({ e : String , c : Bool }) -> ({ c : String , e : B }))))
((pred (\ b : (A -> Unit) . 0)) . d)
((\ b : ((Unit -> Top) -> (Bool -> Nat)) . (fix false)) (((succ 2) . d) . b))
({ c = ((let c = (fix a) in (fix ({ c = false , b = true }))) as ((String -> Unit) -> C)) , e = ({ e = (({ c = false , d = 2 }) as B) , d = (1 2) }) })
({ d = (fix (let c = unit in (2 "boy"))) , d = ({ b = (2 unit) , b = (b as C) }) })
(fix (fix (iszero ({ d = a , b = 2 }))))
(succ (pred (fix 1)))
(iszero (\ e : ({ e : (Unit -> Unit) , d : (String -> A) }) . (succ (if 1 then unit else c))))
((pred (fix c)) as ({ c : ((Top -> Unit) -> ({ b : String , b : A })) , b : (({ b : Bool , c : A }) -> (Bool -> Unit)) }))
((succ ({ b = 0 , b = (pred true) })) as (({ e : ({ a : (B -> String) , b : ({ a : B , d : B }) }) , b : ({ d : ({ c : Float , c : A }) , a : Unit }) }) -> ((Float -> Unit) -> Unit)))
(\ a : ({ e : ({ e : (Unit -> Float) , e : ({ e : B , d : Nat }) }) , c : ({ a : (Top -> C) , d : Float }) }) . (({ a = false , b = true }) . e))
(succ (if (("boy" unit) c) then (pred (fix (0 . e))) else ({ c = (let b = a in (unit . e)) , a = (pred "apple") })))
(fix ((((let c = 0 in 2) as (String -> Nat)) (pred (succ 2))) (iszero "apple")))
((let b = (if ((a as String) as Float) then (\ e : A . (let d = 0 in a)) else ((pred false) as Bool)) in (false "boy")) as ({ b : (Bool -> C) , c : ({ c : ({ b : B , c : Unit }) , b : Nat }) }))
(if ((\ e : A . "apple") (pred (succ 1))) then (succ (fix a)) else (succ ({ c = (iszero false) , d = true })))
(fix ((pred "boy") as (({ e : Float , d : Float }) -> ({ c : B , c : A }))))
(({ d = (a . d) , c = (if 2 then b else true) }) as ({ c : ((({ b : Bool , e : B }) -> (String -> String)) -> (({ c : Bool , a : Nat }) -> (Bool -> Nat))) , e : ({ a : Top , a : (Bool -> Top) }) }))
(((pred (0 . e)) as (({ c : ({ c : B , d : A }) , a : String }) -> (String -> Top))) . b)
(if (pred (iszero (iszero c))) then ((c as (B -> Bool)) (pred (pred true))) else (((fix (iszero b)) as ({ d : (Unit -> C) , e : B })) . a))
(if (let a = (let a = (iszero (fix 2)) in (let e = (succ 0) in "apple")) in (iszero (b . c))) then (fix (succ 1)) else (let d = ((succ true) as (Unit -> B)) in (\ a : (Top -> Bool) . "boy")))
(iszero (\ e : ({ b : (A -> A) , b : (({ c : Unit , c : Float }) -> ({ c : C , c : Nat })) }) . (let e = (iszero ("apple" 0)) in (\ e : (C -> B) . 0))))
(succ (iszero (if c then 1 else c)))
((let d = ({ b = (iszero "apple") , e = (false false) }) in ((\ a : (Unit -> C) . ({ a = 2 , d = "apple" })) . d)) . c)
(\ b : ((Float -> C) -> ({ d : A , a : B })) . (\ c : (({ a : B , a : Float }) -> ({ a : Top , b : String })) . (let e = (\ a : Bool . false) in ("apple" . e))))
({ b = (iszero ("apple" . e)) , c = ((pred true) as ({ a : A , c : Bool })) })
(pred (if (iszero ({ d = (true as Top) , b = a })) then (if ({ e = a , b = 2 }) then (iszero 2) else ({ d = (iszero 1) , c = 2 })) else (iszero ({ c = unit , a = 0 }))))
(let a = (if (iszero 1) then ((succ 0) (if 0 then "boy" else 0)) else (succ (if 1 then true else 0))) in (\ d : (Bool -> Bool) . (succ (pred false))))
(({ b = ((1 . d) (succ "boy")) , e = (iszero "boy") }) as ({ c : ((Bool -> A) -> ({ b : ({ c : Nat , d : A }) , d : Top })) , d : ((Float -> B) -> ({ e : B , c : B })) }))
(fix (succ (\ c : Float . "boy")))
({ c = (succ (\ b : Bool . c)) , a = (fix (if unit then (iszero false) else (iszero 1))) })
(iszero (((fix 2) . b) (succ (\ e : (String -> C) . (pred unit)))))
(\ c : ({ a : ({ e : String , b : ({ b : Bool , a : A }) }) , e : ((A -> (B -> B)) -> ({ b : Unit , a : B })) }) . (succ (fix 2)))
(let e = ((false as Float) (unit true)) in (let a = (\ b : (Unit -> B) . (\ e : Bool . b)) in (if 0 then a else unit)))
(iszero ({ e = (succ b) , c = (\ a : B . b) }))
(if (pred ("boy" . c)) then ({ e = (iszero 0) , e = (false (true . a)) }) else ({ c = (if c then 1 else 2) , c = (let a = "apple" in "apple") }))
((pred (pred "apple")) . a)
(let d = (\ e : (({ c : A , b : A }) -> (Bool -> Top)) . (succ "apple")) in (\ a : (String -> Nat) . (fix "boy")))
((({ d = (fix b) , d = (let a = b in c) }) ((fix 1) . e)) as ({ b : ({ e : Unit , d : ({ d : Nat , a : C }) }) , b : ({ a : Bool , a : (C -> Top) }) }))
(iszero (if (if 0 then 2 else "boy") then (if ({ a = unit , c = true }) then unit else (succ "boy")) else ({ c = (succ 1) , d = (iszero 2) })))
(fix (fix (let e = b in "apple")))
(if ((let c = (pred true) in true) (fix 0)) then (iszero ((let c = (iszero 1) in true) as (Bool -> A))) else (pred ({ e = 1 , e = (let e = unit in a) })))
((pred (let e = (let b = b in 0) in 2)) as (({ b : Bool , d : ({ e : Bool , c : B }) }) -> (({ d : Top , c : String }) -> (Unit -> Float))))
((pred (succ (pred c))) as (({ d : String , e : Bool }) -> (({ a : Bool , d : B }) -> B)))
((iszero (let b = (iszero "apple") in (fix ({ b = c , e = unit })))) . b)
(pred (if ("boy" 2) then (let c = "boy" in c) else ({ d = true , c = (succ a) })))
((pred (if c then b else c)) . e)
(let a = (succ (succ "boy")) in (let c = (succ 2) in (if c then "apple" else unit)))
(let d = (\ e : ({ c : Top , e : Unit }) . (succ (if "boy" then 1 else c))) in ({ a = (\ a : B . 0) , d = (false . e) }))
(({ e = (pred 0) , b = (false a) }) as (({ d : Top , d : ({ a : Float , b : Unit }) }) -> (C -> (Top -> Nat))))
(\ c : ({ e : ({ d : ({ e : A , c : Unit }) , d : (Float -> Nat) }) , d : ({ c : Unit , e : (Top -> Top) }) }) . (fix (fix "apple")))
((pred ({ d = "boy" , d = unit })) . a)
(fix ({ e = (\ c : (Top -> Nat) . unit) , d = (c as ({ c : Top , a : Float })) }))
(({ b = (pred (pred b)) , d = (let a = (let c = c in unit) in (let a = false in a)) }) . d)
(fix ({ d = (let e = (if b then true else true) in "apple") , d = (\ e : (C -> Top) . (c as Unit)) }))
(\ e : (({ b : ({ c : Unit , a : Float }) , d : A }) -> ({ b : (Unit -> Bool) , b : Unit })) . (succ (\ a : Top . (iszero 1))))
(fix ((\ c : A . 2) as (({ a : Bool , e : Bool }) -> Bool)))
({ a = (\ c : ((C -> Bool) -> ({ c : A , c : Bool })) . (true "apple")) , d = ({ d = (unit 2) , d = (pred (true as Nat)) }) })
((if (succ (true 0)) then (if a then 2 else (if c then false else b)) else (fix (b unit))) as (({ e : (Nat -> Float) , c : ({ a : ({ d : C , d : Bool }) , a : ({ d : Top , c : Bool }) }) }) -> ((({ e : Bool , a : C }) -> ({ b : Unit , a : Bool })) -> ((Float -> String) -> ({ d : String , a : C })))))
(\ b : (({ a : (A -> String) , b : ({ d : Nat , a : B }) }) -> ({ b : ({ e : A , c : Nat }) , b : A })) . (let d = ("apple" . b) in (pred (1 . e))))
(let e = (fix (1 as B)) in ((pred (pred unit)) as ({ e : ({ b : (A -> Float) , b : Float }) , c : (({ e : A , e : B }) -> (Top -> Nat)) })))
(iszero (fix ((let a = "apple" in c) . d)))
(\ c : ({ b : ({ c : Unit , c : Float }) , e : (B -> C) }) . (if (iszero (fix true)) then (let e = 2 in 2) else (unit 0)))
((if ((1 . b) b) then (let e = a in 0) else (\ d : ({ a : B , a : String }) . (false as Nat))) as ({ c : ({ b : B , a : (Nat -> Nat) }) , e : (({ e : Bool , a : Nat }) -> ({ e : Top , d : String })) }))
((succ (succ ({ a = false , c = 0 }))) as ({ c : ((B -> Top) -> ({ d : Nat , e : Top })) , c : ({ b : (C -> C) , e : (A -> Bool) }) }))
({ a = (pred (let c = (\ a : Unit . false) in (fix a))) , c = (let c = (iszero false) in (pred "boy")) })
((pred (succ (iszero false))) (fix ((if 1 then "boy" else "apple") "boy")))
(pred (\ a : ({ c : ({ d : Float , e : Unit }) , c : (Unit -> B) }) . ("boy" a)))
({ b = (pred (iszero true)) , d = ((fix b) as (Top -> Float)) })
(succ (iszero (pred (let a = b in false))))
((fix (if 2 then 2 else false)) . e)
(pred (fix (\ e : B . unit)))
((pred (let b = 1 in b)) . a)
(succ (let a = (iszero ((let a = c in 2) as B)) in (let b = (if a then c else b) in (fix unit))))
(\ b : (({ e : A , b : Bool }) -> ((Top -> B) -> ({ e : C , b : Top }))) . ({ c = ({ a = (iszero (true . e)) , a = (succ (fix "boy")) }) , b = (fix a) }))
(iszero (let d = (iszero (pred (unit false))) in (if (fix "boy") then (pred 0) else ("apple" . e))))
(pred (succ (c "apple")))
((\ c : (Unit -> Float) . (\ b : B . ({ a = true , e = true }))) (\ e : ((Float -> C) -> A) . (if 2 then a else b)))
(succ ({ b = ((pred 1) as Float) , e = (fix (succ "boy")) }))
(if (\ e : ({ a : Nat , d : A }) . (if (fix c) then (\ d : Nat . false) else (b a))) then (("boy" as Top) (fix 1)) else ({ d = ("boy" unit) , b = ({ c = true , e = (\ d : A . "boy") }) }))
((succ (fix (b a))) . e)
(pred (succ (succ "boy")))
(fix (if (succ b) then (succ 0) else (fix 1)))
(((let c = c in true) . d) as ({ d : (Nat -> ({ a : Float , e : String })) , a : (({ c : String , a : B }) -> Unit) }))
(fix (let e = (let d = ({ b = "apple" , e = "boy" }) in 2) in (0 "apple")))
(\ a : (({ a : (Unit -> Top) , e : ({ a : A , a : B }) }) -> ((({ d : Nat , c : String }) -> (Bool -> B)) -> ({ e : Unit , a : C }))) . (if (iszero (succ 0)) then (iszero a) else ({ d = ({ e = 1 , a = 1 }) , d = (let d = "boy" in true) })))
(iszero (fix (let a = false in 1)))
(if (fix ({ b = "apple" , e = 1 })) then (iszero (iszero ("apple" b))) else (fix ((fix 0) . e)))
((pred (iszero b)) ({ a = (unit 2) , e = ("boy" a) }))
(fix (pred (let b = a in (let c = a in a))))
((fix (c as A)) (iszero ((a as String) ((succ 1) (true 1)))))
((iszero ({ e = (pred 2) , c = ({ e = 1 , a = (iszero a) }) })) . d)
((\ b : (({ c : B , a : C }) -> ({ c : A , c : ({ d : A , c : B }) })) . (a as (Nat -> Bool))) as ({ e : ({ a : (({ b : Float , d : C }) -> ({ e : String , e : Bool })) , d : ({ b : String , c : Unit }) }) , c : (C -> Top) }))
((iszero (if "apple" then false else (succ "boy"))) . a)
(if (if (succ "apple") then ((pred c) as Float) else (fix "boy")) then ((let e = (iszero b) in (succ 1)) . c) else (succ (if (a unit) then true else 1)))
({ a = (((iszero c) . b) as ({ e : (C -> C) , a : ({ e : (Unit -> String) , d : (Bool -> B) }) })) , e = (iszero (iszero 2)) })
(pred ((c . d) (if (\ e : Float . "boy") then (if c then a else c) else 2)))
(let e = ({ c = (if true then 0 else ({ b = 2 , e = "boy" })) , c = (let a = (fix 0) in (succ c)) }) in (succ (iszero (if 2 then 0 else 2))))
(succ (iszero (pred (succ 1))))
(succ (let d = (succ a) in (if (succ false) then (fix true) else (fix (let b = a in true)))))
(let e = (if (pred a) then (unit as ({ b : Nat , e : C })) else (let a = a in a)) in (fix (succ a)))
(fix (fix (iszero (if 2 then true else true))))
(iszero (succ ({ a = 1 , b = 1 })))
(if (let c = (if 1 then false else false) in (fix b)) then ((iszero 0) as ((C -> Float) -> ({ b : C , b : C }))) else ((iszero (iszero 2)) as ({ b : Unit , a : C })))
(succ ((succ "boy") (iszero "boy")))
(((pred (fix a)) as ({ e : ((C -> A) -> Float) , d : ({ a : String , c : Float }) })) as ((String -> A) -> ({ a : ({ e : Float , c : A }) , a : ({ b : A , c : C }) })))
({ d = (let a = (let c = (unit a) in (succ true)) in ((\ a : (Unit -> Top) . (let b = 2 in true)) (iszero "boy"))) , d = (succ ((c . b) (false . c))) })
((\ b : ({ e : (A -> String) , e : ({ d : C , b : String }) }) . (pred ({ d = "apple" , a = 0 }))) (\ c : ({ e : ({ c : A , e : String }) , d : ({ a : String , c : Bool }) }) . (succ (if c then true else "boy"))))
(succ (let c = ((b . c) as Top) in (\ e : String . (succ a))))
(let c = (succ ({ a = ("boy" 1) , a = (iszero c) })) in ((pred "boy") . c))
({ d = (if (fix (pred "boy")) then (if unit then (1 as B) else a) else ({ b = b , c = (if "boy" then "boy" else unit) })) , a = ((\ e : B . "boy") (pred b)) })
(succ (if (let d = (\ e : Float . c) in (\ c : B . 1)) then (pred a) else (pred (\ d : Float . false))))
({ e = (pred (\ b : ({ e : Unit , c : Bool }) . true)) , b = (\ d : (Unit -> Bool) . ((let c = 2 in "apple") as Float)) })
(let e = ({ c = ((succ 1) as (Unit -> Unit)) , c = (pred (pred "boy")) }) in (fix ((iszero (if 1 then false else unit)) . b)))
(pred (fix (let b = ({ e = c , e = true }) in 0)))
(((b true) as (Bool -> Nat)) . e)
(pred (if (if (iszero (if "boy" then a else 1)) then (fix 1) else ({ e = b , d = a })) then ((if (c . d) then c else true) . b) else ({ e = c , c = false })))
(fix ((pred "boy") ({ b = false , e = b })))
(((b 0) (succ "boy")) . c)
(if (fix ((if b then a else (pred "apple")) (pred unit))) then ({ c = (2 true) , c = (2 true) }) else (succ (let a = unit in 1)))
(((true . e) . a) as ({ c : ({ c : Float , e : String }) , a : ({ a : B , e : ({ e : A , a : Bool }) }) }))
(let b = (pred (iszero "apple")) in (pred (let d = (if b then "apple" else b) in b)))
(((iszero b) (let b = c in 1)) . a)
(({ a = (let b = ({ c = c , e = b }) in "boy") , d = (iszero (\ e : Unit . 0)) }) as (((Float -> Top) -> ({ a : A , a : Unit })) -> ({ b : ({ a : ({ a : Top , e : Bool }) , e : String }) , b : ({ a : A , e : (Bool -> Nat) }) })))
({ d = ({ b = ((succ a) as ({ c : Nat , d : Bool })) , b = ({ d = ({ e = unit , d = "apple" }) , c = (let a = false in "boy") }) }) , e = ((unit . d) ((\ a : Nat . "boy") as (Bool -> Float))) })
(\ c : (({ e : ({ c : C , d : C }) , a : C }) -> ({ d : ({ e : (A -> Float) , e : Bool }) , d : ({ b : (Nat -> Float) , a : (A -> C) }) })) . (\ e : ((C -> C) -> Bool) . (false . d)))
(\ e : ({ d : (B -> Unit) , e : ({ e : (B -> A) , b : ({ b : ({ d : Unit , c : C }) , a : (Float -> String) }) }) }) . ((let a = (\ e : Float . 1) in 2) . a))
(succ ({ d = ("boy" (succ "apple")) , d = (iszero (pred unit)) }))
(let e = ((succ (succ "boy")) ({ c = "apple" , a = b })) in (fix (let a = 2 in ({ c = 1 , e = "apple" }))))
(\ a : ({ b : ({ e : Float , c : C }) , b : (String -> Unit) }) . (({ b = (false as Unit) , e = (pred 2) }) as ({ c : ({ c : Top , a : (Unit -> A) }) , b : ({ c : Nat , d : Bool }) })))
(let b = ({ a = (let c = unit in false) , c = (iszero true) }) in (iszero (c as Bool)))
(\ b : ({ d : (Top -> String) , a : (C -> Bool) }) . (if (pred (iszero 2)) then ((c 0) (true as A)) else (succ (if false then (succ "boy") else 0))))
(let b = (iszero (fix (let e = "boy" in 1))) in (\ d : (B -> Nat) . (fix ({ d = false , b = (\ d : Top . 2) }))))
((succ (iszero 2)) as (({ c : B , d : (Bool -> C) }) -> ((Nat -> C) -> B)))
(succ (iszero (\ e : (B -> A) . (1 0))))
((\ a : (({ b : B , d : Nat }) -> A) . ("boy" true)) . d)
(iszero (((if 2 then 1 else "apple") (a as Unit)) ((false . b) (fix "boy"))))
(({ a = (let a = (iszero unit) in (if unit then a else false)) , e = ((succ b) as ((Nat -> C) -> ({ c : B , d : Bool }))) }) . e)
({ a = (if (succ (\ c : B . "apple")) then (pred unit) else (succ 1)) , d = ((succ b) (\ d : (Unit -> String) . (if 1 then 2 else unit))) })
((fix (iszero c)) . e)
((succ ((fix false) (iszero unit))) . e)
((succ ({ d = (let b = 1 in "apple") , a = 0 })) ({ d = (iszero (\ d : C . 1)) , c = (if (2 as ({ b : String , a : B })) then (fix (if true then 0 else "boy")) else (\ c : A . unit)) }))
(iszero (if (if (1 . c) then ({ a = unit , b = c }) else (pred unit)) then (let c = ({ a = 0 , e = "apple" }) in c) else (let d = 0 in (pred true))))
(if (if (if (fix c) then c else "boy") then (pred unit) else (succ true)) then (if ((c as String) as ({ a : Top , a : Nat })) then (\ b : ({ e : String , e : A }) . true) else (let a = (0 as C) in false)) else ({ c = ("apple" as A) , c = (succ true) }))
(let e = ((fix (\ c : A . "boy")) (pred (succ 0))) in ({ e = ((iszero b) (true . e)) , e = (\ b : Unit . 1) }))
((pred (iszero (fix b))) . a)
(iszero ((fix (let d = "apple" in (succ 1))) . d))
(if (fix (iszero 0)) then (pred ((let a = 1 in 1) as (Top -> A))) else (if (\ b : ({ a : (Unit -> C) , e : Unit }) . (\ d : Nat . 2)) then (fix (\ d : Nat . c)) else (succ (fix 1))))
(succ (let e = (\ e : (String -> Float) . (1 b)) in (succ b)))
(pred (pred (true (false b))))
(({ e = ((\ e : Top . ({ b = c , e = 2 })) as ({ c : C , a : Top })) , c = (if (pred false) then (pred 1) else (fix (2 as Float))) }) as ({ c : ({ e : (Top -> Unit) , b : ({ b : A , e : Float }) }) , b : ({ e : C , b : B }) }))
(let e = (({ a = "apple" , a = false }) as ({ d : (Nat -> Float) , e : ({ b : Float , e : Bool }) })) in (\ b : ({ b : C , c : A }) . ((a as String) "apple")))
(\ c : ({ c : ({ e : Unit , e : Bool }) , e : ({ b : ({ b : B , c : Nat }) , d : (Bool -> Bool) }) }) . ((fix false) . a))
(((pred 2) (let e = (a . a) in (if b then true else 1))) . c)
(let d = (let d = ({ c = 1 , a = "apple" }) in (fix 1)) in (\ a : (Top -> ({ d : String , c : Bool })) . (succ ({ d = a , e = a }))))
(({ c = (({ e = "boy" , c = b }) as ({ b : Top , c : Unit })) , d = (pred ("boy" as A)) }) as ({ d : (((Bool -> Top) -> ({ d : A , e : Float })) -> ({ c : C , d : Bool })) , d : ({ d : ({ c : B , a : Top }) , a : ((String -> Float) -> ({ e : Top , c : Top })) }) }))
(if (\ e : ({ d : ({ d : Bool , e : Float }) , b : C }) . ((a a) . d)) then (\ d : ({ b : Float , d : Bool }) . (0 "apple")) else ((fix (if 1 then 1 else true)) as ({ e : Top , d : A })))
(\ c : (({ b : Top , d : Bool }) -> (C -> ({ a : Nat , b : Nat }))) . ((false . b) as ({ a : Bool , a : ({ c : Unit , a : Top }) })))
((succ (fix (let d = 2 in 1))) ((fix c) ({ a = a , d = "apple" })))
(\ a : ({ c : (Top -> (B -> Unit)) , d : ({ b : Unit , e : A }) }) . (if (iszero (succ unit)) then ((b c) (let a = false in 1)) else (iszero (succ b))))
(pred (let e = (iszero (succ true)) in (if 0 then 1 else "apple")))
(let c = ((fix (iszero b)) as ({ d : ((B -> C) -> String) , b : (A -> Top) })) in ((pred (fix 0)) as (Nat -> (Top -> Float))))
((if (pred true) then ((iszero 2) as B) else (iszero (let a = unit in false))) (({ b = "apple" , a = "apple" }) ({ a = b , b = (let b = true in true) })))
(let c = (iszero (unit c)) in (if (succ (iszero c)) then (pred (succ (fix false))) else ((if 1 then unit else (let d = 1 in 0)) ("boy" . d))))
({ a = (succ (c c)) , d = ((pred 1) . d) })
(if (succ (pred 1)) then ({ d = (let a = 0 in (iszero 0)) , d = (fix "boy") }) else (iszero (\ e : (A -> Float) . (a unit))))
(iszero (pred (fix ({ a = c , c = true }))))
(iszero (iszero (true as Top)))
(fix (iszero (let d = (fix 1) in (iszero a))))
(\ b : ({ e : ({ d : Unit , b : B }) , d : (Bool -> String) }) . ((iszero (b . e)) (iszero "apple")))
(((iszero false) as (Bool -> Nat)) . b)
(\ c : (({ b : C , d : Float }) -> (Float -> String)) . (\ c : (({ a : B , e : String }) -> (Nat -> Float)) . (c . c)))
(if (\ b : ({ a : ({ c : A , c : A }) , e : ({ d : B , e : A }) }) . (fix ({ b = unit , d = c }))) then (pred (fix "apple")) else ((succ false) . c))
(\ e : ({ b : ({ d : (A -> (B -> Float)) , e : ({ c : Bool , c : Top }) }) , d : ({ a : (Top -> A) , e : (Bool -> A) }) }) . (iszero (iszero "boy")))
(pred (\ e : ({ c : ({ e : (String -> Bool) , d : ({ a : String , b : Float }) }) , a : ({ b : Bool , e : ({ d : Unit , d : Top }) }) }) . (0 . a)))
(iszero (if (succ ("boy" as A)) then (let a = (\ a : Unit . true) in 1) else (fix c)))
(\ e : ({ c : ((A -> A) -> (Top -> (B -> A))) , b : (({ d : (C -> Bool) , d : Nat }) -> ({ a : ({ a : String , d : Float }) , c : C })) }) . ((false unit) as (Bool -> Top)))
(if (let b = (2 b) in (pred 0)) then (let b = ({ e = "apple" , c = ("boy" as B) }) in (fix (fix (let c = a in false)))) else (fix (succ (if 2 then "boy" else a))))
(pred (fix ({ d = (succ (succ 1)) , a = (let e = (let d = unit in c) in (succ c)) })))
(let c = (if (a false) then ({ c = unit , e = 1 }) else (iszero c)) in (let a = (if ((pred "apple") false) then (if unit then "boy" else c) else ((succ 2) b)) in ({ e = ("apple" 2) , a = "apple" })))
(pred ((\ e : String . false) ({ a = 1 , e = b })))
(iszero (({ a = (let a = "apple" in 1) , e = ({ d = "apple" , b = b }) }) . c))
(let d = (if (if (let a = b in true) then ({ b = true , b = 2 }) else (iszero b)) then ((fix (b . d)) . d) else (fix (\ b : Top . "apple"))) in (succ (succ (false . b))))
((\ a : ({ c : ({ a : String , d : Float }) , a : (B -> Unit) }) . (pred unit)) . c)
(fix (iszero ("boy" . a)))
((\ e : ({ d : Unit , b : Unit }) . (0 as Bool)) as ({ d : (({ c : String , b : String }) -> Nat) , c : ({ e : ({ a : Bool , a : Bool }) , b : Float }) }))
(if (pred ({ d = "boy" , e = 1 })) then ((true 0) ({ d = unit , e = unit })) else (succ ({ b = (unit . a) , d = (unit . d) })))
(fix (if ((a as Float) 2) then (b as A) else (iszero (pred "apple"))))
(succ (succ (if (fix a) then ("boy" 2) else (let e = "boy" in false))))
((succ (iszero c)) as ({ a : ({ c : (Float -> Bool) , c : A }) , b : (Unit -> Float) }))
(pred (if ({ b = unit , a = "boy" }) then (if ({ c = 2 , c = 0 }) then (succ a) else (fix unit)) else (succ "boy")))
(succ (if (iszero 1) then (0 b) else ({ e = 2 , d = c })))
((let c = ({ e = (fix ({ c = true , a = "boy" })) , a = (if false then c else "apple") }) in (if (\ e : B . "apple") then (if b then false else true) else (succ "apple"))) . a)
(\ e : ((({ e : A , c : Bool }) -> Top) -> ((Top -> ({ a : B , e : Float })) -> (Unit -> (Bool -> Top)))) . (\ c : ({ d : String , e : Bool }) . ({ e = (iszero 1) , d = 0 })))
({ d = ({ d = (if a then "apple" else (pred 1)) , e = ((let e = c in "boy") c) }) , e = (iszero (fix b)) })
(if (fix (pred (let b = unit in "boy"))) then ({ e = (false as Top) , c = (succ a) }) else (pred (if (unit as Unit) then (pred c) else (\ a : Float . unit))))
(\ c : ((Top -> B) -> (Unit -> ({ b : A , b : B }))) . (fix (let e = b in a)))
(if (\ c : ({ b : B , a : Bool }) . (0 as A)) then ({ c = ((2 b) (fix b)) , c = (\ d : B . c) }) else (fix (succ false)))
((iszero (1 . d)) as ({ b : ({ a : A , a : B }) , d : ({ d : (Nat -> Unit) , d : Unit }) }))
(succ (pred (if ((pred false) . a) then (true unit) else (unit 0))))
(fix (let c = (succ true) in ({ a = a , b = (succ c) })))
(succ (iszero ((fix a) as C)))
(fix ((fix 0) ({ d = (iszero 2) , c = ((fix b) as (C -> Bool)) })))
(let e = (pred ({ e = "boy" , b = unit })) in (pred (unit as Unit)))
(let e = (fix (succ 0)) in (let e = ({ e = (0 as B) , c = (\ b : Top . (unit . d)) }) in (iszero (b as Top))))
((pred (if 0 then b else 1)) (("apple" 1) . a))
(\ e : ({ d : ((Top -> C) -> Unit) , d : ({ e : (String -> String) , b : C }) }) . (pred (let a = (succ true) in true)))
((pred ((succ false) as ({ c : B , a : Unit }))) as ({ b : (Nat -> Bool) , c : ({ b : C , e : ({ d : Unit , d : Unit }) }) }))
(iszero (succ (if 1 then 0 else b)))
(if (if ((if 0 then c else 2) as (A -> Unit)) then (succ "boy") else (\ d : ({ d : B , d : A }) . ("apple" . d))) then (succ (succ c)) else (let e = (({ a = ({ a = "boy" , e = c }) , c = (1 "apple") }) . e) in (let b = ({ a = (fix false) , d = 2 }) in (\ e : ({ b : A , b : Bool }) . (iszero "apple")))))
({ d = (\ e : ({ b : ({ e : Bool , c : String }) , e : C }) . ((iszero "boy") (iszero c))) , d = ((\ b : B . "apple") . c) })
(succ (\ d : ({ c : String , c : Bool }) . (unit true)))
(let d = (((succ b) . b) (pred (1 as Top))) in ({ d = ("boy" c) , a = ({ a = true , c = (succ "boy") }) }))
(iszero ((\ d : B . (c as A)) (let c = (fix "apple") in (1 . d))))
({ b = (iszero (\ b : Unit . (2 as C))) , c = ((succ "apple") (false as Unit)) })
({ c = ({ d = (iszero (if b then b else a)) , c = (\ c : ({ c : String , a : Bool }) . (succ c)) }) , b = (succ (if a then 0 else false)) })
(pred (\ a : ({ d : ({ d : Unit , d : B }) , e : (C -> Top) }) . (let d = (pred 2) in (\ d : String . false))))
(pred (\ e : ({ a : ({ c : C , e : C }) , b : ({ d : A , e : C }) }) . (({ e = "boy" , e = "apple" }) 1)))
(\ d : ({ c : ({ c : (Nat -> String) , b : (Bool -> Unit) }) , d : ({ a : Bool , a : ({ c : Float , a : Float }) }) }) . (((succ a) (pred "boy")) as (({ a : Bool , b : (C -> A) }) -> ({ a : C , c : Unit }))))
(((let c = ((\ a : B . 1) as ({ a : B , c : Float })) in ({ d = (succ true) , d = b })) as (String -> (A -> Bool))) (if (a a) then (let a = unit in (iszero "boy")) else (pred a)))
(if ((fix 1) . a) then ((pred (if a then 1 else 0)) . d) else (succ (\ a : ({ a : Unit , c : C }) . 0)))
((let a = (if (succ b) then (let e = a in "apple") else 0) in (let b = (succ b) in ("apple" . d))) . e)
({ e = ({ d = (\ a : Float . 1) , d = (succ unit) }) , b = (if (iszero (b . b)) then (succ false) else ((2 . d) . c)) })
(pred (if (succ b) then (({ e = a , e = c }) as B) else (let e = 1 in ({ c = c , d = true }))))
(let b = (let d = (\ e : Bool . a) in (c as B)) in (succ (pred ((\ d : Bool . 2) . d))))
(pred (fix (0 b)))
(let e = ((\ d : A . (2 . e)) (0 true)) in (\ b : ({ a : (Bool -> Float) , e : (Top -> (Float -> String)) }) . ({ b = (\ c : C . b) , e = 2 })))
(fix (iszero (a . b)))
(({ c = (succ (true 1)) , b = (true as (String -> Unit)) }) (let c = (iszero a) in (fix 2)))
(((if (0 . b) then 2 else (succ a)) as ({ d : ({ c : String , e : Float }) , a : (Nat -> C) })) (iszero ((pred unit) as (Unit -> Float))))
(((succ (pred unit)) as ({ a : Top , e : Unit })) as ({ b : ({ d : C , b : Top }) , d : (Unit -> String) }))
(((if (("boy" as A) as C) then (pred (pred unit)) else (if "boy" then 0 else b)) . c) . c)
(iszero (iszero (let d = ("boy" as String) in (iszero 1))))
(fix (pred (pred (c a))))
(if (if ({ b = ({ e = (a as Float) , d = (\ c : B . c) }) , a = (succ a) }) then ((\ b : ({ b : Nat , c : Nat }) . a) (fix b)) else (fix a)) then (let b = (iszero (iszero b)) in (if false then false else "apple")) else (iszero (let a = "apple" in 1)))
(pred (iszero ((c as ({ b : Nat , d : String })) as ({ a : Unit , c : Unit }))))
({ c = (iszero (("boy" . e) . c)) , b = ((if (iszero "apple") then ("boy" as Unit) else (let b = false in true)) . c) })
(fix (pred (let b = false in true)))
(iszero ((let b = (fix (pred unit)) in (\ b : A . (let e = false in unit))) as (Float -> ({ e : String , e : B }))))
(succ (\ a : ((B -> Unit) -> ({ c : Nat , c : C })) . (0 as (String -> Bool))))
(pred (fix (if unit then "apple" else b)))
(succ (fix (succ (if unit then 2 else c))))
(succ (\ e : ({ d : ({ a : Float , d : Bool }) , a : C }) . (succ (let e = b in 0))))
((iszero (fix (pred 0))) as (({ c : Unit , c : String }) -> ({ c : Nat , a : Top })))
(pred ((pred (if b then true else unit)) . a))
((if (let d = (fix 0) in (if (fix b) then 2 else true)) then (let b = (\ a : C . (succ c)) in (fix (succ a))) else (let e = ({ b = true , c = (if "apple" then 0 else "apple") }) in (if "boy" then c else "boy"))) . c)
((succ ((1 as Bool) as ({ b : A , e : ({ e : Bool , b : Float }) }))) . e)
(succ (succ ((iszero c) (iszero c))))
(if ((fix (succ 2)) ((pred "apple") as ({ c : String , e : Bool }))) then ({ a = (succ ("apple" "apple")) , e = (pred "apple") }) else (iszero ({ b = (let e = false in false) , b = true })))
(if (({ d = false , c = "apple" }) . a) then (\ d : ({ e : A , a : ({ d : B , e : B }) }) . ("apple" c)) else (pred (pred c)))
(if ((let b = c in a) as (Float -> B)) then (fix (pred (let d = 1 in 1))) else (fix (pred true)))
((fix (succ b)) ({ b = ({ a = 0 , d = ({ a = unit , a = 1 }) }) , c = (1 (false . e)) }))
(succ ((let e = false in 2) (iszero (fix b))))
(if (fix (iszero ("apple" as Bool))) then (if (fix a) then ((if 2 then a else a) . d) else (let b = false in unit)) else ((succ (let a = "boy" in 0)) as (String -> Bool)))
(iszero (fix ((fix 2) . e)))
(fix (pred (fix (true . c))))
(\ a : ((Bool -> Nat) -> (B -> Bool)) . (let e = (if ({ d = ("apple" "boy") , d = (succ a) }) then (pred unit) else (let a = (fix 0) in (succ 1))) in (fix ((let a = c in unit) . d))))
(fix ((iszero ("boy" . d)) . a))
(({ b = ((let b = 0 in false) as (B -> Bool)) , d = (iszero (1 . d)) }) ((succ false) . c))
(succ (succ (\ d : (C -> Bool) . (\ c : Top . "apple"))))
(let a = (succ ((succ 1) (succ b))) in ((let b = a in "apple") as ({ b : Nat , c : Nat })))
(let c = (succ ((succ 2) 1)) in (if (fix (let e = unit in true)) then (pred (\ d : (Unit -> A) . (if 2 then true else a))) else ({ a = "boy" , a = (unit . d) })))
(let c = ((if ({ d = unit , c = false }) then 0 else c) . e) in (pred (pred true)))
(fix (if (succ true) then (fix c) else (pred (succ unit))))
(({ b = (b as C) , a = (iszero (\ e : A . a)) }) ({ b = ((b as Nat) 0) , e = (pred 1) }))
((iszero (succ a)) . a)
(fix (((iszero (pred true)) . a) . d))
(iszero ((succ false) (iszero 1)))
(\ d : ({ c : ((Top -> Top) -> (Float -> Unit)) , c : (Nat -> String) }) . (((fix b) ((\ a : Unit . 1) unit)) as ({ b : (B -> C) , d : ({ b : Unit , c : Bool }) })))
(((({ b = a , c = b }) . e) as ({ e : (String -> Top) , a : Nat })) . a)
(iszero (fix (if (succ (\ b : B . false)) then (succ a) else (succ unit))))
(iszero ({ c = (let c = a in (true as B)) , e = (let c = (true "boy") in (let d = (b true) in (iszero 0))) }))
((succ ({ a = (if c then 1 else 1) , d = (let d = c in "boy") })) as (({ b : (Float -> String) , e : ({ a : Float , c : Unit }) }) -> ({ e : ({ a : A , c : String }) , c : (String -> Nat) })))
((let d = ({ a = b , a = true }) in (\ a : B . c)) . c)
({ b = (({ c = ({ d = "boy" , d = "boy" }) , a = (let c = b in false) }) . e) , a = (\ b : (({ d : Nat , e : Unit }) -> (Unit -> A)) . (succ ({ c = "apple" , c = c }))) })
(pred (let b = (let b = "apple" in true) in (0 false)))
({ e = (pred ((fix 1) . d)) , e = (fix (pred "apple")) })
(({ a = ((if 2 then false else a) as (Float -> B)) , e = ((0 . d) as (Top -> B)) }) as ({ c : ({ c : ({ d : Float , e : Nat }) , b : ({ a : Bool , d : Bool }) }) , c : (({ d : C , a : (Top -> Top) }) -> (Nat -> Float)) }))
(succ (pred ((fix a) (succ b))))
(if (((fix "apple") as (({ e : A , b : A }) -> Float)) ((if (\ c : B . a) then c else "apple") ((false . b) as ({ c : Float , b : Top })))) then ({ a = ((fix (unit as B)) as ({ d : String , e : (Nat -> Nat) })) , e = ((c false) . c) }) else (fix (1 . d)))
(iszero ((false as String) . d))
({ d = (pred (\ d : A . 1)) , c = (iszero (\ a : (Float -> Unit) . ({ d = ({ b = unit , e = true }) , b = (fix c) }))) })
(if ((c c) . e) then (iszero (b . c)) else (pred ((\ e : Top . "boy") (succ (fix true)))))
(succ (iszero (let c = "apple" in 2)))
(if (let a = ({ a = 0 , b = true }) in ({ b = a , e = (pred a) })) then (pred (succ true)) else (fix (let a = (1 as Unit) in (\ c : (C -> C) . ("apple" as Top)))))
((pred (fix (pred c))) ({ b = (succ (if "apple" then false else c)) , c = (let c = (succ c) in (succ 1)) }))
((pred ({ c = (b . e) , d = ((true as C) . e) })) ((iszero (0 true)) . d))
(\ b : ((({ d : ({ b : A , a : Bool }) , c : B }) -> ({ e : (String -> C) , a : (B -> String) })) -> (({ e : Unit , e : Top }) -> Float)) . (let b = (pred 1) in ({ a = (iszero "apple") , e = (false as C) })))
(iszero (if (\ c : (A -> Bool) . (if c then a else "boy")) then (iszero 2) else ({ a = 2 , b = unit })))
(let a = ((succ true) (succ b)) in ({ a = (if 2 then false else b) , e = (iszero 2) }))
(iszero (let c = ((pred a) as Top) in (2 0)))
(succ ((\ c : (Float -> B) . ("boy" as Bool)) as (Top -> ({ a : Nat , d : C }))))
(iszero (\ e : ({ c : ({ a : A , d : Float }) , c : ((Top -> Bool) -> (Float -> B)) }) . (iszero true)))
(\ b : ({ c : (Top -> (B -> A)) , b : (((Top -> String) -> C) -> ((C -> C) -> (Nat -> Bool))) }) . (let c = (succ (succ a)) in (pred ({ e = true , d = true }))))
((let b = (1 as B) in ({ e = 0 , e = 2 })) (\ e : ({ d : Nat , e : Unit }) . (let b = 0 in b)))
(pred (fix (fix 2)))
(succ (\ b : (({ d : Nat , a : Bool }) -> (C -> C)) . (pred "apple")))
(\ b : ({ c : ({ e : C , d : Float }) , a : ({ e : Top , d : String }) }) . ((true as ({ c : Top , c : B })) (true . e)))
(succ ((\ c : Bool . (unit . a)) as ((Bool -> ({ b : B , b : Unit })) -> ({ c : (C -> C) , e : (A -> Unit) }))))
({ c = (fix (\ a : ({ d : (Unit -> Bool) , e : A }) . (if false then false else b))) , c = (\ e : (Float -> Top) . (\ c : Top . false)) })
(let a = (succ (iszero 0)) in (succ (true as Unit)))
(let d = (fix (if false then unit else 1)) in (iszero ((b as A) . e)))
(\ c : ({ c : ({ b : Float , d : ({ d : C , c : Bool }) }) , b : (Top -> A) }) . ((fix (0 as Top)) ({ b = 2 , b = (\ a : Unit . 2) })))
(let e = ((succ (fix c)) as (({ b : B , c : Float }) -> ({ b : Bool , b : Top }))) in (("boy" . c) (\ e : (Top -> Top) . b)))
({ d = ({ b = ((let d = 0 in unit) . c) , c = (let c = (if (pred false) then (succ true) else "boy") in (let a = false in false)) }) , d = (pred (\ e : ({ c : String , a : A }) . ({ e = true , c = true }))) })
(succ (let b = (succ b) in (fix false)))
((pred (let a = c in b)) . c)
(iszero (pred (succ b)))
(\ a : ({ b : ({ c : (C -> Top) , a : (Top -> Unit) }) , d : (Top -> Top) }) . (((\ b : Bool . unit) as String) as ({ b : Float , a : (Bool -> A) })))
((succ (\ b : ({ e : (Nat -> Float) , e : B }) . ((\ e : B . a) true))) . a)
(let c = ({ a = (\ e : Bool . (iszero false)) , c = ({ d = ({ e = false , b = false }) , c = (pred unit) }) }) in (if (\ b : C . "boy") then ({ a = (let d = a in 0) , b = ("apple" as (Top -> Top)) }) else (let a = c in "apple")))
(((fix (let b = 1 in true)) (\ c : (C -> Float) . (c . a))) as ({ b : ({ e : ({ d : Top , d : C }) , e : B }) , a : ({ c : Float , a : (Unit -> C) }) }))
(succ ((if "boy" then 1 else true) (iszero "boy")))
(succ (fix (succ "apple")))
(if (iszero (succ true)) then (iszero (iszero 0)) else (fix ((let e = (b . a) in (c "apple")) . b)))
(if (let c = (fix c) in (fix ({ a = b , e = a }))) then (pred (\ b : (Float -> (Float -> Bool)) . (fix 1))) else ((\ d : (A -> Float) . (if c then 0 else true)) (pred 2)))
(succ (if (let c = ({ e = unit , a = 2 }) in (\ a : A . b)) then (let a = ({ d = 0 , a = 2 }) in (true as A)) else (succ 0)))
((fix (fix 1)) ((let a = 2 in "boy") . c))
(iszero ((iszero "apple") . b))
(\ e : ((({ e : Unit , e : Bool }) -> (B -> Float)) -> ({ e : Float , e : Nat })) . (\ e : (String -> B) . (fix (pred 1))))
(let d = (pred (let a = (iszero 1) in (if true then (\ a : Top . 2) else (\ a : Bool . 0)))) in (fix (pred (0 . d))))
(((let b = a in true) (\ b : ({ d : C , b : String }) . (\ c : String . 2))) as ({ b : ({ c : ({ b : Float , c : Float }) , d : ({ c : String , c : Bool }) }) , e : (B -> A) }))
(pred ({ b = (succ true) , c = (if (1 as Bool) then true else (if 1 then 1 else c)) }))
((({ c = (2 as A) , d = (1 . b) }) (iszero (pred "boy"))) as ((({ d : A , c : Bool }) -> ({ b : B , d : Nat })) -> ({ a : (Top -> B) , b : ({ a : ({ e : Unit , e : Top }) , e : Nat }) })))
((let a = (if 2 then "boy" else b) in (true unit)) (succ (false (let b = unit in 0))))
((\ e : (Top -> B) . (fix b)) as ({ a : ({ a : ({ a : Bool , e : C }) , c : (Bool -> Float) }) , a : ({ a : Nat , a : ({ e : Top , d : B }) }) }))
(\ d : (({ d : ({ d : A , e : B }) , a : ({ d : Top , d : B }) }) -> (Bool -> (String -> B))) . (if (iszero (pred (pred b))) then (pred (let a = ({ b = unit , e = "boy" }) in 1)) else ((if b then a else 0) as B)))
(((let b = 2 in false) (pred "boy")) ((let c = (1 as Nat) in b) . e))
(if (fix ("apple" . b)) then ({ a = ((\ d : Nat . false) as String) , c = ({ c = true , b = (if "boy" then unit else 2) }) }) else ((pred c) . c))
(succ (if (let a = (succ (\ e : Float . true)) in (0 . e)) then (succ ((unit as Bool) 0)) else (succ (let e = "boy" in b))))
(iszero (let c = (succ (pred "apple")) in (succ (if true then a else "apple"))))
(fix (succ (if true then (succ false) else (succ true))))
(({ e = (fix ((\ e : Unit . unit) (fix "boy"))) , c = (iszero (iszero a)) }) (let b = ((if a then (succ 0) else true) (pred ({ b = a , c = true }))) in ((succ c) . d)))
(if (succ (pred (let a = ({ c = 1 , a = unit }) in (succ a)))) then (if (if (false "boy") then (if c then "apple" else 2) else (c as String)) then (let a = (if 0 then true else a) in ({ e = b , e = false })) else (if b then (succ false) else (if "boy" then 2 else 2))) else ((unit c) . e))
(\ a : ({ a : (Unit -> A) , d : ({ a : Unit , c : B }) }) . (fix (iszero ("apple" as C))))
({ b = ({ b = ({ a = true , e = 1 }) , a = (\ c : Top . false) }) , d = (fix (pred 0)) })
(iszero (iszero (1 "apple")))
(fix ((pred 0) as (Top -> Unit)))
(succ (if (let b = a in ({ a = 2 , c = b })) then ((c as Float) (succ a)) else ("apple" (fix "apple"))))
(pred (if ((iszero 1) as (Unit -> ({ a : A , e : Bool }))) then ({ d = (if c then 1 else b) , c = 1 }) else (iszero (if 2 then false else "apple"))))
(succ (if ({ d = (fix "boy") , c = true }) then (if (let a = 0 in 2) then (fix 2) else ({ e = (succ unit) , d = (if true then c else "apple") })) else (fix (let e = "apple" in (let b = 0 in 1)))))
(iszero (let b = (iszero (let c = "boy" in (1 2))) in (succ (fix "apple"))))
((fix (let c = ("apple" as Unit) in "boy")) . e)
(succ ({ e = (pred 0) , a = ({ d = b , a = 0 }) }))
(if (((true . d) (2 true)) ((iszero true) true)) then (\ c : (Nat -> Unit) . (if (succ 1) then (a as Top) else (succ b))) else ((pred a) as ({ b : Nat , c : C })))
(succ (fix (iszero (fix a))))
((fix (iszero "apple")) as ({ c : ({ d : Unit , b : ({ d : A , d : Float }) }) , d : ({ e : C , d : (Bool -> B) }) }))
({ a = ((fix false) . d) , a = (pred (succ a)) })
(let c = (iszero ((0 c) (if unit then unit else "apple"))) in (if ("boy" as A) then (if 0 then (\ c : B . a) else "apple") else (0 as Bool)))
(\ b : (({ b : (C -> Float) , a : ({ a : B , b : Float }) }) -> ((B -> Unit) -> (C -> A))) . (fix (if (let d = "boy" in unit) then (if 2 then b else 2) else "boy")))
({ a = ({ a = (pred (\ e : Nat . "apple")) , d = (if (succ a) then (2 as A) else (\ c : Float . unit)) }) , b = (fix ({ e = ({ d = "apple" , b = true }) , a = (true 1) })) })
(succ ({ d = (pred (let d = c in "apple")) , c = ({ e = (0 "boy") , b = ((unit b) . e) }) }))
(pred (pred (2 (if b then 2 else a))))
(fix (fix ((if 1 then 0 else (\ d : Bool . false)) . a)))
({ b = (\ e : ({ a : B , a : String }) . ((pred c) . a)) , b = (({ e = (\ a : String . 2) , c = (\ a : Float . 1) }) (pred (if unit then 1 else unit))) })
(if ((let a = unit in "boy") . b) then ((\ e : Nat . false) as (({ d : String , d : Bool }) -> Float)) else (succ (\ e : (Top -> Float) . unit)))
(\ a : ((Float -> String) -> ({ d : (C -> String) , a : (C -> (Nat -> B)) })) . (pred (pred (fix true))))
(\ a : ({ c : ((B -> Bool) -> String) , b : ({ b : Nat , c : Nat }) }) . (let a = (succ "boy") in (a . a)))
(if ((if (fix 1) then unit else ({ e = 1 , b = "boy" })) as ({ c : Bool , c : Unit })) then ((c 1) (succ (pred b))) else ({ e = (iszero (iszero a)) , b = (fix "apple") }))
(if ((succ true) (0 . c)) then (succ ({ c = true , d = unit })) else (({ e = (c as Float) , c = (pred unit) }) as ({ a : (Bool -> C) , d : ({ e : Bool , b : ({ b : C , b : String }) }) })))
(\ c : ((Top -> (Float -> Top)) -> ({ d : ({ e : Bool , b : Unit }) , b : ({ b : Nat , c : Float }) })) . (((iszero (if "apple" then "apple" else "apple")) as (A -> Float)) . e))
(succ (let b = (iszero "apple") in (b a)))
(\ d : ({ e : ((C -> A) -> Top) , e : ({ b : ({ a : A , d : Unit }) , a : ({ a : B , a : Unit }) }) }) . ((iszero false) . e))
((let c = (("apple" . b) 0) in ((iszero ({ a = "apple" , c = a })) ({ e = (fix "apple") , a = 0 }))) (pred (let e = (0 . d) in (b unit))))
(if (iszero (fix "apple")) then (fix (\ e : String . (true 2))) else ((if false then (c unit) else "apple") . d))
({ b = (pred (iszero 1)) , b = ((\ c : ({ c : ({ b : String , d : Bool }) , d : ({ a : Top , e : Nat }) }) . (\ a : (String -> Nat) . (fix c))) as ({ e : ({ e : Top , e : C }) , d : (Unit -> Float) })) })
(fix (fix (pred false)))
((pred (\ a : B . 2)) . d)
(fix (if (((if 1 then a else false) as ({ a : A , a : A })) as (Bool -> B)) then (iszero (pred "boy")) else (pred (iszero (succ unit)))))
(let a = (if ((c 2) as Top) then (let e = (if c then unit else 1) in a) else (pred c)) in ((fix (fix 1)) . c))
(succ (iszero (pred 2)))
(fix (let e = (pred "boy") in (if ({ e = "boy" , a = 1 }) then (if a then "boy" else 1) else true)))
((pred (if (if ("boy" as A) then (\ a : String . c) else c) then (1 (succ b)) else (\ e : A . false))) (iszero (pred unit)))
(\ b : ({ c : (Top -> B) , c : ({ e : (Float -> Top) , d : ({ c : C , a : Unit }) }) }) . (iszero (\ e : ({ e : Unit , a : Nat }) . (if c then c else (\ b : B . true)))))
(fix (pred (fix "apple")))
((fix (0 b)) (let a = ("apple" as Nat) in (\ b : Float . (1 . c))))
({ a = (iszero (iszero b)) , e = (fix (if "apple" then (let a = "apple" in "apple") else (succ unit))) })
({ c = (\ a : (({ c : Unit , d : B }) -> ({ d : B , a : ({ c : String , d : Top }) })) . ((fix b) (1 false))) , a = ((iszero (a . e)) (((if false then c else "apple") as (Float -> C)) . a)) })
(succ ((iszero 0) . d))
(fix (pred (if 0 then "apple" else "apple")))
(\ d : (((Bool -> Top) -> ({ c : A , b : C })) -> ({ e : Unit , e : A })) . (\ a : ({ b : Top , a : Nat }) . (succ (if "apple" then 0 else 2))))
(succ ((iszero false) as ({ c : A , b : A })))
((iszero (iszero ("boy" . d))) as (({ e : ({ c : Float , c : Bool }) , d : C }) -> ({ b : B , d : Float })))
(((if (pred false) then 0 else (false . d)) (pred unit)) (succ ((succ 0) . b)))
(\ b : ({ b : (Unit -> (Top -> Top)) , b : ({ c : Unit , d : String }) }) . (iszero (pred b)))
(iszero ((iszero (\ a : Unit . b)) as ({ c : (Float -> Top) , a : ({ a : C , b : Float }) })))
((({ e = 0 , d = 1 }) as (String -> String)) . a)
(succ (iszero ("apple" (true as Unit))))
(((fix (\ c : Nat . unit)) ({ d = (let b = "apple" in c) , e = (if "boy" then 2 else "apple") })) as ({ b : ({ d : ({ d : ({ e : Top , c : Bool }) , b : Bool }) , e : ({ d : Bool , d : C }) }) , b : ({ c : String , c : (C -> Bool) }) }))
(iszero (let d = (if c then 0 else c) in (a as C)))
(fix (pred (iszero "apple")))
((iszero (fix unit)) (fix (true as B)))
(((fix b) (pred 1)) . b)
(if (let e = ((succ b) (pred c)) in (if unit then 0 else (succ b))) then (({ e = (succ 1) , b = (fix 1) }) as ({ b : ({ d : Bool , d : B }) , e : ({ a : B , a : B }) })) else ({ b = (if a then true else (a . c)) , a = (pred (let b = 0 in (pred 0))) }))
(fix (succ (iszero (a as Float))))
(((iszero (2 "boy")) (fix "boy")) (\ b : (Float -> (Unit -> String)) . (iszero (fix b))))
((succ (pred (succ c))) as ((Nat -> A) -> (String -> Bool)))
(({ d = (if (succ 0) then (\ a : Float . (iszero false)) else (pred true)) , a = ((iszero 1) . e) }) . a)
(if (\ d : ({ b : ({ c : String , e : A }) , b : ({ d : Unit , a : Unit }) }) . (iszero (iszero (let d = false in true)))) then ({ d = (true as Top) , a = (iszero 2) }) else (pred (let e = (iszero false) in true)))
(fix (let d = (succ b) in (let e = (pred 2) in (let c = 1 in b))))
(\ b : ((B -> (String -> String)) -> ((String -> Bool) -> ({ c : Nat , d : Bool }))) . (if (pred (\ c : (Top -> A) . (if false then false else a))) then (if (let e = false in c) then ({ c = (pred 0) , e = (pred c) }) else (iszero 2)) else ({ a = (pred true) , c = (fix (let b = 2 in "boy")) })))
(pred (\ c : (String -> C) . (let e = b in unit)))
(let b = (\ c : (Nat -> (String -> B)) . ("boy" . e)) in (\ a : (({ b : Top , c : Bool }) -> ({ e : Nat , e : Top })) . (("apple" . a) (0 as Float))))
(succ (iszero (succ c)))
