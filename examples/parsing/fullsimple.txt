({ c = (fix (fix (pred (case a of < d = b > => c | < a = c > => 0)))) , e = (let a = ((iszero a) as (< a : String , b : String >)) in ({ b = "boy" , b = c })) })
(succ ((< a = unit > as Float) as (< a : (< b : String , a : Nat >) , e : (< d : Bool , a : B >) >)))
(iszero ({ c = (\ d : Bool . 1) , d = (pred "boy") }))
(< e = (let e = (succ (pred "boy")) in ((< a = true > as Bool) (let e = "apple" in 2))) > as ((< d : C , b : C >) -> (C -> (< b : Float , e : Bool >))))
(fix (if (true "apple") then (succ 2) else (\ a : Float . "boy")))
(< a = ((((succ c) . e) as (A -> Float)) . a) > as ({ c : ({ a : (C -> A) , c : (C -> Float) }) , b : ((A -> Nat) -> A) }))
(iszero (if (< d = ({ b = "apple" , c = (pred a) }) > as ((C -> Unit) -> C)) then (pred (\ d : C . 1)) else (fix c)))
(\ a : (< b : ({ b : (Bool -> String) , c : (< a : B , b : C >) }) , a : (({ b : (Float -> String) , b : (Bool -> C) }) -> ({ d : Unit , d : Bool })) >) . ((succ true) (iszero c)))
((\ d : ({ e : A , b : (C -> Nat) }) . (if false then unit else 1)) (\ d : (< a : Nat , a : Float >) . ("apple" . e)))
(iszero ((pred (\ c : A . false)) as ({ a : ({ d : B , c : Unit }) , d : B })))
(< d = (("apple" . b) as ({ a : Bool , b : String })) > as (< b : (< b : Nat , b : Float >) , c : ({ a : (< b : Unit , d : Float >) , e : ((Float -> C) -> (< e : C , e : A >)) }) >))
(let a = ((\ d : B . ("apple" . b)) ({ d = (let d = false in unit) , d = (succ true) })) in (((pred (\ a : String . 1)) as (Bool -> Nat)) . b))
((succ (iszero (let b = "boy" in "apple"))) as ({ b : (Float -> Nat) , b : (< d : Float , c : A >) }))
((succ (iszero b)) (if (iszero true) then (2 (pred a)) else (pred (fix false))))
(succ (succ (let b = ({ b = b , d = b }) in 0)))
(if (let d = (pred "boy") in (< d = unit > as (String -> Unit))) then (iszero (fix (case ({ c = 1 , e = 0 }) of < e = d > => (if true then "apple" else a) | < d = d > => (fix false)))) else (if (if 1 then (case "apple" of < e = a > => 2 | < e = d > => "apple") else c) then (iszero (c . c)) else (let b = (iszero 2) in ({ d = b , a = 1 }))))
((\ d : (Float -> C) . ("apple" false)) (succ (iszero (b as B))))
(iszero (\ b : (({ d : Bool , a : Unit }) -> (< c : Float , c : Bool >)) . (iszero (if 1 then ({ c = a , b = 1 }) else (false false)))))
(case ({ b = ((let e = (fix c) in (\ e : Nat . 0)) (iszero "apple")) , d = ({ a = (case 0 of < c = e > => "apple" | < a = b > => "apple") , c = (\ a : C . (true unit)) }) }) of < b = d > => ((pred (pred true)) . c) | < e = a > => (succ (\ e : ({ b : Float , c : Unit }) . (pred c))))
(case (pred (\ b : Unit . (case c of < e = d > => unit | < d = e > => 1))) of < e = d > => ((case (fix 1) of < e = a > => (a . a) | < e = b > => false) (case (fix 1) of < d = e > => (true . a) | < e = c > => (case b of < e = d > => 1 | < a = c > => true))) | < d = c > => (case (case "boy" of < e = a > => "boy" | < c = a > => c) of < a = d > => (fix "boy") | < c = a > => (0 as ({ e : C , d : B }))))
(\ b : ({ d : ({ b : A , e : A }) , e : ({ b : (< e : Float , a : B >) , e : C }) }) . (case (2 . e) of < d = d > => (let b = false in a) | < c = b > => (if unit then 0 else a)))
(((succ ("boy" as B)) . c) as (< d : ({ e : Bool , e : (< c : Float , d : A >) }) , d : (< d : (A -> Nat) , b : ({ d : Unit , a : B }) >) >))
(((iszero (succ false)) (if ((< d = "boy" > as Nat) as C) then (fix (2 0)) else (fix c))) (pred (iszero false)))
(iszero ({ c = (iszero "boy") , c = (\ c : A . 1) }))
(pred (pred (< b = (iszero b) > as (< c : Nat , b : C >))))
(case (\ a : (String -> (< e : Nat , c : Nat >)) . (< e = (iszero c) > as (A -> A))) of < d = c > => (pred ({ c = "apple" , b = false })) | < a = e > => ((if ({ d = unit , e = 0 }) then (\ e : String . 1) else (b . c)) (pred (fix (< c = 2 > as Unit)))))
({ e = ((unit as Bool) . b) , c = (fix (unit as Float)) })
(iszero (({ c = c , a = unit }) . b))
((pred (case 0 of < a = e > => 2 | < c = d > => a)) as (< a : ({ b : (({ a : Bool , d : Float }) -> (< a : Nat , d : Bool >)) , c : ({ d : A , e : A }) }) , c : (Unit -> Bool) >))
(if (if (fix (if 0 then a else c)) then (fix unit) else (fix 0)) then ((({ d = "boy" , d = (pred unit) }) as ({ c : (C -> C) , c : Nat })) (unit (succ false))) else ({ b = ((\ c : ({ d : B , c : String }) . (if "boy" then unit else b)) ({ a = 0 , b = true })) , e = (< b = (unit 2) > as (Float -> Nat)) }))
(\ d : ({ c : ((< a : A , a : Bool >) -> Unit) , a : (< d : C , c : String >) }) . (iszero (\ e : C . 1)))
((let c = (case (case (fix 1) of < e = c > => (succ c) | < a = d > => (iszero 0)) of < b = c > => (fix (< a = 2 > as C)) | < a = d > => (fix "boy")) in (fix (let c = "boy" in false))) as (< e : (< b : Float , a : A >) , d : (C -> String) >))
(\ a : (({ b : B , c : (Nat -> A) }) -> (< c : Nat , a : String >)) . (let a = (0 0) in (if 2 then false else true)))
(pred ((iszero b) as (< d : B , a : ({ d : Nat , c : A }) >)))
(\ b : (({ d : Float , d : Nat }) -> (< b : B , c : Unit >)) . (((true as Bool) (iszero 1)) . a))
(< c = ((let e = "apple" in (if a then false else "apple")) . e) > as ({ c : ({ d : (< d : A , b : B >) , d : (({ b : Float , b : C }) -> B) }) , c : ({ a : Nat , a : Unit }) }))
(< c = ({ b = ("apple" . a) , a = ((iszero a) as (< b : A , e : String >)) }) > as (< c : ({ a : B , d : String }) , e : (< e : B , e : C >) >))
(((case (< d = 2 > as Unit) of < d = b > => ((case "boy" of < a = a > => c | < a = b > => 2) 1) | < c = d > => (iszero (< a = c > as Bool))) (case (succ a) of < b = e > => (if 1 then 0 else "apple") | < c = d > => "apple")) as ({ d : ((Bool -> Float) -> (Bool -> String)) , d : (< a : ((< c : Float , e : B >) -> Nat) , d : (< c : (< d : Nat , e : String >) , d : ({ e : A , d : A }) >) >) }))
({ c = ((fix (0 true)) (iszero (pred 0))) , c = ((\ c : (< b : Float , e : Unit >) . ({ d = 0 , b = a })) . d) })
(({ a = (let d = a in unit) , e = ({ b = 0 , d = unit }) }) . c)
(if (fix ("boy" as ({ e : Unit , a : Unit }))) then (\ c : (< d : B , c : C >) . ((pred false) (let d = true in "apple"))) else (case ({ e = (let c = b in 0) , b = "apple" }) of < d = c > => ({ a = (case unit of < c = a > => b | < a = a > => "boy") , e = (false as Float) }) | < d = a > => (succ (false false))))
(pred (((case "boy" of < a = a > => "boy" | < b = d > => a) as C) . d))
((< a = ("boy" 2) > as (Float -> ({ c : A , c : A }))) as (< c : (< d : Unit , a : Unit >) , c : ((A -> Nat) -> Float) >))
((case ({ a = 2 , c = 2 }) of < e = d > => (let c = "boy" in false) | < d = c > => ("apple" . b)) as ({ d : (Bool -> (Bool -> B)) , a : (String -> Bool) }))
(\ a : ({ b : (< c : String , e : A >) , d : (< e : Nat , e : A >) }) . (fix (case (unit as B) of < b = b > => (< b = unit > as A) | < e = b > => a)))
(pred (succ (\ e : Unit . 2)))
(< e = (let d = ((fix "boy") . d) in (if ({ a = a , e = false }) then (if 0 then unit else 2) else b)) > as ((({ a : Unit , d : Float }) -> (< c : (< b : C , e : B >) , b : ({ e : String , c : B }) >)) -> ((B -> A) -> (Nat -> Bool))))
({ c = ((succ 2) . e) , c = ((fix (fix 1)) (iszero (pred (iszero unit)))) })
((< a = (< c = 1 > as Float) > as ({ a : (A -> B) , a : A })) ((case (succ 2) of < b = e > => ({ a = (fix false) , a = (\ d : A . 0) }) | < d = b > => (\ a : Nat . "boy")) as (Bool -> (< a : Bool , a : C >))))
(pred (\ d : (Float -> (< a : Bool , d : A >)) . (if (iszero ("apple" as Float)) then (({ c = a , c = 1 }) true) else (pred 1))))
(succ ((if (iszero 1) then (true as Nat) else (succ 2)) . a))
(pred (\ e : ({ c : ({ c : Bool , a : Float }) , a : (B -> C) }) . (succ (fix 1))))
({ d = ({ c = (pred unit) , a = (let c = false in true) }) , c = (case (case (fix (0 . a)) of < a = a > => (pred false) | < b = a > => (case "apple" of < b = e > => c | < b = d > => "apple")) of < e = d > => (succ (case c of < a = c > => true | < b = d > => (succ false))) | < c = a > => (({ e = "apple" , d = a }) . e)) })
((pred ({ c = (if 2 then "boy" else "apple") , b = (let a = 2 in "boy") })) . c)
(iszero (if (if (fix true) then "apple" else 0) then (case 2 of < b = e > => 1 | < d = e > => (if unit then false else false)) else (\ e : Bool . false)))
(\ a : (< b : ({ a : (< b : Unit , b : Unit >) , d : (< e : Nat , a : Float >) }) , c : (({ b : (Float -> Float) , c : ({ d : String , e : Float }) }) -> (B -> Bool)) >) . (if (if (case 2 of < d = a > => "apple" | < b = d > => 0) then "apple" else b) then (pred (< a = false > as Bool)) else (succ (succ false))))
(({ e = (\ b : (< b : Nat , b : Nat >) . (\ c : Bool . true)) , c = (< e = (< c = 1 > as B) > as ({ c : ({ c : String , a : C }) , b : (String -> C) })) }) (case ({ e = (< e = (fix false) > as Unit) , e = (fix 1) }) of < e = a > => (let a = (0 true) in (fix 2)) | < b = a > => (fix "apple")))
((fix (< c = ("apple" as Unit) > as (C -> Nat))) as (({ c : (< c : (Unit -> C) , e : Nat >) , b : (< e : Nat , e : Float >) }) -> ({ d : Nat , d : ({ a : Float , d : Nat }) })))
(case (iszero ({ c = (case b of < d = c > => 2 | < d = d > => 0) , d = (if unit then false else "boy") })) of < b = b > => (< d = (\ a : (< e : ({ b : B , b : Nat }) , a : A >) . (1 c)) > as (Unit -> (B -> Nat))) | < d = b > => (\ b : ((< a : Bool , c : C >) -> B) . (a "boy")))
(pred (let a = (case b of < c = c > => 1 | < b = d > => true) in (let c = unit in 2)))
((< e = (pred false) > as ((< d : Unit , c : C >) -> ({ b : String , a : Bool }))) . d)
(let c = (succ (iszero (< d = false > as Float))) in (\ d : (< a : (< c : C , a : A >) , e : (< d : A , c : String >) >) . (< c = (iszero b) > as (String -> B))))
(pred ((fix a) as ({ a : C , c : Unit })))
({ d = ((let d = c in b) . e) , a = ((if (< e = 1 > as String) then (fix "boy") else (iszero (\ d : A . b))) as (< a : (< b : C , e : A >) , e : ({ c : Bool , c : String }) >)) })
(\ d : (< a : ({ c : ({ d : Float , d : Unit }) , e : Float }) , b : (< a : (String -> A) , a : C >) >) . (({ e = (fix true) , c = 1 }) (succ a)))
(if ((let a = "boy" in (unit "apple")) (if 0 then unit else unit)) then ((case (\ c : ({ d : C , e : B }) . (fix "boy")) of < c = a > => (iszero b) | < b = a > => ("apple" as String)) . c) else (succ (< c = b > as A)))
({ d = (if (if a then false else "boy") then (case true of < d = d > => "apple" | < a = d > => 2) else (pred "boy")) , d = (pred ((pred (< d = "boy" > as Unit)) . a)) })
(({ c = (succ 2) , d = (\ c : Nat . "boy") }) . e)
(if (iszero ((if a then a else c) as (< e : C , e : A >))) then (\ e : ((String -> Bool) -> ({ c : Bool , c : Nat })) . (succ true)) else (case ((case "boy" of < e = b > => 2 | < d = a > => false) as ({ b : Bool , e : String })) of < e = e > => (let c = (true as Float) in (0 (\ e : Nat . unit))) | < c = d > => ((succ 0) as (< d : C , a : Unit >))))
(pred (let e = (let a = false in true) in (case (< c = "apple" > as Float) of < d = b > => "apple" | < a = c > => (fix 2))))
((if ((pred true) (< c = 0 > as Unit)) then ((case "apple" of < e = d > => true | < c = a > => "apple") as Float) else (pred (\ d : Float . "boy"))) . a)
(let a = ((fix (let d = 2 in "boy")) . e) in (case (let c = unit in a) of < c = a > => (("boy" . b) . d) | < d = e > => (case 0 of < d = a > => 2 | < e = d > => (fix true))))
(({ b = ((0 b) (fix a)) , e = (\ e : ({ a : Bool , b : B }) . ("apple" c)) }) ((let e = (< e = 2 > as Float) in 0) (let b = (\ b : String . 2) in (let e = 1 in "boy"))))
({ c = (succ (case false of < b = b > => (iszero true) | < a = b > => unit)) , c = ({ c = (a (fix c)) , c = (pred (pred (if false then c else false))) }) })
(\ e : (< c : (B -> Unit) , d : ({ a : C , b : A }) >) . (iszero (fix (< d = c > as Unit))))
(fix (< b = (if false then "apple" else "apple") > as (B -> C)))
(((\ e : C . 0) as (B -> String)) (let e = ({ b = (< a = "boy" > as C) , d = 2 }) in (pred 1)))
(iszero (case (\ b : Nat . (true . d)) of < b = b > => ({ a = (succ true) , d = ((succ a) . e) }) | < d = c > => (\ d : (({ c : Float , c : C }) -> Float) . (case "boy" of < a = c > => 0 | < a = e > => false))))
(({ a = (< b = c > as ({ c : Unit , d : Nat })) , a = (let d = (false as Unit) in (pred false)) }) ((2 as Bool) (let c = (succ a) in (a b))))
(< a = (fix (< c = (c true) > as (< d : A , a : C >))) > as (< b : ({ c : (< a : Bool , e : C >) , c : Nat }) , e : (< a : (< d : C , b : String >) , e : A >) >))
(< d = (let b = (a as Float) in (fix 2)) > as ((< a : String , e : C >) -> ({ a : Float , b : Bool })))
(< b = ((pred (unit as ({ b : Unit , a : Nat }))) as (< b : ((C -> Bool) -> A) , c : (Nat -> Float) >)) > as (< b : ({ d : (B -> Bool) , b : (String -> Nat) }) , a : (< c : Nat , c : B >) >))
((case (((\ c : Float . false) as ({ a : Nat , a : Bool })) as ((C -> C) -> A)) of < a = b > => (if (let c = c in "boy") then unit else (a . e)) | < a = b > => ((pred a) . a)) as (< e : (A -> String) , c : ((< a : String , c : Nat >) -> (String -> String)) >))
(if ({ c = (let d = ("boy" as C) in unit) , e = (case a of < d = b > => false | < e = c > => b) }) then (if (\ c : B . 1) then (< e = (pred (< e = "apple" > as Nat)) > as (String -> String)) else ({ c = (iszero false) , a = (fix b) })) else (let b = (fix "apple") in ((iszero "apple") (let c = "apple" in 0))))
(\ e : (< b : (< b : (< e : Float , b : Nat >) , b : ({ b : Float , b : Bool }) >) , b : (({ b : A , c : (< d : A , a : C >) }) -> (A -> Float)) >) . ((iszero (fix 0)) (let d = unit in c)))
(iszero (fix (succ (2 as (< c : C , a : Float >)))))
(\ a : (({ b : C , a : Bool }) -> (< d : ({ e : A , c : String }) , e : Float >)) . ((iszero b) . d))
(iszero (({ b = a , b = false }) as (({ e : C , e : String }) -> ({ c : B , e : Nat }))))
(fix (if ((case (true . b) of < c = e > => (succ a) | < b = b > => (true . d)) . a) then (({ b = false , c = a }) ({ b = c , e = "boy" })) else (succ (let c = 0 in (b 2)))))
(let d = ({ c = (a as Unit) , d = ("boy" 1) }) in (succ (succ 1)))
(pred ((case 0 of < b = a > => 2 | < a = a > => false) (fix 2)))
(if (\ a : ({ e : Unit , b : C }) . ({ e = c , b = b })) then ((true false) . b) else (if (if (iszero 2) then (case 0 of < c = c > => c | < c = c > => "apple") else (case 2 of < a = c > => true | < d = d > => true)) then ((2 . a) (if false then (iszero "boy") else true)) else (({ a = b , a = "apple" }) as ({ a : String , d : A }))))
(case (pred (pred (< b = unit > as Bool))) of < c = c > => (pred ((false . c) . c)) | < e = d > => ((succ b) as (< c : Nat , d : (< b : A , e : Float >) >)))
(({ c = (pred 0) , c = (if false then c else 0) }) ({ b = (pred "apple") , e = (case "apple" of < a = c > => c | < c = e > => (let c = true in c)) }))
(((iszero (a as String)) as (< b : Nat , e : String >)) (if (fix "boy") then (succ 0) else ("boy" as String)))
(if (iszero (let e = "apple" in (fix 2))) then (succ (< c = (fix c) > as ({ c : B , d : Nat }))) else ((pred ("boy" . e)) (let b = 2 in "boy")))
(iszero (pred (case (succ false) of < b = e > => false | < b = a > => c)))
((iszero (if (0 as Bool) then ({ b = true , e = false }) else (< c = false > as C))) as ({ c : ((C -> String) -> Float) , b : ((< a : Unit , d : A >) -> (< d : A , c : String >)) }))
(let e = (case (let e = true in b) of < a = c > => (succ false) | < b = c > => (if (b . a) then unit else false)) in (succ (a as (String -> A))))
(fix (\ b : ({ d : Float , c : (B -> Float) }) . ((let d = 0 in unit) . d)))
((({ b = (< b = a > as String) , d = (if a then c else false) }) . c) as (({ b : ({ b : String , b : B }) , d : (< e : Nat , c : String >) }) -> (((Bool -> Float) -> C) -> ({ e : Unit , a : Unit }))))
(case (\ a : ({ c : ({ d : String , a : Nat }) , e : Unit }) . (1 as (< e : A , c : C >))) of < e = b > => (iszero (succ "boy")) | < b = b > => (("boy" . a) as (< c : B , b : Bool >)))
(case ((< b = true > as (B -> String)) (succ true)) of < a = e > => (succ (let d = 2 in a)) | < b = d > => ((pred unit) (fix 2)))
(({ e = (< a = (fix true) > as ({ a : (< a : Unit , e : C >) , a : (String -> String) })) , a = (< e = (unit true) > as ((< e : C , d : B >) -> B)) }) (< b = (fix (fix (< e = "apple" > as Nat))) > as (({ a : Float , d : A }) -> (< d : B , b : (< a : C , b : A >) >))))
(case (pred ((if c then 1 else true) as B)) of < e = e > => ((< d = false > as String) (\ b : String . "apple")) | < c = a > => (fix ((succ "apple") as A)))
((fix (case 1 of < a = a > => (let d = 1 in unit) | < c = b > => ("boy" . a))) . a)
((fix (\ b : Unit . (iszero b))) as (< d : (< e : (< b : Bool , a : Nat >) , a : ({ a : B , e : String }) >) , c : ({ c : Float , c : Float }) >))
(succ (((({ a = 2 , c = true }) . e) ({ d = c , a = 0 })) (case (pred unit) of < d = d > => (succ (0 as Float)) | < a = c > => ("apple" (let b = c in 0)))))
((({ e = (if (let a = b in "boy") then (< a = unit > as C) else (c false)) , c = (succ true) }) (pred (\ a : C . unit))) ((let d = (c as A) in true) (((1 a) . b) . e)))
(pred (let a = (iszero c) in (case 2 of < d = b > => false | < c = b > => b)))
(((\ b : (< b : (< c : Bool , a : String >) , c : Unit >) . (false as Float)) (fix (iszero a))) as ((< c : (< d : C , c : Nat >) , e : Unit >) -> (< a : ((A -> B) -> Float) , c : (< a : String , d : Nat >) >)))
(((iszero ({ d = b , a = 1 })) as (< d : ({ e : ({ d : A , e : Unit }) , e : Bool }) , a : (Bool -> C) >)) ((< c = a > as Bool) . e))
(succ (case (let a = "apple" in unit) of < c = a > => (fix (iszero c)) | < c = d > => (\ a : (({ a : A , b : Float }) -> Nat) . ({ c = (unit "apple") , d = (pred 0) }))))
(if (let e = (case 2 of < b = a > => (fix "boy") | < d = a > => 1) in (case true of < c = e > => 0 | < c = b > => true)) then (pred (case (succ 0) of < e = d > => (pred 1) | < c = b > => (if c then 2 else (2 b)))) else (fix (< a = "apple" > as A)))
((fix (fix b)) as (< d : ({ a : ({ d : Nat , d : Nat }) , c : (B -> Float) }) , e : (Float -> B) >))
(let e = (case (c as A) of < b = e > => (case 1 of < d = d > => (case "boy" of < e = e > => true | < c = e > => "apple") | < a = b > => false) | < d = b > => (fix "apple")) in (fix (< c = (2 c) > as A)))
(succ ((if (fix 0) then ("apple" . c) else (1 . c)) . a))
(< d = (succ (let a = b in unit)) > as (< a : ({ b : (< a : Bool , a : C >) , a : (Unit -> ({ d : Nat , a : Unit })) }) , c : (< a : (A -> C) , e : ({ b : (< a : String , c : B >) , a : (< e : Float , a : Float >) }) >) >))
(\ e : ({ c : ({ b : (B -> C) , c : C }) , c : (< d : B , c : B >) }) . ((fix (false . c)) as (Unit -> String)))
({ d = (if (fix b) then (case true of < c = e > => a | < c = e > => 2) else (fix "apple")) , c = (< c = (\ b : Bool . 1) > as (String -> B)) })
(\ a : (({ e : Unit , a : A }) -> (< b : C , c : C >)) . (\ b : ({ e : C , b : B }) . (case "apple" of < a = c > => unit | < a = d > => unit)))
(succ (if (< d = "boy" > as String) then (if 2 then "boy" else b) else (succ (false true))))
(if ({ a = (pred false) , d = (succ (\ c : Unit . (\ b : Nat . c))) }) then (\ a : (< a : ({ b : Unit , e : C }) , b : ({ a : Nat , c : String }) >) . ((false as Nat) as A)) else ({ c = (pred (case 1 of < b = c > => 0 | < b = d > => false)) , e = (iszero (false as B)) }))
(case (iszero (b as Bool)) of < a = a > => (iszero (if (fix 1) then 1 else "apple")) | < d = c > => ((let a = "boy" in c) as ({ d : String , d : (C -> Bool) })))
(< d = (fix (case (let a = c in 2) of < d = a > => a | < e = a > => (fix false))) > as (< b : (< d : A , e : ({ d : Bool , d : Float }) >) , e : (Float -> Float) >))
(case (iszero (pred b)) of < a = e > => (pred (iszero (fix "apple"))) | < a = c > => (succ (case true of < d = e > => (let b = 1 in a) | < e = b > => (iszero b))))
(if ({ d = ((< b = false > as ({ d : Nat , d : C })) as (String -> (Nat -> C))) , b = ({ c = (2 as Float) , a = "boy" }) }) then (pred (pred "apple")) else (< d = (pred b) > as ({ e : ({ b : Unit , e : Unit }) , d : Float })))
(fix ((< a = (2 as String) > as ({ b : Nat , b : String })) . a))
(((< b = (fix b) > as ({ a : A , e : String })) . b) . b)
(if (< d = (\ d : C . 2) > as ((Float -> B) -> String)) then (({ a = (pred (1 0)) , b = ((true 0) 0) }) as ((String -> Bool) -> ({ b : Unit , a : String }))) else (case ((\ e : (B -> C) . (succ 0)) . d) of < a = a > => (< b = (< a = 1 > as B) > as (< a : (< a : A , b : Nat >) , d : String >)) | < a = d > => (succ ("apple" . a))))
(if ((pred (pred "apple")) (fix (case c of < a = c > => b | < e = a > => 1))) then ((case (b c) of < b = e > => 0 | < d = d > => (< e = "boy" > as Nat)) as (< c : (< b : Bool , e : Float >) , c : A >)) else ((\ a : C . 2) (2 as Unit)))
(let c = (case (succ 1) of < d = e > => (pred false) | < c = d > => (case 1 of < a = a > => "boy" | < b = a > => 1)) in (if ((pred "boy") as Float) then ((c . e) . a) else (succ 1)))
(succ (case (c . d) of < d = a > => (false . b) | < a = e > => (unit . e)))
((if (iszero (iszero false)) then (< c = 2 > as (< e : Float , c : Unit >)) else ({ a = b , a = 1 })) (pred (fix b)))
(if (case (< a = (\ a : String . b) > as (< d : Nat , d : Nat >)) of < d = e > => ({ d = (< c = 0 > as Unit) , e = (iszero (< e = "boy" > as C)) }) | < b = c > => (if (let a = 1 in false) then (b . b) else (pred 1))) then (if (case false of < c = e > => false | < a = e > => 0) then (iszero c) else (({ e = a , c = "apple" }) . b)) else (succ ("apple" . d)))
(let c = (\ d : ({ a : (< c : Unit , b : Unit >) , c : (({ e : Nat , d : String }) -> C) }) . (if (pred "boy") then (1 . a) else (iszero unit))) in (< e = (let b = true in "boy") > as (< d : Nat , a : Unit >)))
(case (pred (\ b : ({ e : C , b : B }) . (c as B))) of < e = a > => ({ d = (iszero "apple") , e = (iszero 1) }) | < d = d > => ({ a = (case (iszero c) of < d = d > => ((succ c) (if "boy" then c else c)) | < c = a > => (succ (0 2))) , a = (fix (case (case "boy" of < e = e > => a | < c = b > => 1) of < a = b > => 2 | < e = e > => a)) }))
(iszero (\ e : (< c : ((< e : B , c : B >) -> (< d : Unit , b : String >)) , a : (({ a : String , b : Bool }) -> (String -> Nat)) >) . (fix a)))
(pred (pred (pred 2)))
((fix ({ d = (succ a) , b = (case false of < a = b > => true | < b = a > => "boy") })) as (< e : (< a : ({ c : Nat , b : Bool }) , b : ({ e : Unit , d : Unit }) >) , c : ({ a : Bool , d : Nat }) >))
(pred (iszero (succ a)))
(iszero (fix (fix (a false))))
(fix (case ((0 "apple") as (< c : C , a : B >)) of < c = a > => (succ (let b = unit in 2)) | < a = b > => (let b = (< e = c > as Float) in (iszero false))))
(fix (case (succ (let b = false in c)) of < d = b > => (< d = a > as Nat) | < b = a > => (case a of < b = c > => "boy" | < e = e > => 1)))
(fix (\ c : (String -> String) . (succ (fix a))))
(if (if ((< e = a > as Float) ({ d = (fix unit) , b = unit })) then (< d = (succ b) > as (< d : Float , d : B >)) else (iszero false)) then (if ({ e = a , b = c }) then (\ d : Float . 0) else (iszero false)) else ((if false then ({ b = 0 , c = unit }) else 1) . b))
(case ((if 2 then b else (if unit then "apple" else c)) as ({ d : (String -> C) , b : ({ b : Float , e : B }) })) of < e = d > => (((if a then a else false) (if c then 2 else true)) (\ d : C . true)) | < b = a > => ((case 2 of < e = e > => 2 | < d = b > => a) (let a = a in unit)))
(succ (if (fix unit) then ((let c = 1 in a) . c) else (< d = (succ "apple") > as (< b : Bool , a : ({ a : String , a : B }) >))))
(case ((false . b) (pred 2)) of < b = b > => (< a = (case b of < b = d > => c | < c = b > => "boy") > as ({ d : ({ e : String , b : Bool }) , e : Bool })) | < e = b > => (case (\ b : (< a : Float , d : Bool >) . (a . d)) of < e = b > => (pred (let c = unit in true)) | < d = e > => (if (case (unit 0) of < d = b > => (fix 1) | < c = c > => (succ 0)) then (\ a : Bool . 0) else (if 0 then "apple" else 1))))
(((succ (\ d : B . "apple")) as ((C -> B) -> (Unit -> Float))) . e)
(case ({ e = ((pred false) "apple") , d = (let c = (iszero true) in unit) }) of < e = c > => ((< a = ("apple" "apple") > as (< e : B , b : Float >)) (pred unit)) | < a = a > => (case (iszero true) of < c = a > => ({ e = (true . a) , b = false }) | < e = e > => (case c of < a = b > => 1 | < d = b > => unit)))
(succ (case ((fix "boy") . e) of < c = d > => ((let b = 1 in 1) as ({ c : A , a : Float })) | < e = e > => (< b = ("apple" as Bool) > as ((< d : A , e : Unit >) -> ({ c : Unit , c : A })))))
(iszero (iszero (fix (case "apple" of < e = b > => "apple" | < a = c > => 2))))
(succ (succ ({ c = (iszero a) , c = "boy" })))
(({ a = ((case "boy" of < c = d > => "apple" | < a = e > => c) as Bool) , c = (let d = (case "boy" of < d = c > => b | < a = c > => "apple") in (1 . c)) }) . b)
((succ (pred (case (< e = 2 > as A) of < a = c > => (\ b : B . 0) | < c = e > => 2))) as (({ a : ({ e : String , a : B }) , d : B }) -> (< b : (Bool -> Nat) , e : ({ b : (A -> Float) , e : ({ a : Bool , a : String }) }) >)))
(case (\ a : (< c : (A -> C) , d : (< d : Bool , e : Bool >) >) . (< c = (b 2) > as (< b : Nat , c : Float >))) of < b = b > => (pred (fix false)) | < b = c > => (< e = (("apple" . b) as (< b : Float , c : Unit >)) > as ({ b : (B -> Nat) , c : ({ d : String , e : Nat }) })))
({ b = (< e = (iszero (let a = b in 1)) > as ({ e : (< d : (B -> String) , b : String >) , a : (< c : Nat , a : Unit >) })) , e = ({ b = (succ b) , c = ({ d = 2 , b = 0 }) }) })
(let e = ((\ d : ({ d : C , b : Bool }) . (if 2 then b else "apple")) (succ 0)) in (pred ((pred 2) . a)))
(({ d = ((\ d : (< b : Bool , a : C >) . a) as (String -> Nat)) , b = (\ b : ({ e : (< c : Nat , a : Bool >) , e : (Float -> Unit) }) . (false . a)) }) . a)
(((case false of < d = a > => c | < a = b > => true) . e) (fix (let d = (if 1 then 2 else "apple") in (< e = a > as A))))
(\ b : (< b : ({ d : ({ d : B , b : A }) , b : ({ b : String , c : C }) }) , a : ({ d : (< e : Float , c : ({ b : Float , a : A }) >) , d : (< a : String , b : ({ a : A , c : Bool }) >) }) >) . (pred (< c = false > as A)))
(case ((unit false) as (C -> C)) of < e = d > => (pred (((a . e) b) (true (let c = 2 in b)))) | < c = e > => (case (2 b) of < b = c > => ({ b = 0 , e = 2 }) | < e = c > => (c 0)))
(< d = (succ (0 as ({ d : String , e : B }))) > as (({ a : Bool , d : Unit }) -> ({ b : (< e : C , b : Nat >) , a : (C -> C) })))
(< c = ((let c = unit in "boy") ({ a = (let a = 1 in "boy") , c = "boy" })) > as ((< a : (< d : Bool , b : Unit >) , e : ({ d : String , e : String }) >) -> ({ d : ({ c : C , c : B }) , b : (< b : Bool , d : Float >) })))
(< b = (fix (c b)) > as ({ a : ({ d : C , a : Float }) , d : (({ b : (< c : A , a : Nat >) , b : B }) -> ({ e : String , e : Bool })) }))
(fix (if (iszero 0) then ((case 1 of < a = c > => 1 | < c = d > => b) (pred b)) else ((pred (true . e)) as (< e : C , e : C >))))
(fix (let a = ({ e = ("apple" as (< b : B , d : String >)) , b = (fix (c . d)) }) in ((pred false) as ({ c : C , a : String }))))
(({ d = ({ c = "boy" , b = 2 }) , a = (let b = b in b) }) . d)
(pred (if ((unit . d) (succ c)) then (b . d) else (fix a)))
(iszero (case (fix (case 1 of < a = c > => 2 | < a = e > => a)) of < e = d > => (let b = c in unit) | < b = a > => (let a = 0 in false)))
(< a = (("boy" . d) . b) > as (< c : ({ e : Unit , d : A }) , c : ({ b : C , b : Bool }) >))
(((let a = "boy" in false) (pred true)) . b)
({ a = ((succ (if unit then unit else false)) ({ b = a , d = 0 })) , e = (let c = (iszero 2) in (0 "boy")) })
({ e = (< a = ({ e = a , e = true }) > as (< e : Float , e : ({ a : A , a : Unit }) >)) , e = ({ b = (succ 1) , b = (succ 2) }) })
(succ (succ (fix false)))
(case (< b = (iszero unit) > as ({ e : (B -> C) , b : ({ d : String , b : B }) })) of < d = a > => ((fix ({ a = 1 , a = b })) . d) | < c = c > => (< d = (pred 1) > as (B -> Unit)))
(if ((({ b = 2 , d = ({ e = c , e = b }) }) . b) as ({ d : Nat , a : ({ b : C , b : C }) })) then (< b = (iszero ({ a = 1 , b = "boy" })) > as ({ b : A , a : (Unit -> Nat) })) else (((case 1 of < e = b > => unit | < a = e > => b) . b) . d))
({ d = ((let c = "boy" in false) (iszero b)) , c = (pred (< d = true > as Unit)) })
(< c = (({ a = "apple" , e = b }) as (< d : Float , b : (< b : C , d : Float >) >)) > as (({ a : Unit , c : ({ e : Bool , e : Float }) }) -> (< c : Float , d : Unit >)))
(case (\ c : (< d : ({ e : Nat , b : String }) , a : ({ b : String , b : String }) >) . (2 . b)) of < c = b > => (< d = (case (fix a) of < b = a > => "apple" | < e = e > => 0) > as ({ c : (< a : Bool , d : B >) , b : Bool })) | < c = b > => (< a = (iszero "apple") > as (< e : Float , a : B >)))
({ a = (< e = (\ e : Float . 1) > as ({ e : Float , a : Float })) , d = (let e = (< e = false > as (C -> Unit)) in (case ("boy" . b) of < a = c > => (let e = "apple" in b) | < d = d > => (if unit then a else 0))) })
({ d = (if (fix (iszero 1)) then (let b = (succ unit) in (let d = 0 in "apple")) else (iszero b)) , e = ((if c then true else c) . e) })
(pred ((2 as String) . a))
(fix (case (if c then false else unit) of < b = d > => (succ (let b = 2 in b)) | < b = b > => ({ a = (succ 0) , b = 1 })))
({ a = (pred (fix unit)) , b = (if (pred (b c)) then (iszero false) else (< b = 0 > as (Float -> C))) })
(case (if ({ a = 1 , a = false }) then (({ d = false , a = 2 }) as ({ a : Unit , b : Nat })) else (let c = b in (case true of < c = a > => "apple" | < b = a > => c))) of < e = e > => ({ e = (0 as C) , c = (\ c : A . "apple") }) | < d = a > => (succ (succ 2)))
(if ((1 1) as (Bool -> Unit)) then ((fix (succ b)) . d) else (({ d = (fix (case a of < e = d > => "boy" | < a = b > => b)) , a = (\ a : Float . ("boy" as Nat)) }) . d))
(pred (< b = (({ a = b , c = unit }) . c) > as (C -> ({ d : Bool , a : String }))))
(< b = (pred (\ e : ({ c : (< c : Float , d : Float >) , b : String }) . ("boy" . c))) > as (< d : (< e : B , a : Unit >) , e : ({ a : A , e : String }) >))
(pred ((succ "apple") (iszero a)))
(< a = (\ a : ({ c : C , c : (< a : C , d : Bool >) }) . ((< e = "boy" > as A) as (B -> B))) > as (< d : (C -> C) , a : (< d : (< e : B , b : A >) , b : (< b : B , d : Nat >) >) >))
(iszero (if (case (< b = ("apple" as B) > as String) of < a = b > => (succ (if a then false else 2)) | < a = e > => (false . c)) then (let b = (c . a) in ({ c = 0 , e = a })) else (fix (2 b))))
((({ d = (\ d : String . c) , d = 2 }) . d) as (({ d : B , b : A }) -> ({ e : String , b : Bool })))
((iszero (succ "apple")) . b)
(\ a : ({ b : ((Unit -> Bool) -> (< c : (Bool -> Float) , d : (< b : String , e : A >) >)) , e : (((< c : Float , c : Float >) -> ({ d : C , a : Float })) -> ({ b : Nat , c : Nat })) }) . ({ a = (\ b : (< d : String , a : String >) . (if (< b = a > as String) then (1 unit) else (if unit then "boy" else 0))) , e = (\ e : (< c : Unit , e : Nat >) . (< a = "boy" > as Unit)) }))
({ a = ((iszero (\ d : Bool . "boy")) . c) , e = (case (case (let d = "apple" in 1) of < e = a > => (unit (\ c : String . true)) | < c = c > => (\ e : A . 2)) of < c = d > => (case (case c of < a = c > => unit | < d = e > => "apple") of < d = a > => (pred "apple") | < c = b > => b) | < d = c > => (< b = ({ d = 1 , e = (let d = 1 in "apple") }) > as (Bool -> Unit))) })
(if ({ a = (< e = (\ b : Nat . 2) > as ({ b : B , c : ({ c : A , c : B }) })) , a = (iszero (if b then (iszero 0) else (false 1))) }) then (pred ({ c = c , b = unit })) else ({ e = (if (fix a) then (pred (iszero unit)) else (let c = unit in 0)) , e = ((false . a) as Float) }))
(if (((\ d : Float . b) (b . e)) (\ b : (< c : B , d : String >) . (if 2 then b else 2))) then (case (succ (case a of < e = e > => "boy" | < a = e > => "boy")) of < b = b > => (fix (if "apple" then 1 else 1)) | < d = c > => (unit . c)) else (iszero ((iszero true) as (A -> Float))))
(< d = (if (case "boy" of < a = a > => (false c) | < c = b > => (let c = a in 2)) then (if (\ c : Nat . 2) then (fix 0) else "boy") else (case "boy" of < a = e > => false | < e = d > => 0)) > as ((< a : ({ a : Nat , c : A }) , d : (< a : Nat , e : Bool >) >) -> (< a : ({ c : Nat , a : A }) , c : (< a : Unit , d : A >) >)))
({ e = ((succ (fix true)) as (< b : C , b : A >)) , d = (pred (\ c : C . unit)) })
(fix (< e = (< e = (\ b : Bool . "boy") > as (Unit -> Bool)) > as ({ a : ({ d : String , b : B }) , b : (Nat -> Nat) })))
((iszero ((succ 0) b)) as ({ a : (Bool -> Nat) , a : ({ e : Bool , b : C }) }))
(succ (((\ b : C . 2) as ({ e : Float , a : (< a : Bool , e : A >) })) (if (case unit of < c = b > => true | < b = c > => 0) then true else (if b then 1 else true))))
(fix ((case unit of < c = a > => true | < c = d > => (succ c)) (2 as C)))
(let a = (\ b : ((< a : Nat , d : Bool >) -> (String -> C)) . (< c = (case (case b of < c = a > => "boy" | < d = a > => 1) of < b = a > => 1 | < e = e > => 2) > as (< c : B , b : Nat >))) in (case (succ (fix (let b = b in "boy"))) of < b = c > => (case unit of < d = e > => ("boy" as Unit) | < b = e > => ({ c = unit , b = "boy" })) | < b = a > => (if (case 0 of < a = b > => a | < c = c > => "apple") then ((if a then 2 else true) 0) else (pred c))))
(({ b = (let e = (true . b) in ({ d = 2 , c = 0 })) , e = (("apple" as A) as Nat) }) (< a = ({ e = (iszero b) , b = (pred "boy") }) > as (< d : (A -> (< a : Bool , b : String >)) , b : (B -> (B -> String)) >)))
(fix ((let a = (succ (pred "boy")) in (< e = "apple" > as A)) (if (0 as C) then (succ a) else (iszero (a b)))))
({ a = (let d = (({ b = "apple" , b = 0 }) b) in (succ unit)) , d = (case ("boy" . e) of < e = e > => ({ d = a , c = c }) | < d = b > => (< a = c > as Nat)) })
(< e = (case (let c = (\ a : Nat . false) in (succ 2)) of < a = d > => (iszero (true as Nat)) | < c = d > => (succ (unit as B))) > as ({ a : (< d : ({ d : Nat , c : String }) , c : Bool >) , c : ((String -> String) -> ({ d : C , c : String })) }))
(\ a : ({ d : ({ b : (Float -> A) , c : Float }) , b : ({ a : (Nat -> Float) , a : (String -> String) }) }) . (let a = (true (\ e : Unit . "boy")) in (if a then c else true)))
(pred (fix (pred (0 as A))))
(if (iszero (< d = "apple" > as (Unit -> C))) then (pred (("boy" as Nat) . a)) else ((\ b : A . unit) . a))
((((if "boy" then "apple" else c) . a) . a) as (< c : (({ a : Unit , e : Nat }) -> Float) , b : (String -> ({ b : String , e : Nat })) >))
(pred (pred (b . a)))
(let a = (if (let d = (iszero "boy") in (let d = c in unit)) then (if (succ 2) then ({ e = (succ 2) , d = b }) else (\ e : (< a : Float , b : Unit >) . (2 "boy"))) else (("boy" . c) (c 1))) in (succ ({ b = (iszero (fix "boy")) , c = (< e = true > as C) })))
(< a = ((if (fix false) then 1 else (fix true)) (pred c)) > as (< e : (A -> A) , b : (Float -> B) >))
((fix (if (case 0 of < c = a > => c | < b = e > => a) then ((if false then 2 else b) 1) else (pred 0))) as ({ a : (A -> C) , c : (Float -> A) }))
(case ({ b = (if (fix ({ d = "boy" , a = true })) then ({ d = (iszero 0) , d = (iszero 1) }) else ({ a = "boy" , e = (iszero unit) })) , e = (({ c = c , e = false }) . d) }) of < a = d > => (< b = ((succ b) . b) > as ({ a : ({ c : ({ c : B , a : String }) , e : C }) , d : ({ b : (< a : Bool , b : String >) , e : B }) })) | < d = d > => (succ (iszero (c 2))))
((fix (if (\ c : Bool . "apple") then a else (\ b : C . unit))) as ((< b : (< a : Unit , e : Float >) , b : (< e : Float , b : Nat >) >) -> (< a : (< d : Float , b : Float >) , c : (Nat -> Bool) >)))
((iszero (\ d : (< d : Nat , d : Float >) . (iszero (pred unit)))) as ({ d : ({ d : A , a : C }) , a : (C -> (< b : Nat , e : Unit >)) }))
(let c = (\ b : (< d : ({ e : (< b : Float , c : Nat >) , a : String }) , d : (Float -> (A -> String)) >) . (pred (\ e : Bool . unit))) in ((a . d) ((unit as C) . d)))
(let b = (pred (pred (if 1 then true else false))) in (pred ({ b = (if "apple" then unit else unit) , e = (false . b) })))
(((< c = "apple" > as Unit) as ({ a : Nat , c : B })) (pred (let e = c in (case "boy" of < b = c > => b | < c = a > => 0))))
(((\ c : A . false) as ({ b : ({ a : B , d : A }) , c : Float })) as (< d : (< e : Unit , e : Unit >) , c : (< a : Float , a : C >) >))
({ e = (fix (if 1 then "boy" else 2)) , c = (iszero (("apple" a) (\ e : Float . c))) })
(\ c : ({ e : (Nat -> String) , c : (< d : Float , a : String >) }) . (if (pred "apple") then (succ ("apple" a)) else (iszero (\ c : C . b))))
({ d = (iszero (succ (< d = 0 > as B))) , c = ((< b = a > as B) (succ (c . e))) })
((iszero (({ c = "boy" , a = "boy" }) as (C -> Unit))) as (< e : (< e : Float , d : A >) , a : (A -> B) >))
({ b = (< b = (\ a : A . (2 1)) > as ((Float -> Float) -> ({ e : C , a : C }))) , c = ((fix (false as C)) as ({ c : ({ d : (Unit -> String) , c : Nat }) , d : ({ d : C , c : ({ a : B , d : Float }) }) })) })
((pred (let c = (a . d) in (iszero 1))) . a)
(fix (fix (< b = "boy" > as (< c : B , b : C >))))
((< e = ((succ (\ b : Bool . 2)) as ((Unit -> Bool) -> C)) > as (< b : Float , d : (Float -> String) >)) as (({ b : (< a : A , e : Float >) , a : ({ b : ({ a : A , d : Float }) , c : String }) }) -> ({ c : ({ c : Float , e : String }) , d : (< b : Nat , b : Float >) })))
(\ a : (< e : (String -> A) , b : (< e : B , a : B >) >) . (iszero (< c = a > as Bool)))
(((\ b : (< c : C , b : Unit >) . (\ d : String . ({ d = unit , c = 0 }))) . d) . a)
(iszero (fix (succ (iszero c))))
(iszero (succ (fix (let d = a in c))))
(case ((case (2 unit) of < d = e > => (case 2 of < d = e > => c | < c = c > => b) | < e = b > => ((fix "boy") false)) (1 . b)) of < e = d > => (if (< a = ({ b = a , b = a }) > as (A -> String)) then ({ e = 1 , e = false }) else (< b = ({ c = c , b = b }) > as ({ b : ({ a : Float , c : String }) , e : C }))) | < b = e > => (succ (case "apple" of < d = c > => "boy" | < a = d > => "apple")))
(case ((pred "boy") . d) of < b = e > => (pred (< d = true > as (< d : Unit , e : Nat >))) | < e = a > => (pred (2 "boy")))
((if (iszero ({ d = c , d = 0 })) then (if (\ a : Unit . 2) then (a unit) else (iszero b)) else ({ e = b , d = (pred 2) })) ((case (b as Bool) of < e = d > => (let b = true in a) | < a = c > => ("apple" "boy")) . a))
(({ e = (pred 0) , c = (let d = 1 in 0) }) . b)
(\ d : ({ b : ({ e : Bool , c : C }) , b : (Unit -> (B -> C)) }) . (iszero (case ("boy" 0) of < c = c > => (case (c . c) of < d = c > => "boy" | < c = d > => 0) | < c = a > => (pred c))))
(pred (succ (\ d : Unit . b)))
(< c = ((fix (iszero "boy")) . c) > as ((Float -> Nat) -> ({ b : ({ a : A , e : Unit }) , b : (< a : Bool , c : B >) })))
(pred (iszero (succ false)))
((succ (iszero 2)) . b)
(let b = (\ c : (String -> C) . (let e = (< a = 1 > as Bool) in (succ (succ b)))) in (iszero (case 2 of < c = c > => 0 | < d = d > => b)))
(\ d : (< e : ({ b : (< e : Bool , d : Nat >) , b : ({ d : (Bool -> Float) , a : (C -> A) }) }) , c : (< c : (({ d : B , a : B }) -> (< b : Float , a : A >)) , b : ({ b : (Nat -> Nat) , d : ({ d : Float , e : Bool }) }) >) >) . ((let e = a in false) ({ d = (succ 0) , e = b })))
(let a = (fix (a as (Float -> Unit))) in (succ (case (fix "apple") of < e = a > => c | < d = d > => 1)))
((pred (< b = (if 1 then c else "boy") > as B)) (let e = (if (let d = a in 1) then false else b) in ({ e = 0 , e = 2 })))
(\ d : ({ b : (< b : String , b : Nat >) , b : (< c : String , c : A >) }) . (let d = (false as ({ a : String , b : Bool })) in (succ ({ e = 2 , e = 2 }))))
(\ a : (({ d : B , c : Nat }) -> ({ b : (< c : Float , b : C >) , c : Bool })) . (iszero (fix unit)))
(case (case ((0 as ({ b : C , c : A })) as (< a : ({ d : Bool , a : A }) , a : (< e : Unit , c : A >) >)) of < c = b > => (2 as (< d : String , d : Bool >)) | < e = b > => (fix (iszero b))) of < c = e > => (fix (let c = "apple" in 1)) | < e = e > => (\ a : ({ e : A , a : C }) . (succ true)))
(((iszero (c as C)) . d) . d)
(< c = (\ a : (< a : ({ d : (B -> String) , d : A }) , c : ({ c : Unit , d : B }) >) . (pred (false . e))) > as (< a : ({ d : Bool , b : Float }) , c : (Unit -> (B -> Bool)) >))
(fix (iszero (succ (pred false))))
(let c = ((if (false as A) then (false as Nat) else (pred "apple")) . b) in (case (< a = (pred 2) > as Bool) of < e = b > => (pred 2) | < d = a > => ({ d = (< e = a > as Nat) , e = unit })))
(fix (pred ((0 b) (case a of < d = c > => true | < d = d > => false))))
(< e = ({ d = ((case (0 . a) of < c = e > => (\ b : A . true) | < d = e > => (succ "apple")) as (Bool -> Nat)) , e = (\ e : ({ e : B , a : B }) . (pred 2)) }) > as ((A -> B) -> (< d : (Unit -> Bool) , d : ({ c : Unit , b : Nat }) >)))
(pred (if ((0 . d) as (Unit -> A)) then (let c = ({ c = 2 , a = false }) in (let c = "boy" in unit)) else (if 0 then "apple" else ("boy" . d))))
(succ ({ c = (let e = (let b = (succ true) in 0) in ((let e = 1 in 1) as (< d : Bool , d : Bool >))) , b = (succ (unit "boy")) }))
((fix ({ a = 0 , c = true })) as ({ e : (Float -> Bool) , c : ({ e : (String -> String) , c : ({ e : B , e : String }) }) }))
(if (pred (\ d : (< c : Nat , c : Float >) . c)) then (if (if (pred a) then (let a = "boy" in 0) else ({ b = false , b = b })) then (succ "apple") else (let d = true in true)) else ((pred "apple") (pred false)))
(succ (< c = (iszero ({ c = false , b = a })) > as (< d : (Nat -> A) , b : (B -> A) >)))
(fix ((< a = "apple" > as String) . a))
(case (case (if (succ 0) then (< b = "apple" > as C) else (\ d : (< d : Float , c : Bool >) . (c a))) of < c = c > => (succ (\ b : String . c)) | < b = a > => ((case 0 of < b = e > => 0 | < a = c > => "boy") as String)) of < a = e > => (pred ((case "boy" of < c = b > => true | < c = c > => "boy") . b)) | < d = e > => (iszero (pred (case (1 "boy") of < e = a > => (fix false) | < a = b > => 1))))
(pred (succ (iszero b)))
({ b = ((< c = b > as ({ c : Nat , e : Float })) . e) , d = (fix (if "apple" then false else false)) })
(\ a : (< d : ((Unit -> B) -> ({ b : C , b : A })) , c : (< a : String , b : C >) >) . (< b = (\ a : A . 1) > as (< b : (< e : Unit , e : Nat >) , c : A >)))
(pred ((case "boy" of < b = e > => (iszero unit) | < d = b > => 1) (unit as Bool)))
(case (iszero ({ d = ({ c = a , a = true }) , c = (< c = a > as Bool) })) of < b = c > => (iszero ("apple" . a)) | < e = a > => (succ (let a = (case a of < b = e > => false | < b = d > => c) in (false as B))))
(if ((pred 0) as (Float -> Unit)) then ((case ({ d = 2 , d = 1 }) of < c = e > => (iszero "boy") | < b = b > => (iszero c)) as (< c : ({ d : Nat , b : C }) , e : ({ d : B , e : C }) >)) else (iszero ({ b = false , e = true })))
({ b = (\ d : ({ d : A , e : Bool }) . (\ c : String . c)) , d = (succ ("boy" as B)) })
((fix (pred false)) . d)
(< d = (let d = (fix (\ d : Unit . a)) in (fix "boy")) > as ({ a : (({ e : Nat , b : Bool }) -> ({ e : A , a : Nat })) , c : (Unit -> Unit) }))
(fix (pred ((iszero true) . d)))
(let a = (let a = (< e = ({ a = c , c = 0 }) > as String) in ({ c = (pred true) , c = (false . d) })) in (let a = (c as (A -> String)) in ({ a = (let b = c in 0) , d = (2 as (< d : String , e : Nat >)) })))
(succ ((< b = (fix b) > as (Unit -> Bool)) (let c = (iszero 0) in (c a))))
(case ({ d = (b as Nat) , d = ((< d = false > as Nat) as (< b : Bool , d : A >)) }) of < d = a > => (\ a : (String -> String) . (case 0 of < b = a > => "apple" | < a = a > => false)) | < d = b > => (< d = ({ b = 2 , d = unit }) > as ((< b : Nat , e : Unit >) -> Float)))
(iszero ((case b of < a = d > => true | < b = c > => 1) as ({ b : Float , e : Unit })))
(let d = ({ b = (if 1 then "boy" else "apple") , d = (< e = (if false then "boy" else unit) > as Nat) }) in (case (fix (\ e : String . unit)) of < d = c > => (("boy" as A) as (< e : (< b : B , d : B >) , b : Bool >)) | < b = d > => (if (({ a = unit , c = c }) as A) then (b . b) else (1 as Float))))
((if (succ (if a then c else "boy")) then (\ b : (< b : A , c : B >) . (true b)) else (c . a)) ({ c = ((iszero (unit true)) ("boy" . e)) , a = ((\ a : String . false) as (< c : Bool , b : Nat >)) }))
(((iszero "apple") as ({ b : Float , c : String })) . e)
(fix ((succ (2 . a)) (\ a : Unit . 1)))
(iszero (if (succ true) then (< b = (case 2 of < e = b > => "apple" | < e = a > => true) > as Nat) else (< b = (< a = true > as C) > as C)))
(pred (("apple" . b) (let a = 2 in ({ e = a , e = 1 }))))
(\ c : (({ c : (< a : A , d : A >) , e : Float }) -> (< d : Bool , e : B >)) . (iszero (< b = (b true) > as ({ e : String , e : Unit }))))
(succ (pred (case 2 of < b = b > => false | < b = c > => "boy")))
(pred (succ ((< e = b > as B) as C)))
(let c = (iszero (iszero (a . c))) in (iszero (let c = "boy" in "boy")))
(iszero (fix (iszero (pred ({ a = 1 , b = true })))))
(((succ a) . b) . c)
(succ (\ a : ((A -> A) -> (< b : Unit , a : C >)) . (1 true)))
(\ e : (({ d : (< b : ({ d : Nat , c : C }) , b : C >) , b : ({ e : Unit , d : Bool }) }) -> ({ c : (< d : Bool , c : B >) , b : ({ a : B , a : A }) })) . (case (c . d) of < d = b > => (case "boy" of < c = c > => a | < d = c > => 1) | < e = d > => (succ (< c = 1 > as Nat))))
(succ (< e = (c c) > as (B -> String)))
((succ (unit . b)) as ((< d : (Float -> Unit) , b : ({ d : B , d : String }) >) -> (< c : Unit , d : Bool >)))
(fix (let b = (\ c : (< d : ({ d : Unit , b : Bool }) , b : (< b : Nat , c : C >) >) . (unit as (< d : B , d : String >))) in (succ (case (let a = "boy" in b) of < e = d > => true | < b = d > => (iszero true)))))
(< a = (case (fix (succ unit)) of < b = d > => (case (fix unit) of < e = e > => (case "boy" of < c = d > => b | < c = a > => 2) | < d = a > => (< e = 1 > as Float)) | < b = b > => (let b = b in (if unit then true else unit))) > as ((< b : (< b : Float , d : Float >) , c : (< e : B , b : String >) >) -> (< b : (< a : A , e : Nat >) , e : ({ b : Bool , c : B }) >)))
(if (succ (fix (c as Bool))) then (if ((iszero true) . d) then (({ a = "boy" , d = "boy" }) as (Bool -> B)) else (< c = (iszero "apple") > as (A -> Nat))) else (fix (< a = (succ "boy") > as (Nat -> Float))))
(iszero ((\ e : (({ e : Nat , e : Bool }) -> Float) . ((if false then false else true) . c)) . c))
(\ d : (< a : (C -> Unit) , c : (< c : C , a : String >) >) . (\ a : ((Nat -> A) -> ({ e : Float , b : Nat })) . (\ b : ({ b : A , b : ({ e : Bool , e : C }) }) . (fix c))))
(if (({ b = 0 , e = a }) (case true of < b = e > => c | < b = c > => b)) then (let e = (case (succ 0) of < e = d > => (iszero (< a = 0 > as A)) | < b = c > => (succ "apple")) in (if (let d = true in c) then (\ a : ({ a : String , a : String }) . ("apple" unit)) else ("boy" b))) else (({ d = (0 . a) , a = (fix c) }) as ({ e : (< c : C , a : A >) , a : (Bool -> Unit) })))
(((\ d : (< d : B , b : Bool >) . (unit as B)) as (< e : String , a : Nat >)) . a)
(fix (iszero ((let a = 1 in c) . a)))
(iszero (\ d : (< a : ({ e : B , a : Unit }) , d : (< e : Bool , a : B >) >) . (succ c)))
(iszero (\ a : (B -> Float) . (pred (iszero 1))))
(iszero ({ b = (pred (\ e : A . (case "boy" of < d = b > => 0 | < b = b > => 2))) , a = (< c = unit > as ({ c : Unit , c : Nat })) }))
(pred (\ b : ((< e : Unit , b : B >) -> ({ b : Float , d : A })) . (succ c)))
(iszero (< d = (let a = b in false) > as (< a : (< d : Nat , e : Float >) , e : (({ a : Float , d : Bool }) -> Unit) >)))
(iszero (iszero (((case 2 of < a = c > => a | < d = a > => 0) . b) . a)))
({ c = (succ (fix (unit false))) , c = (let b = (unit as Unit) in (pred (b unit))) })
(let a = ((case (1 as B) of < c = c > => (fix 0) | < b = c > => (< d = ({ c = 1 , e = c }) > as C)) ((let c = "apple" in 2) as ({ e : A , e : Nat }))) in (succ (let e = (succ "apple") in (\ d : C . "boy"))))
(< b = (if (case (\ b : String . (< e = a > as Unit)) of < a = a > => (\ a : (< a : Unit , a : Nat >) . "apple") | < d = a > => (succ 2)) then (succ (iszero unit)) else (succ (iszero "boy"))) > as (< c : ({ a : ({ d : Bool , e : A }) , b : (< d : (C -> String) , c : Float >) }) , e : ({ c : (< d : Unit , a : Bool >) , e : (Bool -> String) }) >))
(< d = (iszero ((iszero 1) as Float)) > as (< e : (< d : (String -> C) , e : Unit >) , c : (< c : Unit , a : A >) >))
(iszero ((pred a) ((if a then 1 else a) . d)))
(let c = (\ b : ((B -> B) -> (< a : (< b : String , e : B >) , b : B >)) . (pred 0)) in (iszero (pred unit)))
(if (let e = (fix 1) in (1 false)) then (({ e = (case "apple" of < d = a > => c | < d = e > => c) , b = (< d = 1 > as Unit) }) . d) else (pred (case (fix c) of < b = d > => (false false) | < a = b > => (iszero ("apple" false)))))
(< a = ((fix true) (< a = true > as B)) > as ({ d : ({ d : ({ e : ({ a : Nat , a : Float }) , c : ({ a : C , e : Unit }) }) , a : ({ c : String , c : (Nat -> String) }) }) , a : (B -> ({ e : A , b : Unit })) }))
(if (case ({ c = unit , c = 2 }) of < b = a > => (let e = 0 in (succ 1)) | < b = b > => (\ d : ({ c : (A -> C) , a : (A -> Float) }) . (if (case a of < b = b > => a | < c = d > => false) then (\ c : B . "boy") else (pred 0)))) then (\ d : ({ b : ({ a : B , c : B }) , b : (C -> Float) }) . (\ a : (< b : C , d : String >) . (succ (iszero 2)))) else (pred (< d = (iszero unit) > as Nat)))
(case (case (false as B) of < a = b > => (1 as (< d : Bool , c : Unit >)) | < d = e > => (fix "apple")) of < c = b > => ({ d = ("boy" . c) , b = (case "boy" of < a = e > => a | < d = b > => unit) }) | < a = c > => (fix (fix (false . d))))
(\ c : ((< b : C , e : (< a : Float , c : Nat >) >) -> ((< b : Float , e : Unit >) -> (Unit -> Nat))) . (< b = (< e = 0 > as Bool) > as (< d : Float , d : Nat >)))
(< d = (if (case 0 of < e = c > => (case unit of < c = e > => c | < b = c > => b) | < b = e > => 1) then ((a . e) (let a = 2 in "boy")) else (c (succ false))) > as (< e : (< d : Unit , e : C >) , b : ({ b : ({ e : Float , c : Float }) , c : ({ a : C , b : Unit }) }) >))
((if (pred (case 2 of < d = b > => 1 | < d = b > => "boy")) then (fix 1) else (pred (case false of < a = b > => true | < d = a > => 1))) ((iszero 1) as (({ e : A , c : String }) -> ({ a : String , e : Unit }))))
(case (pred (iszero (fix 1))) of < e = a > => (case (if (\ c : ({ b : A , b : Nat }) . (if "boy" then false else unit)) then (iszero "apple") else (\ a : Unit . c)) of < b = d > => (< a = 2 > as (< e : Float , a : Bool >)) | < b = e > => (if (succ c) then (let c = 2 in 1) else ({ c = "boy" , b = 1 }))) | < d = c > => (if ({ b = (iszero 2) , e = ({ e = "apple" , b = unit }) }) then (pred (true . a)) else (pred (c false))))
(fix (\ a : (< a : String , b : A >) . (\ b : ({ a : B , d : Float }) . (if (if false then unit else 1) then 1 else (fix "boy")))))
(\ c : (({ d : ({ b : C , e : Nat }) , e : (B -> Bool) }) -> (< a : Bool , d : ({ c : Float , c : Nat }) >)) . (((a . a) as A) . c))
(succ (case (< a = "boy" > as Nat) of < c = a > => ((\ e : Unit . 0) 2) | < c = c > => (\ a : C . true)))
(pred (pred ((unit "boy") as (< b : Float , c : (Bool -> Float) >))))
(case (iszero (iszero (b b))) of < a = b > => ((fix 1) (0 ("boy" as Nat))) | < a = e > => (case ({ c = ({ b = (pred c) , d = "apple" }) , b = (\ d : String . c) }) of < d = e > => (< d = (fix b) > as (Nat -> Unit)) | < c = e > => (let b = ({ d = 2 , a = c }) in "apple")))
((fix (succ "apple")) as ((< c : ({ e : Bool , e : C }) , e : C >) -> ({ d : B , b : String })))
(\ e : (({ c : ({ c : B , b : Unit }) , b : (Nat -> C) }) -> (String -> C)) . (case (pred 2) of < a = a > => (1 "apple") | < d = d > => (case (0 as Bool) of < e = c > => 0 | < a = a > => "boy")))
({ a = (case ({ e = (2 as Unit) , b = 0 }) of < a = d > => ((if 0 then false else 0) (iszero unit)) | < c = a > => ((< b = "boy" > as Nat) (fix a))) , d = (succ (pred (\ b : Float . 2))) })
(((a (let b = 0 in c)) (1 . a)) as (< b : ({ e : (Nat -> Float) , c : Bool }) , b : ({ d : ({ b : ({ b : Unit , d : Float }) , b : C }) , a : ({ a : Bool , c : C }) }) >))
(< b = (case (if b then 2 else c) of < c = d > => (1 . d) | < c = e > => (fix true)) > as ({ d : (< e : ({ a : String , a : C }) , a : ({ a : A , d : Bool }) >) , b : (< e : Nat , a : B >) }))
(let c = ((pred c) . d) in ((true . d) as ({ d : ({ a : C , a : (Nat -> Nat) }) , b : (< d : String , c : ({ e : Float , c : Bool }) >) })))
(< d = (let d = (case (if c then 0 else a) of < b = a > => (c as Unit) | < a = d > => (\ b : (C -> C) . 2)) in (if ((succ 2) false) then (true 0) else (succ (case 2 of < d = b > => c | < e = c > => "apple")))) > as ({ d : (< a : (< d : Bool , a : Bool >) , b : ({ c : Bool , d : String }) >) , b : ({ e : (({ e : Unit , a : B }) -> (Unit -> C)) , b : (< a : Nat , e : Unit >) }) }))
(let b = ((case 0 of < d = e > => (iszero b) | < e = a > => (pred false)) (let e = (true as (A -> Bool)) in (if ("apple" as Unit) then "boy" else ({ d = unit , c = true })))) in (succ (succ (\ d : Nat . unit))))
(if ((let e = (pred 1) in true) . e) then ((case (case 1 of < e = a > => b | < c = a > => (b as A)) of < c = e > => (iszero "apple") | < d = c > => ({ a = "boy" , a = true })) (let e = ((pred 2) as ({ e : B , b : Nat })) in (a . a))) else (((succ 2) as ({ b : A , c : C })) . a))
(case (let d = (iszero 2) in (iszero c)) of < b = a > => (iszero ({ b = "apple" , d = c })) | < e = a > => (if (succ (< b = true > as ({ e : B , e : Float }))) then ({ b = (iszero a) , a = (< d = false > as Bool) }) else (iszero a)))
(fix (let b = (pred "boy") in (("apple" false) as Unit)))
((iszero (let c = b in b)) as ((C -> (< a : Bool , d : A >)) -> (< e : Nat , e : (Float -> Bool) >)))
((succ (iszero 2)) . d)
(if (((iszero (let d = 2 in 0)) . e) as (Bool -> Float)) then (case (false c) of < d = a > => (case "boy" of < d = c > => true | < a = e > => "apple") | < d = c > => (if (a as String) then "apple" else "boy")) else (if ({ d = true , d = "boy" }) then (iszero "boy") else (iszero b)))
(< a = (fix (case true of < b = e > => "boy" | < b = d > => true)) > as ({ d : ((< e : A , c : Float >) -> A) , a : (((< d : B , e : Float >) -> B) -> ({ e : Nat , a : Nat })) }))
((case ({ a = true , a = true }) of < b = e > => (succ c) | < c = e > => ((\ a : String . b) "boy")) as (({ d : A , a : ({ b : Nat , c : String }) }) -> ({ e : (< d : Nat , a : String >) , d : (Bool -> String) })))
(let d = ((fix 1) as (< a : String , d : A >)) in ({ c = ({ d = (case a of < c = d > => 2 | < b = e > => unit) , d = (iszero true) }) , d = (fix (\ a : String . false)) }))
(pred (iszero ({ d = (if "apple" then "apple" else 2) , b = (if true then 1 else true) })))
(({ c = (case "boy" of < a = e > => 1 | < c = a > => 1) , d = (< b = ({ c = false , d = a }) > as Unit) }) (if (\ b : ({ a : String , d : ({ c : B , c : String }) }) . (succ (1 . e))) then (let e = (b as Nat) in (pred "boy")) else (fix "boy")))
((\ e : ({ a : ({ a : Unit , c : Bool }) , d : ({ d : String , a : Nat }) }) . (let a = (succ 0) in true)) (pred (pred true)))
(fix (< b = ((pred a) as ({ d : Float , a : Unit })) > as ({ b : ({ c : (< e : String , e : Nat >) , c : Nat }) , a : ({ a : Unit , e : (< e : A , d : A >) }) })))
(iszero (if (let c = b in (succ c)) then ({ e = 2 , b = 2 }) else (iszero true)))
((fix (\ b : Float . 2)) . e)
(< b = (case ((\ b : Unit . c) . a) of < d = e > => (if b then "boy" else 2) | < c = b > => (iszero (true unit))) > as (< b : (< c : A , e : B >) , e : ({ c : B , e : Nat }) >))
(succ (pred (< d = (let b = 2 in c) > as ({ d : B , e : A }))))
(succ (let d = (< d = b > as (< d : Nat , e : A >)) in (2 . a)))
(< b = (if (pred "boy") then ({ c = (if (let d = b in true) then (succ 0) else (succ 1)) , c = (< c = c > as C) }) else (pred (\ c : Bool . 1))) > as (< b : (({ b : Bool , a : A }) -> (Unit -> B)) , d : (< d : Unit , e : Unit >) >))
(< a = (\ d : (< c : ({ a : Float , c : Float }) , b : (B -> ({ c : Unit , b : Bool })) >) . (let b = (b . b) in ({ b = unit , d = "apple" }))) > as ((Float -> B) -> (< b : Float , e : C >)))
({ a = (if (pred 2) then (1 as Float) else (false as Nat)) , b = (let e = (succ a) in ({ e = "boy" , e = 1 })) })
(fix (iszero (fix ("apple" a))))
(pred (let b = (iszero 2) in ((< d = a > as Float) as C)))
(((< b = (\ c : Float . (< d = 1 > as Nat)) > as (< d : B , c : Bool >)) as (< d : (Unit -> C) , c : ({ a : ({ a : C , d : Bool }) , c : (Nat -> Float) }) >)) (({ e = "apple" , a = 0 }) (c . d)))
((({ d = (< e = "boy" > as String) , e = a }) (succ (iszero 1))) as (< a : (Unit -> ({ a : A , a : Float })) , c : ({ c : A , d : A }) >))
(let d = ({ e = (fix 0) , e = (succ 0) }) in (if ({ d = true , b = "boy" }) then (pred (< e = a > as Float)) else ((< d = b > as Nat) . e)))
(case ({ d = (succ b) , b = (\ b : A . ({ b = b , e = b })) }) of < e = b > => ({ a = (let c = 0 in unit) , a = (if (\ e : String . c) then (case c of < d = b > => 2 | < b = b > => "apple") else (pred true)) }) | < e = a > => (let c = ({ e = (iszero 2) , b = (if 0 then "boy" else b) }) in ((pred true) as (< c : A , b : Bool >))))
((case (< c = ("apple" . d) > as (< b : Bool , c : B >)) of < b = b > => (\ e : Float . b) | < c = b > => (iszero true)) . a)
(succ (case (iszero unit) of < e = b > => (\ d : A . 1) | < a = b > => ((if 2 then a else false) 2)))
(if (let b = (iszero (pred "apple")) in ((let b = unit in c) as Bool)) then ((let d = (case false of < a = a > => c | < b = a > => true) in (iszero "apple")) ((true . d) as C)) else (fix (fix b)))
({ e = ((< d = 0 > as A) ("apple" . e)) , e = (if (pred (pred unit)) then (\ d : (Nat -> A) . (succ (unit . d))) else (if c then 2 else (fix "boy"))) })
(((succ (let b = 0 in "boy")) . c) (let e = ((let a = 2 in unit) . b) in (if (if false then false else 2) then ({ d = (unit as C) , b = (let e = c in 2) }) else (1 . d))))
(((case "boy" of < b = a > => true | < d = e > => (fix 1)) . d) ((fix unit) (fix c)))
((if (if true then true else a) then (let e = b in false) else (< a = unit > as C)) as ((< d : (< c : B , b : B >) , c : (< a : Unit , a : Float >) >) -> ((< b : Float , c : A >) -> (Unit -> Nat))))
(let e = (case ((unit . d) as (< c : Nat , a : B >)) of < a = a > => (\ d : ({ a : String , a : A }) . (\ a : Unit . c)) | < c = b > => (succ (1 as B))) in (\ b : ((String -> Bool) -> C) . (if (< b = "boy" > as Bool) then (\ e : B . "apple") else (succ "boy"))))
(case (let b = (< c = true > as B) in (case c of < d = c > => true | < c = b > => "boy")) of < a = d > => (if ((if b then c else "apple") . b) then (iszero a) else ({ e = (case a of < e = a > => ({ c = unit , d = "boy" }) | < d = c > => (1 unit)) , d = (fix (2 as B)) })) | < b = b > => (iszero ({ c = c , e = 1 })))
(succ (< c = (\ e : Unit . b) > as ({ c : B , a : Float })))
(succ (succ (iszero (if unit then 2 else false))))
(fix (pred ({ d = ({ e = 2 , c = 1 }) , a = (let b = "boy" in a) })))
(succ (({ c = unit , b = b }) . d))
(let d = (\ b : (< c : ({ e : Nat , d : C }) , a : ({ b : A , d : C }) >) . (fix a)) in (((1 c) as A) . d))
(iszero ((succ 0) as ({ e : ({ e : Nat , e : A }) , c : (< e : C , e : C >) })))
((iszero ((\ a : Unit . "apple") ((succ 2) (pred "apple")))) as (< e : ({ b : (< a : A , e : A >) , b : (A -> String) }) , e : ({ c : (String -> C) , e : ((< d : A , c : Bool >) -> ({ a : String , b : Unit })) }) >))
(\ b : ((< a : Unit , c : Nat >) -> ({ e : String , b : Nat })) . (if ((pred (let c = true in true)) . d) then ((if "apple" then b else (case true of < b = d > => 1 | < a = a > => "apple")) . b) else (pred ((pred b) . e))))
(let c = (fix (\ d : Bool . "boy")) in (\ b : ((String -> Float) -> B) . (false unit)))
(let a = (\ e : (Unit -> C) . (pred true)) in (pred (pred b)))
(fix ((< d = (pred 2) > as Bool) as (< c : Nat , d : String >)))
((let c = (succ c) in (case 0 of < d = d > => (if "apple" then c else true) | < a = a > => (let d = unit in c))) (({ a = a , b = a }) . a))
({ d = (< a = (< c = (pred true) > as B) > as (< c : Float , e : C >)) , a = (iszero (< d = a > as Float)) })
((if (< b = ("boy" . a) > as (Nat -> C)) then (< e = (if unit then 1 else unit) > as ({ c : String , c : Float })) else (\ e : (< c : B , d : (String -> C) >) . ("apple" as Float))) . d)
(let b = (fix (false as (< b : B , a : Nat >))) in ((< d = (\ d : B . 0) > as Float) as ({ e : Bool , e : (< d : C , b : C >) })))
(succ (({ d = (\ b : Nat . (0 as B)) , c = (< d = true > as C) }) as ({ b : (Nat -> B) , e : Float })))
(succ (if (0 as String) then ("boy" as Float) else (if 2 then true else 2)))
(succ (succ (iszero 0)))
(\ d : ({ a : (< c : (< c : ({ e : B , c : Bool }) , b : A >) , e : (< b : Unit , a : Unit >) >) , e : (< b : ({ b : Bool , b : A }) , b : (< e : C , b : Unit >) >) }) . (let d = ((fix 1) as C) in (if 2 then "boy" else 0)))
(case ((false as Bool) . b) of < c = b > => ((b . d) as ({ d : String , a : C })) | < d = e > => (iszero (if c then a else ("boy" a))))
(pred (let e = (< e = "apple" > as Bool) in (iszero a)))
(if (fix (let d = (< b = c > as Bool) in (b unit))) then ({ a = (\ a : ((Unit -> A) -> B) . (pred (1 . b))) , c = (iszero (\ c : (String -> Unit) . (iszero 0))) }) else ({ e = (succ 0) , e = (\ a : ({ d : Unit , a : C }) . ("apple" as Unit)) }))
(fix (fix (let a = a in (pred 0))))
(pred (pred (pred (if "apple" then unit else "boy"))))
(pred (iszero (fix (1 true))))
(iszero (if (case "boy" of < e = e > => unit | < d = c > => "apple") then (true unit) else ("apple" . c)))
(if (if ((case c of < d = e > => false | < a = e > => c) false) then (let c = (pred (< c = 0 > as B)) in (case unit of < b = e > => a | < b = c > => c)) else (pred (pred false))) then (pred (succ (< e = "boy" > as Nat))) else (succ (iszero b)))
((if (< d = (pred (\ e : String . b)) > as (B -> Nat)) then (< b = (pred 1) > as ({ a : A , b : B })) else (case (case 0 of < c = b > => "apple" | < a = b > => false) of < a = b > => ({ b = 2 , e = b }) | < d = b > => (a as Nat))) . c)
(< c = (if (case 1 of < b = e > => (\ e : Nat . a) | < b = b > => "apple") then (true as Nat) else (case (if 1 then c else "apple") of < e = a > => unit | < c = c > => c)) > as ({ a : (< c : Unit , d : Unit >) , c : (C -> C) }))
((< e = (pred (c as A)) > as (({ d : ({ a : A , b : Unit }) , e : C }) -> ({ a : (Unit -> Bool) , a : Float }))) as ((< d : Unit , a : B >) -> (Unit -> C)))
(< c = ((< d = c > as (String -> C)) as ({ b : ({ d : String , b : Nat }) , e : ({ c : Bool , b : C }) })) > as ((< c : ({ a : Unit , b : Nat }) , d : ({ e : A , b : String }) >) -> ({ e : (< a : B , d : B >) , e : B })))
((((pred true) (succ (\ a : Nat . unit))) (pred 0)) . d)
(let c = (pred (< b = "boy" > as C)) in (fix (succ 0)))
(if ((fix b) . d) then (let c = (fix false) in (iszero (("apple" as Float) 0))) else (case (fix (true as Bool)) of < d = a > => ((let a = c in unit) (let b = 1 in b)) | < c = a > => (succ (\ e : Nat . true))))
(\ e : ({ e : ({ d : (Float -> String) , a : Nat }) , e : (Nat -> A) }) . (\ e : (< d : (< a : C , c : String >) , b : B >) . ("apple" ({ e = true , c = b }))))
(((if 2 then false else 0) as (({ b : C , b : Nat }) -> Bool)) . c)
({ d = ((succ false) as (< c : (A -> Unit) , a : B >)) , c = (case (case (unit as Float) of < c = c > => (pred false) | < b = d > => (let b = a in b)) of < b = a > => (succ false) | < b = d > => (fix (succ 0))) })
((fix ({ d = "boy" , e = false })) as ({ e : (< c : Unit , c : Unit >) , e : ({ c : String , a : A }) }))
({ c = (succ (< d = "boy" > as Unit)) , e = (if (\ e : ({ d : C , c : (< b : C , b : Float >) }) . (iszero c)) then (fix (b true)) else (b as ({ e : Unit , c : String }))) })
(succ (< e = ("apple" c) > as (Float -> A)))
(let a = (pred (< b = (succ c) > as ({ b : String , b : B }))) in (if (pred (pred true)) then (pred ("apple" false)) else (fix (\ c : Float . (succ b)))))
(({ a = (pred (iszero (succ 0))) , c = ((case true of < a = b > => "apple" | < e = a > => 1) . d) }) as ({ c : (A -> Nat) , e : ((B -> Unit) -> ({ b : Unit , e : A })) }))
({ d = ((pred "apple") as (B -> String)) , c = (let c = (succ ({ b = 2 , b = unit })) in (true as (String -> Float))) })
(((pred c) as ({ a : Unit , e : String })) (< d = (case unit of < a = a > => "apple" | < a = e > => c) > as ({ a : (< c : A , a : Float >) , e : B })))
({ c = (fix (let e = (let a = "boy" in 1) in (false true))) , d = (fix (\ a : ({ e : B , d : Bool }) . (2 as B))) })
(if ((pred (case unit of < e = a > => "boy" | < e = e > => c)) as (A -> Unit)) then (if (let a = a in "boy") then (iszero ("apple" b)) else (iszero 0)) else (iszero (iszero b)))
((let a = (c (let b = true in a)) in ("apple" as Nat)) as ({ b : (B -> Bool) , e : (String -> (< c : Bool , d : A >)) }))
(fix (case (iszero (pred a)) of < d = d > => (\ e : ({ b : Unit , b : C }) . (let c = ("boy" . e) in true)) | < c = b > => (let c = 2 in (false unit))))
((succ (pred ("boy" true))) . c)
(\ b : ({ c : (({ c : Nat , d : Unit }) -> ({ c : String , b : Float })) , b : (< e : ({ b : Unit , e : Float }) , b : Float >) }) . (iszero (if (fix unit) then (succ a) else "boy")))
(let c = ((< a = b > as Float) as (Nat -> Unit)) in (iszero (fix (pred b))))
(pred ({ e = (pred "apple") , c = (iszero b) }))
(\ a : ({ b : (Nat -> Float) , e : ({ c : B , a : String }) }) . (let c = (pred (\ c : C . 0)) in (succ false)))
(if ({ b = ((b . e) . a) , b = (({ a = (pred "apple") , e = (b "apple") }) (let e = c in c)) }) then (let c = (let e = (let d = "boy" in 0) in (a . e)) in (fix true)) else (if (pred b) then ({ e = ((succ "boy") . c) , d = (< a = 2 > as A) }) else (< a = (if "boy" then true else c) > as ({ d : (Nat -> String) , b : Unit }))))
((let c = ({ d = (if 2 then 2 else "apple") , e = (if 1 then 0 else c) }) in (iszero false)) . e)
(< a = (case (\ c : ({ d : String , b : A }) . (\ b : Float . b)) of < c = c > => ({ b = (pred true) , d = (c 0) }) | < a = b > => (0 as Nat)) > as (({ c : (< e : Bool , b : C >) , b : B }) -> (< b : (< e : A , e : String >) , d : (< e : Float , b : Unit >) >)))
({ a = (fix (0 as B)) , a = (fix ((if unit then "apple" else (case b of < a = e > => "boy" | < c = b > => false)) (pred false))) })
(fix (fix ((c "apple") as (Bool -> String))))
((pred (case b of < d = c > => b | < a = b > => unit)) . b)
((fix (fix (iszero "apple"))) (< b = (pred 0) > as (A -> ({ b : Bool , b : Unit }))))
(pred ({ b = (c false) , a = (c false) }))
((if (if true then (0 "boy") else unit) then (iszero ("boy" . a)) else (c . e)) as (< d : (< d : ({ a : String , b : String }) , e : (< c : Nat , a : Nat >) >) , d : (Nat -> Unit) >))
(let c = (succ (iszero (\ d : Bool . "boy"))) in (let e = ("boy" as Unit) in ({ c = (fix false) , c = (iszero "apple") })))
(if (< e = (case "apple" of < d = c > => true | < b = d > => c) > as ({ c : A , d : C })) then (case ((false "boy") "boy") of < d = b > => (unit unit) | < b = a > => (fix a)) else (iszero (case "boy" of < d = e > => 0 | < a = c > => 0)))
(case (fix (let c = "boy" in true)) of < a = d > => (iszero (fix 1)) | < e = b > => (case (succ 2) of < d = e > => (iszero 2) | < d = e > => (if false then false else 0)))
(case (fix ({ b = (if unit then false else 0) , c = (pred (2 . b)) })) of < a = a > => (\ a : (Bool -> (Unit -> C)) . (iszero true)) | < a = b > => (\ c : (< d : (< c : (A -> B) , a : Unit >) , e : ({ b : ({ c : A , d : Unit }) , e : B }) >) . ((pred (iszero unit)) . d)))
(< d = (\ d : (< c : (< e : ({ b : Float , b : String }) , c : C >) , c : ({ a : Unit , c : String }) >) . (fix (1 true))) > as ((< e : (< d : A , b : Nat >) , c : (< d : Bool , c : B >) >) -> (< b : String , e : C >)))
((\ b : ({ e : Float , e : B }) . (\ b : C . a)) . d)
((succ (\ a : Float . 1)) (let e = (pred (fix 0)) in (let b = (< c = 0 > as Bool) in a)))
((\ e : (< b : (< e : Float , e : A >) , e : ({ e : String , a : Unit }) >) . ((\ c : A . false) . e)) as (((C -> Float) -> Nat) -> ({ b : ({ d : Float , e : String }) , e : (< d : C , c : A >) })))
((iszero (< a = (false . d) > as C)) as ((Float -> Float) -> (< c : ({ b : Bool , a : A }) , c : (Float -> Bool) >)))
(((pred 2) as ({ e : C , c : (< a : B , e : String >) })) as (((< e : C , a : ({ e : Unit , d : Nat }) >) -> (A -> B)) -> (< b : (Bool -> Nat) , b : Unit >)))
(iszero (let a = ((fix true) as ({ e : C , b : B })) in (case (pred 1) of < d = e > => "boy" | < a = e > => "boy")))
(succ (fix (succ (iszero false))))
(if (let e = ({ b = 1 , c = (iszero 2) }) in (let a = (succ 0) in (\ b : ({ d : Float , b : B }) . "apple"))) then ({ b = (case ({ d = true , c = c }) of < a = e > => (c as Unit) | < e = e > => (0 . b)) , c = (({ a = false , c = "apple" }) as (< e : B , c : Nat >)) }) else (case ({ e = (succ false) , b = ("boy" . c) }) of < c = d > => (\ a : (< d : C , a : Nat >) . (succ 0)) | < d = a > => (0 . c)))
(pred (case (pred (\ b : Nat . a)) of < e = c > => (case (succ unit) of < e = a > => (a as Unit) | < d = c > => ((< e = false > as Unit) as Float)) | < c = a > => (b ({ e = a , e = b }))))
(\ d : (< e : (({ a : B , b : A }) -> ((< a : Nat , b : Nat >) -> ({ a : String , b : String }))) , e : (< e : (< d : C , c : Float >) , d : (< e : Nat , e : Unit >) >) >) . (< a = ({ e = 0 , c = "boy" }) > as ({ e : Float , a : (String -> Unit) })))
(fix ((< d = (case b of < e = e > => 1 | < c = e > => 1) > as (C -> String)) as (< c : A , b : String >)))
(succ (fix (< b = true > as (C -> Nat))))
((\ a : (< a : C , e : ({ d : Unit , c : String }) >) . (\ a : (Unit -> Float) . (succ a))) (fix (1 1)))
(\ e : ({ a : (< d : (< b : A , d : A >) , a : C >) , d : (< b : Nat , b : A >) }) . (({ d = (iszero false) , e = (iszero "boy") }) as ({ d : ({ b : Nat , a : A }) , a : (A -> Nat) })))
(succ (let c = (let c = c in (iszero 0)) in (< c = a > as (Unit -> A))))
(({ c = ((c as Float) as String) , e = (true as Unit) }) as ({ a : (< d : ({ c : Nat , e : (< e : A , c : Float >) }) , d : ({ b : String , c : String }) >) , b : (< c : String , c : ({ e : C , c : Bool }) >) }))
(\ e : ({ c : ({ a : Float , d : Float }) , d : ({ e : Bool , a : C }) }) . (pred (pred (iszero "apple"))))
(< a = ({ b = (1 . e) , b = (let e = false in unit) }) > as (< d : (< c : B , b : Unit >) , e : (A -> A) >))
((iszero (let e = (if b then 0 else b) in (case c of < c = e > => a | < a = a > => 1))) . c)
((if ((if (\ c : Nat . 1) then false else false) . c) then (fix (let e = 0 in 2)) else (succ (\ c : (Bool -> Nat) . 1))) as ({ c : ({ c : (< a : A , b : B >) , a : ({ a : Unit , a : Unit }) }) , d : (< e : Float , a : String >) }))
(case (\ b : ({ e : (Nat -> A) , b : ({ d : ({ b : A , d : Nat }) , a : (Nat -> Bool) }) }) . ({ d = (let d = unit in "apple") , a = (if true then (succ true) else true) })) of < a = c > => ({ c = (iszero (pred b)) , a = (((\ c : String . false) as (< d : Nat , e : Float >)) . a) }) | < a = e > => ({ d = (fix 1) , d = (< b = (2 as C) > as (< e : Nat , a : ({ c : Bool , e : String }) >)) }))
((({ c = (case c of < b = a > => ("apple" as B) | < a = a > => 2) , b = (fix b) }) . e) . c)
(let c = ({ a = (iszero unit) , c = (succ (1 as Bool)) }) in ((if (pred b) then c else (unit as Bool)) . b))
(\ c : (< a : ((< c : B , b : Float >) -> ({ e : B , d : C })) , d : (< a : (String -> C) , d : (< d : B , e : Bool >) >) >) . ((case unit of < d = b > => a | < c = b > => (< b = "boy" > as Bool)) as (< c : ((B -> Float) -> (Unit -> Float)) , c : (< d : B , c : Nat >) >)))
((((let a = b in b) (pred (0 . d))) as (< a : (Bool -> Nat) , b : (String -> String) >)) . d)
(({ e = (case "apple" of < e = d > => (\ d : Nat . 0) | < b = a > => 1) , d = ({ d = (< d = 2 > as Nat) , d = 2 }) }) (let b = (< d = false > as Unit) in (let b = (fix "apple") in 1)))
((< b = (a ({ b = b , d = a })) > as (Nat -> ({ a : String , a : String }))) . b)
(iszero (if (iszero (fix true)) then (succ unit) else (succ 0)))
((pred (let e = unit in a)) ((< e = ({ d = "apple" , e = "apple" }) > as ({ e : C , e : Nat })) (< a = (< e = "boy" > as Float) > as (Unit -> Bool))))
((< e = (iszero b) > as ({ a : C , a : B })) . e)
(succ ({ b = ((true . c) . c) , d = (let b = (succ (if b then 2 else 1)) in (let d = (let d = c in a) in (let c = true in c))) }))
(fix (let b = (pred (< d = true > as Bool)) in (succ false)))
(pred (succ ((true . d) . c)))
(fix (\ d : (< b : ({ b : C , a : Unit }) , a : Bool >) . (succ (case unit of < e = d > => c | < c = e > => "apple"))))
(pred (let a = (fix a) in (pred b)))
(iszero (pred ((if (succ 2) then 1 else b) (b . a))))
(\ c : (< b : (C -> ({ d : A , c : Nat })) , a : (Bool -> ({ a : C , c : C })) >) . (let c = (iszero b) in (case unit of < b = a > => b | < b = c > => a)))
(let c = (let a = (iszero unit) in (let c = (b . d) in 2)) in (let e = (c as C) in (if 1 then "apple" else c)))
(\ b : ({ d : (A -> ({ a : String , e : B })) , e : (< c : Bool , a : ({ e : String , b : String }) >) }) . (\ a : (< d : (< a : C , d : Bool >) , c : (< b : String , a : Nat >) >) . (let e = b in false)))
(fix ((let d = 0 in 1) as ({ e : C , b : (< b : Nat , d : B >) })))
(succ (let a = (< e = c > as Bool) in (pred (fix a))))
(\ e : (((< a : Bool , a : Unit >) -> ({ d : Unit , b : String })) -> ({ a : ({ d : Float , c : String }) , c : ({ e : Float , a : C }) })) . (iszero (\ d : (Unit -> B) . (< e = b > as String))))
(if (let c = (if (if true then false else "boy") then (let b = false in 2) else (\ a : B . 2)) in (({ e = a , d = true }) as (Unit -> B))) then (if (iszero (iszero true)) then (let d = ({ a = a , c = 2 }) in ({ b = "boy" , c = 2 })) else (pred (let c = 2 in true))) else (succ (0 as C)))
(\ d : (({ c : Float , b : (< c : Unit , c : String >) }) -> ({ e : (< c : String , a : A >) , d : ({ b : A , a : Nat }) })) . (\ a : (< b : (< c : A , b : Unit >) , d : (B -> String) >) . (if (1 a) then (true . e) else 2)))
(< e = (let c = (\ b : A . 2) in (succ false)) > as ({ b : ({ a : Nat , e : A }) , b : ((< e : C , a : C >) -> (C -> A)) }))
(succ (\ d : ({ b : (< a : Nat , a : B >) , e : Bool }) . (\ d : (< b : Unit , d : Bool >) . (pred 0))))
(iszero (({ b = b , b = (if false then 1 else true) }) as ((B -> Nat) -> Bool)))
(iszero (< b = (false c) > as (< c : ({ c : ({ e : A , e : Float }) , b : (Float -> C) }) , d : (< e : Bool , e : Float >) >)))
(< c = (fix (pred (\ e : A . 1))) > as (({ b : B , a : (< d : B , d : C >) }) -> ({ b : Bool , e : Unit })))
(let d = ((fix unit) . d) in (if (c 2) then (if (fix b) then ("apple" as Float) else 1) else (if unit then 1 else 1)))
(< c = (< e = (succ c) > as ({ a : Unit , a : Bool })) > as ((< a : A , e : Float >) -> ({ a : B , b : C })))
(fix (if (if "boy" then false else c) then (let c = unit in b) else (\ d : Unit . c)))
(succ ((fix a) . a))
(fix (case ((1 as Float) . c) of < d = d > => (case (succ a) of < d = d > => (case (case "boy" of < a = a > => c | < a = e > => "boy") of < a = c > => false | < d = a > => 0) | < d = c > => (succ c)) | < c = c > => ({ e = (pred unit) , c = (pred "apple") })))
((\ a : (< b : A , b : A >) . (case (succ 2) of < b = c > => 1 | < e = c > => true)) (("boy" as A) ({ b = true , c = c })))
((fix (succ "boy")) (case (succ ((case "apple" of < b = a > => unit | < e = e > => true) 2)) of < e = d > => ((true as Bool) as (< a : (< e : C , b : C >) , b : (< e : A , e : B >) >)) | < c = b > => ((if true then unit else 0) as ({ e : A , d : Nat }))))
(\ c : ({ d : (({ e : A , e : Float }) -> (Nat -> Bool)) , e : (Nat -> (Bool -> Bool)) }) . (let e = (fix ({ d = c , e = 0 })) in (fix "boy")))
(((\ a : ({ a : Unit , d : Bool }) . unit) (< d = ({ b = 2 , e = unit }) > as ({ e : ({ e : Nat , d : Float }) , c : ({ a : Nat , b : Bool }) }))) (fix (fix ("boy" as C))))
(case (if (pred (a "apple")) then (succ a) else (if "apple" then unit else 0)) of < a = a > => (succ (\ e : (< d : ({ d : Unit , c : A }) , a : Nat >) . (false . a))) | < d = a > => (\ d : (< c : (< e : Unit , b : B >) , d : (< b : Bool , d : Float >) >) . (case ({ c = "apple" , c = unit }) of < a = b > => ({ d = "apple" , c = 0 }) | < d = a > => 2)))
(succ (case ("boy" . a) of < c = d > => (< e = (b unit) > as ({ c : (String -> Bool) , d : B })) | < b = e > => (b "apple")))
(iszero (fix (succ (pred a))))
({ e = (succ (iszero 2)) , b = (if (\ a : ({ c : (< a : Float , e : A >) , a : (< a : Unit , d : Float >) }) . (< b = 2 > as Bool)) then (pred (c . d)) else (\ c : (< c : Float , b : Float >) . false)) })
(\ c : ({ b : (({ a : Nat , d : String }) -> (< d : C , b : B >)) , d : (B -> (Float -> Float)) }) . ((1 as (A -> Nat)) (< d = (case (true . c) of < e = e > => 2 | < e = a > => (iszero 1)) > as ({ d : Bool , b : Unit }))))
({ a = (case ((< d = 0 > as Float) as ({ c : C , e : B })) of < a = a > => (if (true as Float) then (c . a) else ((\ b : A . unit) . b)) | < e = b > => (fix (case 0 of < e = d > => "boy" | < c = e > => 0))) , e = (succ (iszero ({ e = b , e = a }))) })
(fix (case ((\ d : ({ a : Unit , c : Nat }) . true) . e) of < d = b > => ({ b = c , a = 2 }) | < d = b > => ((succ 2) as ({ b : Bool , c : (Bool -> Bool) }))))
(< d = (pred (\ c : (Float -> B) . (fix (if "boy" then c else 1)))) > as (< e : ({ a : C , a : (< d : Nat , e : B >) }) , e : (< a : (< c : B , e : Bool >) , d : Nat >) >))
(fix (iszero (succ false)))
(succ (if ({ d = (2 as ({ c : A , b : Unit })) , c = (iszero unit) }) then (pred (if unit then 1 else true)) else (let e = (1 (if false then a else "boy")) in (false . d))))
(fix ((pred 1) (let d = true in c)))
(fix (< b = (\ b : (< b : Unit , a : Float >) . c) > as (Unit -> Bool)))
(fix ((("apple" as A) as B) . d))
((< b = (\ d : Bool . (\ e : C . false)) > as (< b : (String -> Float) , e : (A -> B) >)) as ({ d : ({ e : Unit , d : ({ e : C , e : Float }) }) , d : ({ b : (Bool -> Float) , a : (< a : String , d : A >) }) }))
({ e = ({ b = ((let a = 0 in "apple") . d) , a = ({ c = ({ e = "boy" , c = 2 }) , d = (2 . a) }) }) , d = (if (b 1) then (pred b) else ((fix "boy") . b)) })
(\ c : ({ e : (({ e : String , a : Nat }) -> ({ a : Unit , e : Float })) , c : (< a : ({ e : String , b : A }) , c : (< e : Unit , d : Unit >) >) }) . ({ b = ({ c = (let d = c in false) , c = (pred b) }) , b = ((iszero "apple") as ({ a : Bool , e : Bool })) }))
(pred ({ c = (pred 1) , d = (pred "boy") }))
(< e = ((let e = (iszero unit) in (succ b)) as (String -> A)) > as ({ a : (Float -> C) , c : ((Bool -> String) -> Bool) }))
(pred (fix (succ "boy")))
(< d = (pred ((if "boy" then false else b) . a)) > as (({ c : (< d : Bool , b : String >) , c : (< c : Bool , d : ({ d : Float , c : Unit }) >) }) -> ({ a : (C -> C) , b : (B -> C) })))
(iszero (({ c = a , d = "boy" }) ((if c then true else "apple") . b)))
(\ b : (< a : (< a : String , b : String >) , b : (A -> C) >) . (iszero (if (pred a) then (pred false) else (2 true))))
(if (((if a then unit else "apple") . d) ({ b = 2 , a = c })) then ((\ e : (< d : Unit , b : C >) . (succ false)) . d) else (\ d : (Unit -> A) . (let c = (pred b) in (0 as Bool))))
((fix (succ b)) . b)
(if ((< d = (< b = "boy" > as String) > as (< b : (< e : Nat , c : Unit >) , e : (Unit -> String) >)) as (({ e : Bool , b : ({ a : Unit , c : A }) }) -> (Nat -> C))) then ((pred true) as ({ a : B , e : (< e : B , b : Float >) })) else (\ e : (Unit -> (< a : C , d : B >)) . (\ b : ({ c : Nat , b : C }) . 2)))
(iszero (pred (\ b : (< e : (C -> A) , d : (A -> Float) >) . (fix (iszero c)))))
(iszero (fix (if ({ b = a , a = "apple" }) then (\ b : String . 2) else ({ a = "boy" , a = "boy" }))))
((let d = (case 0 of < a = a > => 2 | < b = e > => true) in (succ b)) (iszero (\ e : Float . false)))
(iszero (pred ("boy" . d)))
(succ (case (pred unit) of < c = a > => (< d = ("boy" . d) > as (< b : Bool , b : A >)) | < e = e > => (succ (if "apple" then "apple" else 2))))
(< e = (let c = (if "apple" then 0 else "apple") in (\ b : Float . false)) > as (({ a : (< b : C , e : B >) , e : B }) -> (< d : Nat , b : Float >)))
(iszero ({ e = (let d = false in "apple") , b = (succ 1) }))
(fix (< b = (pred (< e = a > as Unit)) > as (Float -> Float)))
(\ b : (< b : ((< c : C , a : C >) -> (< c : Nat , a : C >)) , e : (< c : String , c : Unit >) >) . (pred (if ("apple" as ({ e : Unit , d : C })) then (0 as A) else (case c of < c = e > => 2 | < b = b > => (\ d : Bool . unit)))))
({ a = (pred (let d = "apple" in ("apple" as Unit))) , d = (({ c = ("boy" as Bool) , b = (if unit then 1 else false) }) (false . d)) })
(let a = (iszero (fix "boy")) in (case (fix 2) of < e = d > => (2 . a) | < a = d > => ((fix true) (0 . e))))
(\ a : ((< d : Unit , e : B >) -> ({ a : Float , c : C })) . ((< d = a > as String) (false as C)))
(if (fix (succ (succ 2))) then (pred ({ e = "apple" , b = ({ e = 0 , c = "apple" }) })) else (< c = (iszero (fix unit)) > as ({ c : (Unit -> A) , d : (Unit -> Unit) })))
((let c = ((pred ({ e = b , a = true })) . c) in ((iszero "boy") as ({ a : Float , c : Bool }))) as ({ c : ((A -> C) -> C) , e : ({ b : A , c : Nat }) }))
((succ ((iszero 1) as ({ a : Float , b : C }))) . d)
(if (< b = ((1 . c) . d) > as (Nat -> B)) then (< c = (pred false) > as ({ c : Nat , c : String })) else (< a = (if (if c then 2 else "boy") then (if 0 then 1 else (let c = true in unit)) else (< b = unit > as Unit)) > as (< c : ({ a : Bool , b : Unit }) , d : A >)))
((((if false then c else true) as Bool) (succ ({ e = (succ 0) , c = "apple" }))) (< c = (succ "boy") > as (A -> Bool)))
(({ e = (iszero (\ b : Bool . a)) , c = (\ a : C . unit) }) . b)
(case (\ b : (Float -> Nat) . (case 2 of < b = b > => a | < a = c > => ("boy" . a))) of < e = c > => (fix (fix (case 1 of < c = e > => "apple" | < a = e > => 1))) | < c = d > => ((c c) (iszero 1)))
(\ c : ((({ c : Unit , a : Float }) -> (< b : Float , e : B >)) -> ({ e : Bool , d : Unit })) . (succ (fix (< a = a > as A))))
(succ ((iszero 0) . e))
(succ ({ a = (iszero 2) , d = (1 true) }))
(< e = (let b = (succ (\ c : Nat . c)) in (\ c : Nat . unit)) > as ({ d : ({ a : A , a : C }) , b : ({ a : Float , e : Bool }) }))
(if ((pred (< d = (< b = "boy" > as Float) > as B)) . c) then ((case (fix a) of < e = e > => (b . d) | < d = b > => (0 2)) (if "apple" then 1 else unit)) else (iszero (< a = (if 1 then (let a = true in 0) else "apple") > as ({ e : Float , b : B }))))
(\ e : (< c : ({ c : Unit , e : C }) , e : ({ b : (Float -> A) , e : ({ b : B , a : C }) }) >) . ({ b = (< a = 0 > as Unit) , e = (1 as A) }))
((((\ d : B . "apple") . c) as (< b : (Float -> Float) , b : Float >)) (iszero (let a = (let d = "boy" in 0) in 0)))
(iszero ((case true of < e = b > => b | < a = d > => (unit as Float)) as ({ e : String , d : (Bool -> A) })))
(< d = (if (case (case 2 of < a = a > => c | < c = e > => a) of < c = c > => (\ b : A . true) | < e = c > => false) then (case 0 of < e = e > => (1 . e) | < e = e > => (succ b)) else (iszero 1)) > as ({ d : (< a : (Bool -> Bool) , b : Unit >) , e : (< e : Bool , d : Float >) }))
(< d = (((false as String) . e) . e) > as (< b : (< a : C , e : String >) , e : (< c : Bool , a : A >) >))
(if (pred ({ a = 1 , d = a })) then ((succ (unit . a)) as ((< e : B , b : Bool >) -> ({ e : B , a : Bool }))) else ((let c = (fix 0) in (iszero 1)) (if (\ c : Bool . unit) then (if c then unit else 1) else ({ a = 2 , a = true }))))
((let e = (succ "boy") in ({ d = a , e = 0 })) (case (fix unit) of < b = c > => ((\ c : A . false) (if 2 then a else b)) | < e = b > => ({ a = 0 , c = (succ 0) })))
(\ a : (({ d : A , a : C }) -> ({ d : ({ d : C , e : Nat }) , c : B })) . (({ b = (< e = unit > as Bool) , d = ((succ 2) false) }) as (Bool -> String)))
(< d = (\ b : (< c : (Unit -> Nat) , a : ({ e : ({ a : Nat , e : Bool }) , a : ({ c : Nat , c : Unit }) }) >) . (let e = true in "apple")) > as ({ c : (< a : ({ b : C , c : B }) , a : ({ b : Bool , e : String }) >) , c : ({ c : B , b : Bool }) }))
(succ (let a = (if true then c else a) in (a c)))
(if (let e = (a b) in (< a = (if a then 1 else true) > as Float)) then ((case 0 of < e = a > => (let c = 2 in false) | < a = a > => "boy") . c) else (fix (succ 2)))
(if (({ a = (0 . e) , e = unit }) . d) then ({ d = (case 2 of < b = c > => a | < d = c > => "boy") , d = ({ d = true , c = (unit a) }) }) else (iszero (iszero 0)))
(case (pred ((succ "apple") as ({ a : C , b : Unit }))) of < c = e > => (let d = (succ (2 "boy")) in (let d = (< c = true > as Unit) in (case "boy" of < a = e > => 1 | < b = d > => a))) | < a = c > => ((case ("apple" . c) of < c = e > => (< d = false > as C) | < d = c > => (fix 1)) . c))
(\ d : (< b : ({ c : (B -> Float) , e : (< e : Nat , a : Nat >) }) , c : ({ c : Float , a : Bool }) >) . ((if a then "apple" else "boy") (pred (iszero 0))))
((< b = (b (\ b : Bool . "apple")) > as ({ c : String , d : String })) as ({ b : (< e : A , d : ({ e : String , c : Unit }) >) , d : (String -> String) }))
(< e = (fix (\ c : Float . (pred true))) > as ({ d : (< c : (Nat -> Unit) , e : String >) , b : (< a : Float , b : B >) }))
(let a = (iszero ((fix c) (pred a))) in (iszero (if (< a = b > as (< a : C , e : Float >)) then (let e = "boy" in 0) else ({ e = (pred 0) , a = (succ "boy") }))))
(let a = (iszero (let b = (succ 2) in 2)) in (iszero ((iszero false) (\ d : String . unit))))
(\ d : ({ c : ({ c : Nat , e : ({ d : C , b : Unit }) }) , c : ({ a : C , c : Float }) }) . (case (if "apple" then false else (a . e)) of < c = c > => (succ (true . a)) | < a = e > => (\ e : (Nat -> String) . (2 c))))
(\ d : (< a : (Nat -> Nat) , e : ({ b : (Nat -> String) , e : (C -> Nat) }) >) . (pred (succ c)))
((iszero (let d = (if "boy" then (\ d : Float . "boy") else 0) in (2 as A))) . b)
(\ a : ({ d : (({ b : B , d : Bool }) -> ({ d : Bool , b : B })) , d : ({ c : C , b : Bool }) }) . (< d = (\ e : Unit . 1) > as ({ d : String , d : (A -> C) })))
(pred (succ (if 2 then (let d = 1 in b) else "apple")))
((pred (< a = (succ 1) > as ({ c : String , b : String }))) as ({ c : (A -> (Unit -> Float)) , e : (< a : Unit , e : ({ e : Unit , e : Float }) >) }))
(case (fix ("apple" . b)) of < a = e > => (pred (if (2 as Float) then b else (true as C))) | < a = b > => (iszero (pred ((false as String) as (< c : Bool , a : A >)))))
(< a = (< d = (iszero false) > as (Bool -> (< b : A , d : Float >))) > as (({ d : Bool , d : String }) -> ({ b : (< a : B , b : Unit >) , a : (String -> B) })))
((pred ((< b = true > as B) as (< b : Float , c : Unit >))) as (({ d : Float , c : Float }) -> (< b : Unit , b : Nat >)))
({ d = (iszero (fix (0 . d))) , c = (iszero (2 . d)) })
(< e = ({ a = ((let a = 1 in false) (iszero 0)) , b = ((\ d : ({ d : Unit , e : Nat }) . (if 0 then 1 else unit)) as ({ e : B , a : C })) }) > as (< d : ({ a : (< d : B , e : C >) , a : (A -> C) }) , d : (C -> String) >))
(< a = (< d = (succ (a as Unit)) > as (Nat -> ({ d : A , a : String }))) > as (({ e : (Float -> B) , b : (< d : Bool , d : String >) }) -> (({ a : C , e : String }) -> ({ e : (< e : Unit , b : B >) , b : B }))))
(if (pred (< d = (let e = 0 in a) > as ((A -> A) -> ({ b : Float , d : String })))) then (pred (< b = "boy" > as Bool)) else (case (case (iszero c) of < a = c > => b | < e = e > => 1) of < a = e > => ({ b = false , a = false }) | < a = a > => (iszero ({ d = "boy" , e = 0 }))))
((if (pred (case (succ 0) of < d = b > => "apple" | < c = e > => (true . b))) then ("boy" as (C -> Bool)) else (let a = false in "apple")) (\ b : ({ b : Unit , b : A }) . (case 0 of < a = c > => c | < b = e > => 1)))
(let b = (pred ((\ c : Unit . unit) as ({ d : Unit , d : Bool }))) in ({ a = (< b = (fix 0) > as A) , b = (a b) }))
((iszero (if "boy" then b else true)) (\ b : ((Bool -> (String -> Nat)) -> (B -> ({ e : B , c : B }))) . ({ d = (case (fix unit) of < e = e > => 2 | < a = d > => 2) , e = (pred (if "apple" then unit else false)) })))
((succ ({ d = (let b = false in unit) , c = a })) (pred (let b = a in (case false of < c = e > => 1 | < b = e > => "boy"))))
(({ e = ((succ (0 as Float)) . b) , e = (\ a : (Bool -> Float) . (\ e : A . b)) }) as ({ c : (< a : (< c : String , e : (B -> Unit) >) , a : ((< b : Bool , e : C >) -> (Unit -> Bool)) >) , a : (< b : ({ a : Unit , a : ({ c : Unit , b : B }) }) , d : (< e : Bool , b : (< b : B , c : Unit >) >) >) }))
(< e = ((let d = b in 1) (if a then (unit . b) else unit)) > as (({ d : Float , c : ({ b : Nat , e : Nat }) }) -> ({ c : (< d : A , a : Bool >) , a : (< e : Unit , c : B >) })))
((let c = ((case 1 of < d = c > => b | < e = d > => a) as String) in ({ e = (if b then true else true) , e = (case "apple" of < e = a > => 2 | < a = b > => a) })) (((< e = (0 as Float) > as ({ d : A , a : String })) (\ a : String . c)) (pred (let e = a in a))))
(let e = (succ ("boy" . a)) in ((true 0) . a))
(iszero (iszero (case (pred c) of < e = b > => "boy" | < a = c > => c)))
(succ ((iszero (b as C)) ({ b = "boy" , e = b })))
(case (({ e = c , a = c }) . a) of < b = e > => ((({ c = false , a = (case b of < b = e > => c | < b = e > => c) }) (\ e : Unit . false)) . e) | < e = b > => (let e = (< a = unit > as (< b : C , a : Nat >)) in (let b = (let b = (iszero c) in (iszero 1)) in (unit false))))
(\ c : ((< d : String , c : B >) -> (< d : A , b : Nat >)) . (case (let b = unit in (\ a : Unit . false)) of < b = b > => (succ (iszero 0)) | < c = b > => (\ e : C . true)))
(< d = (succ (b . e)) > as ({ d : (C -> C) , b : (< a : (Unit -> Bool) , b : (Bool -> Float) >) }))
((fix (pred (succ false))) . e)
(iszero (\ b : ({ e : Unit , c : (< c : Nat , a : String >) }) . ("apple" . c)))
((case ((1 as Float) as ({ e : C , e : C })) of < a = c > => (let b = 2 in 1) | < d = a > => (< b = unit > as C)) . b)
(< d = (case (pred (\ a : Bool . 2)) of < a = b > => (\ a : A . 2) | < c = c > => (succ 0)) > as (< e : ({ c : (< d : B , c : C >) , d : (< a : Nat , e : String >) }) , b : ({ a : ({ b : B , b : B }) , a : ({ b : Float , c : B }) }) >))
((< b = ({ a = (< e = false > as Unit) , e = false }) > as (< a : (Float -> Bool) , a : ({ a : B , b : String }) >)) as (({ d : (Unit -> Bool) , a : ({ d : B , e : Bool }) }) -> (< b : (String -> Unit) , c : (C -> Bool) >)))
((\ d : (Bool -> ({ a : String , a : String })) . ({ a = 0 , d = 2 })) . c)
((case (fix unit) of < b = b > => (\ c : A . (b 1)) | < c = a > => (< c = (iszero true) > as ({ d : ({ a : Unit , d : Nat }) , e : String }))) . b)
(\ d : ((< b : A , c : Nat >) -> (< e : Bool , a : Unit >)) . (iszero (< d = 2 > as ({ e : C , e : A }))))
(succ (succ (fix b)))
(succ ((< e = (iszero c) > as ({ e : C , c : C })) as ((B -> String) -> (< a : C , c : String >))))
(let b = (fix (< c = 1 > as ({ d : Unit , d : C }))) in ((pred (iszero true)) as (< b : B , c : ({ c : Unit , d : Float }) >)))
(fix (((succ true) as (< a : A , e : C >)) (let d = (if c then "apple" else "boy") in (a . e))))
(succ (case ({ c = "boy" , c = (if 0 then unit else b) }) of < c = e > => (succ c) | < d = e > => (fix (1 as Float))))
(< e = ((fix 2) as (Nat -> Nat)) > as ((< d : (A -> (< e : A , e : Bool >)) , c : (Float -> (Unit -> C)) >) -> ({ b : (Unit -> Float) , e : (< a : A , b : Unit >) })))
(pred ({ d = (2 . a) , c = (< b = 0 > as C) }))
((let d = (iszero false) in (pred 1)) . c)
(\ a : ((Unit -> A) -> (Float -> ({ a : A , e : B }))) . (if (true as A) then (let c = unit in 0) else (succ (1 "apple"))))
((pred (if false then 2 else 0)) (pred (iszero c)))
(\ d : (< c : (< a : C , b : C >) , c : (< b : B , c : (< d : C , b : Unit >) >) >) . (iszero (iszero 0)))
(pred (let e = (< e = unit > as String) in (pred a)))
(pred (fix ((c . c) as (B -> Unit))))
(< c = ((iszero (({ d = b , d = c }) . a)) as (< d : (B -> Float) , e : (< c : (< a : B , e : A >) , c : C >) >)) > as ((< a : Float , e : ({ e : Unit , c : Unit }) >) -> (< c : C , a : A >)))
((if (succ 2) then (\ a : (< a : B , e : Bool >) . "apple") else ({ d = "apple" , c = 1 })) (iszero ((let d = false in true) . a)))
(if (case (pred 1) of < a = b > => (iszero true) | < d = a > => ("apple" as B)) then (pred (case b of < c = d > => c | < a = d > => 1)) else ((true as ({ c : Bool , b : C })) ("boy" 2)))
(iszero (let a = (case false of < d = d > => false | < e = a > => 0) in (pred 0)))
(if (({ c = (\ b : ({ b : A , a : B }) . (let e = true in 1)) , d = (b as B) }) (\ a : (String -> Float) . (< c = c > as A))) then ({ b = (({ e = a , a = 1 }) as Nat) , a = (case ({ b = 1 , a = a }) of < c = d > => (if 0 then 1 else 0) | < b = b > => ((c 2) . b)) }) else (let b = (fix (fix a)) in (let e = b in ({ d = b , d = true }))))
((iszero (let a = ({ a = c , e = c }) in (pred 2))) (case (let b = false in c) of < d = e > => (iszero 1) | < c = d > => (\ e : ({ b : A , c : Float }) . (case true of < e = e > => true | < d = b > => 0))))
(case (case (case 2 of < c = c > => "boy" | < c = c > => false) of < d = b > => (succ ({ b = 0 , a = unit })) | < b = e > => (< b = 0 > as String)) of < d = b > => (("apple" "boy") . d) | < a = c > => (((let e = "apple" in "apple") . b) . a))
(case (fix ({ a = (0 . e) , b = (let b = "boy" in false) })) of < d = e > => (let c = (pred c) in (iszero b)) | < b = b > => ((true . a) . b))
({ c = ((("apple" . b) (case 1 of < d = e > => b | < d = d > => 2)) (case (\ d : Unit . false) of < d = c > => 0 | < e = c > => (succ "boy"))) , e = (case (case b of < e = b > => "boy" | < a = b > => false) of < b = d > => (if 1 then c else true) | < e = e > => ("boy" 1)) })
(succ ({ e = (if (1 . c) then (< c = "boy" > as B) else "boy") , c = (case (iszero "apple") of < a = c > => (< a = b > as Float) | < d = a > => c) }))
((succ (iszero (< a = (iszero a) > as ({ d : Float , e : B })))) (iszero (< e = (2 . e) > as Float)))
(succ (let e = (case unit of < c = e > => unit | < a = d > => "boy") in (1 as Unit)))
(let b = ((1 false) as ({ e : C , a : C })) in ((pred b) . b))
(case (\ e : (({ a : Unit , b : Nat }) -> ({ b : B , c : C })) . (pred (succ unit))) of < d = a > => (case (c (case unit of < e = e > => c | < c = e > => c)) of < a = a > => (succ b) | < d = d > => (iszero 1)) | < a = e > => (< b = (fix a) > as (< e : (< a : Nat , c : String >) , c : (Nat -> Nat) >)))
((\ a : (< c : (C -> Unit) , a : String >) . (< d = ((true . c) as Bool) > as (< e : C , d : Nat >))) . a)
(case (< d = (iszero c) > as (< b : (< c : Float , d : Unit >) , b : ({ b : Float , a : (< e : Bool , c : Bool >) }) >)) of < a = d > => (pred (\ a : ({ e : Unit , a : Unit }) . (case c of < e = d > => a | < a = d > => "boy"))) | < b = c > => (case (case (if "apple" then unit else 0) of < c = a > => (< a = false > as A) | < c = c > => (case 2 of < b = b > => true | < e = d > => b)) of < e = b > => ({ a = c , a = (succ c) }) | < b = c > => (fix b)))
(iszero (let a = (fix b) in ({ a = (if true then a else 1) , b = true })))
(succ (pred ((\ d : C . unit) . b)))
((< d = (pred ({ b = c , d = false })) > as ({ a : C , d : Nat })) (case (succ true) of < b = c > => (let e = 2 in 0) | < a = a > => (< b = b > as Bool)))
(< e = (fix (pred "apple")) > as (< b : (A -> Unit) , c : (< e : String , d : C >) >))
((({ b = (succ unit) , b = (case b of < c = d > => a | < c = b > => c) }) (pred (let e = unit in c))) . c)
(iszero (fix (< b = (if 0 then true else c) > as ({ b : String , c : String }))))
({ e = (fix (true c)) , a = (iszero (iszero "apple")) })
(((< d = 2 > as B) as ((< e : Unit , b : Float >) -> (A -> C))) (case (iszero ({ c = (b 1) , d = (succ 1) })) of < e = c > => (fix ((fix true) (succ 0))) | < c = c > => (succ 1)))
(let b = (succ (succ unit)) in ((fix false) as ({ e : ({ e : Float , b : Unit }) , e : (B -> Float) })))
(iszero ((if ({ d = false , a = true }) then (pred true) else (succ false)) as ({ e : (< a : Bool , d : Float >) , a : (< e : Float , c : Bool >) })))
(case (pred (let c = (pred (pred 0)) in (case (fix true) of < b = b > => c | < c = e > => ("boy" as Unit)))) of < b = e > => (< d = (b "apple") > as (Float -> Unit)) | < e = a > => (if (< d = 1 > as (< b : Nat , a : String >)) then (succ (let b = c in b)) else (succ (unit as Bool))))
(({ b = ((2 as String) as (C -> A)) , e = ((fix unit) unit) }) . a)
(< a = (pred ({ a = (pred "boy") , a = (if true then true else "boy") })) > as ({ b : ((Nat -> Float) -> Float) , e : ({ a : ({ c : Unit , d : Nat }) , c : (< c : Nat , c : Bool >) }) }))
(pred (< b = (\ e : ({ c : Bool , d : Unit }) . "apple") > as (A -> (< e : B , a : String >))))
(succ (({ c = ((iszero 1) as Unit) , d = (\ e : (< b : C , a : Bool >) . (if c then false else c)) }) (let d = (pred 2) in (< e = "boy" > as ({ b : Float , e : C })))))
((< e = (iszero ((case b of < e = e > => unit | < e = d > => 0) ("boy" as A))) > as ((C -> C) -> Unit)) ((0 c) (succ (fix unit))))
(fix ((let b = 0 in ({ e = 0 , b = a })) (let b = (case unit of < b = e > => 0 | < e = d > => "apple") in (c . e))))
(({ a = (2 b) , a = (c . d) }) as (({ d : C , d : C }) -> (Float -> B)))
({ c = (fix (let d = (1 . a) in (< b = (1 as Float) > as A))) , a = (let c = (if a then (pred c) else (case false of < b = b > => true | < b = d > => 1)) in (iszero false)) })
(case (iszero (pred (unit . c))) of < d = c > => (succ (< d = (0 c) > as ({ a : (< e : C , d : B >) , e : (< d : String , e : Float >) }))) | < a = a > => ((if (< e = "boy" > as Nat) then (1 . b) else unit) . d))
(< e = (let d = (iszero (let a = 2 in "apple")) in (if (case 0 of < a = e > => (true b) | < c = b > => (1 . d)) then (\ c : (Nat -> Unit) . "apple") else ({ b = true , a = c }))) > as (< a : ({ d : String , d : Float }) , b : ({ a : Nat , b : A }) >))
(let b = ((succ 1) . a) in (succ (case (let d = (fix true) in a) of < d = d > => (fix (iszero false)) | < d = b > => ((iszero true) . b))))
(\ a : ({ b : (Float -> Unit) , a : (< d : A , c : Float >) }) . (fix (fix (pred false))))
(((case true of < c = d > => false | < e = b > => false) (let d = ("apple" as Unit) in (pred "apple"))) (\ c : (< e : A , c : Unit >) . (case c of < b = b > => 2 | < b = b > => c)))
(\ c : (({ e : (< a : C , d : Unit >) , e : ({ d : B , a : B }) }) -> (String -> A)) . ((\ a : Nat . true) . b))
(< b = ((< d = b > as ({ c : String , d : B })) as (({ b : C , e : String }) -> Unit)) > as ((< d : String , d : B >) -> ((C -> B) -> ({ e : Unit , b : B }))))
(((let d = 2 in c) as ({ c : B , e : C })) . b)
(let a = ((if "apple" then (pred true) else unit) . c) in (< a = (c . e) > as ({ d : ({ e : A , b : Nat }) , c : ((< d : B , d : String >) -> C) })))
({ c = ((if "boy" then 0 else "boy") (b as A)) , d = ((iszero b) (\ b : (< e : Float , d : B >) . unit)) })
((succ (succ 0)) as ({ c : (< b : Nat , b : C >) , b : ({ e : Bool , d : B }) }))
(succ (< a = (let e = (false . e) in (fix "apple")) > as (< a : ({ c : B , c : Bool }) , d : B >)))
((fix (fix (a as Float))) ({ e = (true b) , e = (succ c) }))
((let b = ("boy" "boy") in (if (fix c) then "apple" else c)) as (< e : (({ b : (A -> Bool) , a : Nat }) -> (< a : (B -> Bool) , a : (String -> A) >)) , d : (Unit -> A) >))
(iszero (\ a : ({ c : (Float -> Unit) , e : (String -> Float) }) . (succ unit)))
(case (let e = (let a = "boy" in (c . b)) in (iszero ("apple" . c))) of < c = c > => (pred (succ a)) | < a = c > => (succ (iszero (if b then 2 else 0))))
(iszero (if (let d = false in "boy") then (case 0 of < e = b > => (1 as Unit) | < e = d > => (\ d : A . 2)) else (case c of < b = c > => (case false of < b = d > => 2 | < a = c > => "apple") | < c = a > => false)))
(case (succ ((if 1 then "boy" else b) as Nat)) of < c = d > => (iszero ("boy" false)) | < c = a > => (case (iszero unit) of < d = e > => (case (iszero false) of < e = e > => (\ d : A . b) | < a = e > => (fix "apple")) | < a = b > => (\ c : Float . c)))
(succ (((iszero (1 1)) . c) . a))
(fix (succ ((if false then 0 else true) (case a of < d = d > => b | < c = c > => b))))
(pred (pred (fix ("boy" as Float))))
(((< b = (fix a) > as (< b : A , c : Nat >)) . a) as (< b : ({ a : Nat , c : (< d : Unit , a : Nat >) }) , a : (< e : A , e : Nat >) >))
(iszero ({ a = ({ a = (iszero "boy") , e = ({ b = "apple" , c = a }) }) , a = ((< a = "apple" > as Nat) as (< c : C , e : C >)) }))
(< d = (if (if ({ e = "boy" , b = c }) then (let e = 0 in unit) else (< c = unit > as Unit)) then (case true of < d = b > => b | < e = c > => a) else (succ unit)) > as (({ a : ({ b : A , d : Nat }) , d : ({ c : A , e : Unit }) }) -> ({ a : (String -> Float) , b : (< a : C , a : Unit >) })))
(succ ((\ a : (Float -> String) . (if false then ({ b = "apple" , b = unit }) else true)) as (< c : (< e : A , a : Bool >) , c : Bool >)))
(< b = (iszero (fix (fix "boy"))) > as ((< a : Nat , c : Nat >) -> (< b : Float , e : Unit >)))
(iszero (succ (if (succ (\ c : A . c)) then (pred (succ "apple")) else (iszero false))))
((((if 1 then b else false) . a) as ({ d : ({ d : Unit , c : B }) , e : (< a : Float , e : String >) })) . e)
(fix ((c . d) (true as C)))
(succ (pred (if (iszero b) then ((2 true) (c 0)) else ({ d = b , a = (iszero a) }))))
(iszero (\ b : ({ c : String , b : (B -> C) }) . (iszero a)))
(succ (\ e : ((< c : A , d : Unit >) -> ((< b : Float , d : A >) -> B)) . (let a = (case false of < a = c > => "boy" | < e = e > => 0) in ({ a = "boy" , e = 0 }))))
(< e = (case (if ((iszero b) as A) then ({ b = (0 as String) , d = (unit . e) }) else ({ b = 2 , d = 0 })) of < d = a > => (2 . a) | < d = e > => (\ d : (< e : B , e : String >) . true)) > as (((Nat -> Nat) -> Nat) -> (< d : Unit , c : Nat >)))
(if (succ (case "boy" of < e = a > => false | < d = c > => (c . d))) then (succ (false "apple")) else (if ((0 . c) . a) then (\ d : (String -> A) . (iszero 0)) else (succ unit)))
(\ b : (((< d : Bool , e : ({ c : Nat , b : Float }) >) -> ((< b : Unit , d : B >) -> A)) -> ({ c : A , e : (< c : Nat , b : Unit >) })) . (pred ("apple" as Unit)))
(case ({ d = ({ a = (unit unit) , a = (c as B) }) , e = (iszero 0) }) of < a = e > => (pred (\ e : ({ a : Bool , c : Bool }) . (succ unit))) | < b = b > => (case (unit . d) of < a = b > => (b "apple") | < a = a > => (c . a)))
(succ (\ c : (< e : (({ c : A , e : B }) -> (< b : Bool , d : Float >)) , e : (({ a : Bool , a : C }) -> (Float -> String)) >) . (pred (pred false))))
(pred ((pred "boy") . e))
(if (fix (fix "apple")) then (iszero (pred true)) else (succ (succ 1)))
(case ({ b = (pred c) , e = (let e = (\ d : String . "apple") in b) }) of < e = d > => ((succ unit) . c) | < b = a > => (({ a = (\ d : Nat . b) , c = true }) . a))
(\ c : (< c : ({ c : Nat , b : A }) , c : ({ a : A , c : String }) >) . (fix ({ b = false , a = "boy" })))
({ d = (let e = (fix ({ d = false , c = true })) in ((let d = a in 1) ("boy" . e))) , d = (fix (let b = b in (let b = "boy" in false))) })
({ c = ((let b = (succ "apple") in ({ a = a , c = "boy" })) (succ (if (fix 0) then ({ e = 0 , e = 2 }) else "apple"))) , c = ((\ a : ({ b : Bool , b : Bool }) . (2 as C)) (\ c : (Bool -> (String -> Bool)) . (if (2 as Bool) then ("apple" false) else "apple"))) })
(succ (pred (iszero false)))
(iszero ((\ d : Float . a) . c))
({ c = (iszero (\ e : Unit . "apple")) , a = (fix ({ c = "boy" , d = ({ b = 2 , d = 2 }) })) })
((case ((succ unit) . c) of < c = b > => (\ c : ((< e : Float , c : Bool >) -> (< e : Nat , e : B >)) . (fix (case 2 of < e = d > => c | < c = d > => c))) | < e = a > => (let e = (\ c : Nat . b) in (< a = 0 > as Unit))) . b)
(iszero ((< c = 0 > as Float) as (Float -> C)))
(\ a : (< b : (< d : (< d : Bool , d : (A -> String) >) , c : (< a : ({ a : C , a : C }) , c : ({ b : A , d : Float }) >) >) , a : (({ e : Float , a : B }) -> B) >) . (< a = ({ c = false , d = unit }) > as (< d : Float , c : Unit >)))
((case (case (< a = "apple" > as Bool) of < c = c > => (succ "apple") | < e = a > => (iszero "apple")) of < d = c > => (true as String) | < e = d > => ((\ b : C . unit) . e)) . d)
(pred ({ c = (if (pred a) then (fix b) else (pred (pred 0))) , d = (< b = 2 > as Nat) }))
(succ (pred (pred "apple")))
(succ (((let b = "boy" in false) (0 . c)) (case (iszero "boy") of < d = d > => (fix c) | < a = b > => (succ true))))
((succ (fix b)) . a)
(fix ((iszero (succ c)) (if ({ d = a , a = "apple" }) then (c "boy") else (succ "apple"))))
((case ("boy" ({ c = unit , c = "apple" })) of < e = b > => (if true then b else false) | < b = d > => (fix true)) as (({ b : (B -> String) , a : ({ c : Bool , b : String }) }) -> ({ e : ({ a : Bool , d : Float }) , d : (({ b : B , d : String }) -> ({ e : B , c : Bool })) })))
(\ b : (({ b : Float , a : (< a : String , d : Float >) }) -> (< b : B , a : Bool >)) . (pred (true 0)))
(case (pred (if (c false) then (let e = 2 in b) else (case 2 of < c = d > => 2 | < a = b > => a))) of < e = c > => ((< c = false > as C) as (< c : C , e : B >)) | < a = a > => (iszero ({ b = c , b = 1 })))
(< a = (< a = (iszero ("apple" . e)) > as ({ d : ({ c : B , d : C }) , a : (Float -> Float) })) > as ((B -> (C -> C)) -> (< c : (< d : C , d : Nat >) , d : (Unit -> B) >)))
(if (\ c : (Unit -> (A -> Nat)) . ({ d = unit , c = 2 })) then (succ ((fix "boy") ("apple" (fix "boy")))) else (let a = (c 0) in (if (let e = 2 in c) then ({ d = true , d = true }) else ("boy" . a))))
((\ e : (< b : (< d : A , a : Nat >) , d : ({ a : C , c : A }) >) . ({ d = b , b = (\ e : String . true) })) as (< b : (< a : ({ a : B , d : Float }) , c : ({ c : Float , c : Unit }) >) , d : (< b : (< c : Nat , c : (< c : Nat , e : String >) >) , a : (< d : Nat , c : C >) >) >))
(({ b = (succ (false as Nat)) , b = ("boy" . b) }) as ({ c : ({ d : ({ d : Float , b : C }) , d : (< b : Nat , a : Nat >) }) , b : (String -> Bool) }))
(iszero (case (fix "boy") of < c = d > => (iszero unit) | < d = d > => ((fix a) . a)))
(let b = (case (fix ("apple" . d)) of < e = e > => (iszero (succ true)) | < c = a > => (< b = 1 > as Float)) in ({ a = ((\ a : Float . false) unit) , a = (let d = (< d = true > as Unit) in true) }))
(fix (iszero (2 b)))
(case (case (succ false) of < d = e > => (succ false) | < c = b > => (pred (let e = 0 in "boy"))) of < a = a > => (((unit . b) . e) (iszero (< e = c > as B))) | < e = b > => (if (if (< d = (< e = "boy" > as A) > as Float) then (fix "apple") else (unit . d)) then (succ (\ b : C . 1)) else (case ((1 as Bool) as (< c : Unit , c : Unit >)) of < b = a > => (if "apple" then false else c) | < e = b > => (if unit then false else 2))))
(< e = (({ b = (fix c) , a = (2 as Unit) }) as (< c : (< b : (C -> C) , c : String >) , a : (< e : Float , d : C >) >)) > as (< b : (< d : (Unit -> Nat) , e : (String -> Float) >) , c : ((< e : B , a : C >) -> (< c : C , c : String >)) >))
((succ (< b = (pred (iszero unit)) > as ({ c : Float , a : Unit }))) . d)
(pred (if (\ d : (C -> String) . (2 unit)) then (\ c : (< e : Unit , c : Nat >) . (if (case a of < a = a > => unit | < e = c > => a) then 2 else (fix 1))) else (\ c : (< a : Nat , b : C >) . (false . d))))
(let a = ((iszero (2 . b)) (let e = (a (succ 1)) in (if 2 then false else "apple"))) in (let d = (pred true) in (let b = unit in false)))
(succ (\ a : (< c : A , b : Nat >) . (if true then (succ "apple") else false)))
((case (pred true) of < a = d > => ((case true of < d = e > => c | < d = b > => c) 2) | < d = e > => (a . b)) as (< a : ({ c : Nat , c : String }) , d : (Bool -> Unit) >))
(fix ({ b = (if (unit . a) then (if 1 then true else "apple") else (if false then c else true)) , d = ({ b = (if "boy" then 1 else true) , c = a }) }))
({ c = (if (< b = (fix true) > as (< e : A , e : Float >)) then (fix (if b then unit else (pred 2))) else ((pred unit) 0)) , d = (< a = (({ a = 1 , d = 1 }) as C) > as (Float -> Float)) })
(iszero (iszero (iszero (succ c))))
(succ (case (if (if true then unit else true) then ((0 as Nat) as (Bool -> Unit)) else (if true then "boy" else false)) of < b = b > => (iszero ({ e = 2 , a = 1 })) | < e = b > => (< b = b > as Nat)))
(iszero (pred (("boy" . c) as ({ e : C , d : Bool }))))
({ c = (let d = (let c = (if true then c else unit) in (< e = 1 > as Nat)) in (succ (unit 0))) , d = (if (("apple" as Bool) "apple") then (\ a : ({ b : Unit , c : Bool }) . (pred "apple")) else (({ e = a , d = 0 }) (succ true))) })
(let d = (let a = (succ (succ true)) in ({ b = (c as String) , e = (iszero "apple") })) in ({ b = (if (let a = c in c) then (pred c) else (\ d : C . unit)) , d = (case (if 0 then c else "apple") of < a = d > => (iszero "boy") | < b = e > => (pred "boy")) }))
(\ c : (< e : (String -> A) , d : (< a : Float , c : Float >) >) . (if (a 1) then ({ e = (< e = 2 > as A) , a = (2 . c) }) else (if "apple" then (let d = "boy" in 0) else (succ 1))))
({ b = (\ e : (< b : (B -> A) , e : Nat >) . ((iszero unit) as A)) , e = (if (let e = false in "apple") then (true false) else (iszero (succ "boy"))) })
((if (true . c) then (\ c : ({ d : A , d : Bool }) . "boy") else ("boy" b)) (iszero (succ false)))
((< e = (iszero (< b = "boy" > as B)) > as ((B -> B) -> ({ b : ({ e : C , c : Nat }) , a : (Unit -> A) }))) . e)
(iszero (\ e : ({ a : B , a : B }) . (iszero "apple")))
(((if (pred false) then ({ e = (let c = false in false) , d = (unit unit) }) else (< b = (false . a) > as Unit)) . d) (pred (pred (case a of < a = d > => 1 | < e = b > => ({ e = 1 , d = 0 })))))
(\ a : ({ c : ((Float -> String) -> Float) , c : (< a : (Unit -> ({ e : Float , a : C })) , b : (< c : Nat , e : String >) >) }) . (fix (case (iszero (succ true)) of < c = b > => (\ c : (< b : String , a : String >) . 2) | < c = d > => (< a = c > as A))))
({ b = (((if unit then b else 1) . a) as (({ a : Float , a : Float }) -> Unit)) , e = (fix (iszero (case "boy" of < b = d > => b | < d = c > => false))) })
(< a = (let a = (succ "boy") in ({ e = false , a = (2 as Float) })) > as (({ c : Nat , a : ({ a : Nat , b : Unit }) }) -> ({ a : B , c : Float })))
((fix (case ((succ "boy") as (< b : B , b : B >)) of < a = c > => (succ unit) | < b = b > => (pred "boy"))) as (< c : (< b : ({ a : Bool , d : C }) , c : (< d : String , b : Float >) >) , e : ((< a : (< c : Float , a : A >) , a : A >) -> ({ c : (< d : B , d : Float >) , d : (Unit -> A) })) >))
(case (< e = (fix (iszero c)) > as (< e : Bool , a : B >)) of < b = e > => (case (false as C) of < e = a > => (b c) | < b = b > => (< a = b > as Nat)) | < b = b > => (\ b : ({ b : ({ c : Float , b : A }) , a : (< b : A , c : Unit >) }) . ((0 . a) . d)))
(iszero (let c = ({ d = ("boy" as B) , d = "apple" }) in (< e = "boy" > as Unit)))
(< c = (let b = (1 1) in (\ e : ({ c : Unit , b : Nat }) . (let e = a in b))) > as (({ a : C , b : Nat }) -> (< a : (< d : C , c : C >) , b : (Float -> Float) >)))
({ d = (("apple" . b) (if c then unit else false)) , d = (succ (case false of < c = a > => 1 | < c = b > => a)) })
(let c = (let a = (if 1 then (< a = 1 > as Bool) else a) in ((let d = "apple" in "apple") . a)) in ((case ({ d = "boy" , a = "boy" }) of < a = c > => (pred (\ b : C . a)) | < b = d > => (pred (succ "boy"))) as ({ b : (< d : A , c : B >) , a : A })))
(succ ((succ c) (< d = 1 > as Unit)))
(\ c : (({ a : (< a : Bool , a : Nat >) , b : Nat }) -> (((B -> C) -> C) -> ({ c : A , b : A }))) . (((iszero a) as (A -> A)) (let b = (fix false) in 1)))
(((iszero (iszero "boy")) . b) ((< c = (2 . b) > as ({ a : String , a : Bool })) . c))
(case ((succ a) . d) of < d = d > => (let e = (iszero (succ false)) in (case 0 of < e = a > => unit | < c = d > => false)) | < c = e > => (\ c : ({ d : ({ a : String , a : ({ a : Nat , a : A }) }) , b : (< e : String , e : Unit >) }) . (iszero true)))
(iszero (iszero (iszero ({ e = 0 , b = "apple" }))))
(if (let c = (2 1) in ({ c = (unit . d) , b = (\ a : String . a) })) then (let c = (succ true) in ({ b = (succ 2) , b = (pred 2) })) else (if (iszero (iszero (fix c))) then ({ e = (succ 0) , b = c }) else (case (< e = true > as C) of < e = c > => (iszero (if a then true else false)) | < d = e > => (< b = (case "apple" of < a = a > => c | < a = e > => 0) > as A))))
({ c = (iszero (\ e : ({ d : Unit , c : Float }) . a)) , e = (case ({ c = (pred true) , c = (case true of < d = a > => a | < d = a > => 1) }) of < e = d > => (< d = true > as (< a : Unit , b : Unit >)) | < b = b > => (0 . d)) })
(if (fix (case b of < e = a > => (true . d) | < c = e > => 2)) then (let d = (pred (false c)) in ((b 0) as ({ b : B , a : A }))) else (iszero (pred 2)))
(if (fix (let b = unit in "boy")) then (< b = (case ({ c = 1 , a = "boy" }) of < c = e > => a | < d = e > => (false 0)) > as (A -> String)) else (pred (fix (\ b : A . 0))))
(case (case ((case c of < a = a > => 1 | < c = d > => unit) as ({ c : String , c : Nat })) of < a = e > => (fix 2) | < c = e > => (\ e : A . "boy")) of < e = b > => (((c as Bool) (fix a)) . d) | < b = a > => (< a = (let b = 2 in 2) > as (A -> (Bool -> B))))
(iszero (\ a : ({ e : (< b : B , b : Bool >) , d : (< e : (A -> A) , d : (< c : String , d : Bool >) >) }) . (false c)))
(iszero (let a = ({ e = unit , c = (1 c) }) in ((pred 0) as ({ b : A , a : B }))))
((succ (if 2 then false else a)) (if (succ (succ a)) then (0 false) else (let e = 1 in (< b = 2 > as Float))))
(pred (let d = (if 0 then b else 1) in ({ d = (if b then a else 2) , a = (fix a) })))
(succ (if (pred c) then (case (if (succ unit) then a else (< d = true > as A)) of < e = b > => (pred (succ "boy")) | < c = a > => (fix 1)) else (< c = (let e = b in 0) > as (< d : Unit , e : Float >))))
(if (< e = (succ 1) > as ((< b : String , c : Bool >) -> Unit)) then (succ ({ b = (case unit of < d = d > => c | < a = d > => b) , d = (\ d : ({ d : Float , a : Float }) . c) })) else (let b = (fix a) in (\ d : (< a : Unit , d : B >) . c)))
(let d = ((c . e) (fix 0)) in ((iszero (\ a : C . unit)) as (< b : Float , b : C >)))
(case (if (succ 1) then (< d = (fix b) > as Nat) else ({ d = a , a = unit })) of < b = a > => (let c = (pred 0) in (0 (\ a : Bool . c))) | < a = e > => (case (pred (< e = a > as String)) of < b = b > => (iszero 2) | < e = a > => (case unit of < e = b > => (\ b : C . true) | < a = c > => (< b = unit > as Float))))
(pred (pred (succ (if unit then false else c))))
(pred ((pred b) as (< c : Float , a : (< e : B , c : Float >) >)))
({ e = (succ (< d = 0 > as C)) , a = (\ a : ({ e : Float , a : B }) . (iszero (case (\ d : Float . 1) of < e = b > => 2 | < b = a > => (iszero 0)))) })
(\ a : ((< b : Unit , c : (< d : Float , c : Unit >) >) -> (< a : (C -> Unit) , a : Nat >)) . (< d = ((\ c : Bool . false) as Float) > as ({ a : B , a : A })))
(let d = (case (< a = (pred true) > as (< e : Unit , a : String >)) of < e = c > => (case (case false of < e = d > => b | < d = b > => a) of < b = b > => b | < e = a > => (a . e)) | < b = b > => (if 0 then a else a)) in ((\ a : (A -> String) . (\ b : Nat . 0)) as (({ b : Nat , c : String }) -> (< d : Unit , e : Float >))))
({ e = ((if true then (< a = unit > as Bool) else (\ c : Bool . 1)) . a) , e = ((let c = (\ b : Bool . 0) in (true . d)) as ({ e : (< e : B , a : String >) , c : (Unit -> C) })) })
({ d = (iszero ({ c = a , b = c })) , c = (< d = (succ 1) > as ({ a : Nat , c : C })) })
(iszero (let d = (if (let a = 1 in 0) then (iszero unit) else (pred a)) in (fix 2)))
({ b = ((let b = unit in c) . b) , e = (pred (\ e : (< e : Bool , a : Bool >) . ("boy" as Float))) })
(< b = (pred (if c then a else false)) > as (({ a : ({ d : Float , b : Unit }) , a : A }) -> ({ a : Bool , d : (String -> Nat) })))
(< e = (pred (if 2 then (\ b : C . a) else b)) > as ((< c : ({ c : Nat , a : String }) , d : Nat >) -> (Bool -> A)))
(pred (< e = (< a = unit > as A) > as (A -> Bool)))
(fix (\ e : ((B -> Float) -> ({ d : C , c : A })) . (if (if (pred true) then c else (pred 1)) then (\ e : C . b) else (pred true))))
(let a = ((fix c) as (< c : C , b : Float >)) in (< c = (fix (succ 2)) > as ((A -> Nat) -> ({ a : Unit , e : Bool }))))
({ a = (iszero (case (succ true) of < a = e > => c | < b = b > => false)) , c = (((\ b : C . b) . a) . b) })
(\ d : (< a : ((< c : Bool , b : Nat >) -> ({ d : A , c : String })) , e : (String -> C) >) . (succ (iszero (false . a))))
(if (if (succ (case b of < d = d > => (if 0 then 0 else c) | < a = b > => "apple")) then (case ({ c = 1 , c = b }) of < b = b > => "boy" | < a = b > => (case c of < c = c > => 1 | < e = d > => b)) else ((fix 0) as Float)) then (succ ((fix (true . c)) as (< d : Nat , d : String >))) else (((if ({ c = false , c = 0 }) then c else (< b = b > as Unit)) . e) . b))
({ b = (pred ((\ e : Unit . "boy") as (A -> Unit))) , a = ((let c = (true . e) in false) (1 true)) })
(let e = (succ ("boy" . a)) in (\ a : ({ d : ((Float -> A) -> ({ b : B , b : Float })) , d : (< c : (C -> String) , d : (< c : Unit , b : Unit >) >) }) . ({ e = (let c = b in b) , d = ({ a = b , c = "boy" }) })))
(if ({ d = (0 as Float) , d = (let c = 2 in false) }) then (fix (succ a)) else (iszero (iszero b)))
(< e = (\ c : (< b : Bool , d : C >) . (succ b)) > as (((String -> Nat) -> Unit) -> ({ d : String , b : String })))
(if (succ ((\ e : A . b) as Unit)) then (\ a : ({ a : String , a : Unit }) . (< b = 2 > as A)) else (iszero (0 as C)))
(pred (fix (< b = (if "apple" then "apple" else unit) > as C)))
(case ((case (a 1) of < d = b > => (case (< a = unit > as A) of < e = e > => (unit . b) | < e = d > => true) | < c = e > => (\ c : C . unit)) . b) of < d = d > => (< e = (case (succ 2) of < e = c > => (succ (pred true)) | < e = b > => (iszero unit)) > as ({ e : ({ b : Float , c : Unit }) , e : ({ c : A , c : A }) })) | < e = e > => (fix ((case a of < c = c > => "apple" | < a = e > => false) . b)))
((< e = (if 2 then (succ a) else "apple") > as ({ d : ({ a : B , c : Bool }) , a : (< b : Float , a : (< e : Nat , d : A >) >) })) . d)
(if (< e = (({ d = true , e = unit }) . a) > as ({ a : C , c : String })) then (pred (if (2 as B) then true else (case c of < d = e > => unit | < b = e > => 1))) else ((({ a = b , c = true }) as (Nat -> Float)) ((iszero true) as ({ c : String , d : Unit }))))
(let e = (fix (if ({ d = a , c = true }) then "boy" else a)) in (case (case (if 2 then "apple" else c) of < e = c > => (iszero 2) | < d = e > => ({ d = 0 , c = true })) of < c = d > => ((if c then b else false) as (< c : Bool , a : A >)) | < b = a > => (case (a b) of < a = e > => true | < b = a > => (iszero "apple"))))
(fix (iszero (let d = true in c)))
(\ a : (< d : (< c : ({ c : Nat , d : A }) , a : (< e : C , a : B >) >) , b : ((C -> Bool) -> Float) >) . ((if 0 then c else "boy") as (Unit -> A)))
(< b = ((iszero (let c = a in 2)) (c a)) > as (({ e : ({ b : Unit , d : String }) , c : (C -> Bool) }) -> ({ e : (< e : Bool , e : Bool >) , c : ({ a : C , c : B }) })))
(fix (\ e : (< d : (< d : Bool , e : C >) , a : (< c : Bool , c : Float >) >) . (pred false)))
(fix ((pred false) ((case unit of < a = e > => a | < a = a > => "apple") 1)))
((iszero (\ c : (< c : (Float -> Unit) , e : B >) . (if "boy" then unit else b))) . b)
(let a = ((< b = (pred 1) > as Float) ({ c = b , d = "boy" })) in ((< a = unit > as Nat) . b))
((\ c : (< b : (Float -> A) , d : (A -> Nat) >) . (2 . e)) (pred (true as ({ e : A , a : Unit }))))
({ c = ((succ (let e = 1 in b)) as ({ d : C , a : B })) , b = (succ (let c = unit in "boy")) })
(iszero (fix (let e = 1 in true)))
(fix (pred (succ true)))
(succ (< c = (if (pred 1) then (case false of < c = d > => (\ a : B . c) | < d = a > => 0) else ({ e = 2 , a = a })) > as (< a : (A -> Nat) , a : ({ e : A , c : C }) >)))
(iszero (({ c = false , b = (iszero 1) }) . c))
(succ ({ b = (succ (\ c : Bool . b)) , c = (succ (\ d : ({ c : B , a : Unit }) . (pred 0))) }))
(\ a : ((Float -> Unit) -> ({ b : (< a : C , c : (< d : String , d : Unit >) >) , d : ({ a : Bool , b : C }) })) . (< b = (fix "apple") > as (< b : A , d : B >)))
((< e = ({ d = false , d = a }) > as (String -> Unit)) (pred (case "boy" of < a = a > => 1 | < e = c > => unit)))
((let e = ((case b of < a = e > => b | < c = b > => (pred 2)) as (String -> ({ c : Nat , d : String }))) in ((iszero 0) . e)) . c)
(iszero (iszero (1 c)))
((pred (case (if a then b else a) of < a = b > => (\ b : Bool . 0) | < e = e > => (\ a : Bool . 1))) ((fix (true true)) . a))
({ e = (fix (case (case "apple" of < c = a > => "apple" | < c = e > => 2) of < c = b > => "boy" | < e = c > => "apple")) , c = (succ (fix ({ e = ("apple" . b) , e = 0 }))) })
(iszero (pred (< e = 1 > as (< d : Nat , a : A >))))
(({ c = ({ a = (b . d) , b = (pred (0 2)) }) , c = ((c . d) (unit as Float)) }) as (< a : ({ e : ({ b : B , e : (< d : Nat , e : Float >) }) , e : (String -> Unit) }) , b : (< b : ({ d : Bool , b : B }) , c : ((< c : A , d : Bool >) -> String) >) >))
(succ (iszero (iszero (if a then b else c))))
({ d = ({ b = ((c . e) as ({ b : Float , b : Float })) , d = ({ e = (if "apple" then "boy" else unit) , a = (true 2) }) }) , d = ({ d = (iszero true) , e = (let e = 2 in true) }) })
(({ c = (pred 2) , a = (let b = (fix true) in ({ a = false , c = "boy" })) }) as ({ c : (C -> ({ b : Bool , a : Unit })) , c : ((String -> B) -> ({ a : String , b : Unit })) }))
(if (case (iszero 0) of < a = b > => (let e = 1 in a) | < a = b > => (a (\ e : A . a))) then (< c = (pred (case c of < d = d > => a | < c = a > => true)) > as ((< c : C , d : B >) -> ({ a : (< d : Float , d : C >) , a : String }))) else (let a = (\ b : A . false) in (pred (2 . c))))
(((iszero (\ b : (< b : C , a : String >) . (let e = true in true))) as (< a : String , e : (< b : Nat , b : C >) >)) . d)
(if (< e = (let d = b in 1) > as (< c : (< e : C , d : (< d : String , b : String >) >) , e : (String -> Unit) >)) then (< d = (succ ({ b = "boy" , e = (succ false) })) > as (< a : B , a : (< c : Float , e : Nat >) >)) else ((pred 0) . e))
(case (\ a : (A -> Unit) . (pred 1)) of < b = a > => (if (let e = 0 in "boy") then (let c = unit in (let d = b in 2)) else (iszero unit)) | < c = b > => (< b = (if (if b then "apple" else c) then (1 as String) else true) > as ({ c : Unit , a : Unit })))
(succ (\ d : (Unit -> String) . (pred 1)))
(if ((({ a = unit , a = false }) . c) . e) then (\ e : (C -> ({ c : Nat , c : Float })) . ((false c) . d)) else ((case (c . d) of < e = e > => (iszero b) | < e = b > => (let b = 1 in false)) (case (succ "apple") of < e = a > => true | < a = d > => (2 as B))))
(succ (if (\ b : Unit . 1) then (\ e : String . a) else ({ e = unit , c = (1 . e) })))
(let e = ((\ e : C . (2 . a)) . c) in ((if a then a else b) (if a then 1 else 0)))
(pred (\ e : (< b : Unit , d : ({ a : A , b : Nat }) >) . (< c = 2 > as C)))
(\ b : ({ a : (({ a : Bool , a : Float }) -> ({ d : Nat , d : Bool })) , b : (< b : (< c : Bool , b : C >) , e : ({ d : Bool , a : Bool }) >) }) . (iszero (succ (fix 0))))
(iszero (fix (let d = (let b = 1 in "apple") in ({ d = a , a = unit }))))
(case (< e = (iszero true) > as (< e : (< d : Float , e : Unit >) , d : String >)) of < c = e > => (\ e : ({ e : (B -> (< e : Float , e : Float >)) , d : ({ c : Nat , e : Bool }) }) . (succ (1 (fix a)))) | < c = c > => (pred (if false then true else 2)))
((fix (case (a . c) of < c = e > => (succ b) | < d = c > => (succ a))) as ((< b : String , d : Unit >) -> ({ c : Unit , b : Bool })))
(pred (succ ({ a = ({ b = 2 , b = 0 }) , a = "boy" })))
((iszero (fix 0)) . a)
({ d = (if (< d = (let c = false in "boy") > as (< e : Float , d : C >)) then ((\ e : Unit . c) as ({ e : Bool , b : Nat })) else (iszero (< b = false > as Unit))) , e = (pred (\ b : A . c)) })
(< b = ((succ unit) . b) > as (< a : (< c : String , c : (< c : String , e : Unit >) >) , a : ({ d : String , e : (< e : Float , c : C >) }) >))
(\ d : ((< b : ({ c : Unit , a : Nat }) , a : (Float -> Float) >) -> (({ d : B , c : (Unit -> String) }) -> ({ e : Unit , b : (< b : Nat , e : Float >) }))) . (((c . a) as (< c : C , e : Bool >)) (if (case "apple" of < c = d > => (iszero b) | < c = e > => true) then (case c of < d = a > => (true 1) | < d = d > => unit) else (< e = true > as Unit))))
((fix (\ d : C . (fix unit))) as (< d : (Nat -> B) , d : ((< e : String , e : Float >) -> (({ d : Float , e : A }) -> (< d : Unit , b : A >))) >))
(\ d : (({ a : ({ a : Nat , b : Unit }) , a : ({ d : Float , e : String }) }) -> (< e : A , a : Float >)) . (fix ((\ d : B . 2) as (< b : (< b : String , a : Float >) , c : ({ a : Nat , a : B }) >))))
(pred (< d = (succ 2) > as ({ e : C , e : C })))
(fix (fix (fix ({ b = b , e = false }))))
(succ (case ((fix true) as ({ b : String , d : C })) of < c = c > => (iszero 1) | < d = a > => ({ d = c , d = (let a = false in false) })))
(iszero ((if false then 1 else 0) (iszero ("apple" . b))))
((\ d : (B -> Unit) . (("boy" a) . c)) . d)
((case (("boy" as C) as B) of < b = e > => (let b = (succ a) in 0) | < a = d > => ((c . e) (pred ({ a = true , c = 0 })))) . b)
(case (if (pred 0) then (unit . a) else (fix 2)) of < d = b > => ((true . e) as (({ a : Float , c : Unit }) -> ({ b : Bool , c : Bool }))) | < e = a > => (case (fix (false as Unit)) of < a = a > => (\ b : Unit . (1 as Bool)) | < b = c > => (iszero b)))
(succ ({ a = (< d = 2 > as String) , a = (\ e : Bool . b) }))
(({ d = (((case "apple" of < a = b > => unit | < d = d > => c) . d) as (< a : ({ b : C , a : Unit }) , a : (< c : Float , a : C >) >)) , d = ((case "apple" of < c = d > => true | < e = e > => a) (pred ({ a = 2 , a = true }))) }) (("apple" . d) as ({ a : A , d : A })))
(pred (< d = (succ "apple") > as ({ e : Bool , c : B })))
(succ (let b = (if 0 then (fix unit) else (true true)) in ("boy" as Unit)))
(((iszero ("apple" . a)) . c) as (< e : (< c : ({ b : Bool , a : C }) , e : ({ a : C , e : String }) >) , b : (< a : ({ a : String , b : Nat }) , c : (< d : C , a : Bool >) >) >))
({ c = ({ d = (let d = (let c = "apple" in 2) in false) , d = (succ (\ c : String . true)) }) , e = ((let c = (\ e : String . b) in c) . e) })
(\ d : (< e : (< a : (< c : Bool , a : B >) , d : (C -> Float) >) , d : ({ c : ({ c : ({ a : Bool , e : Bool }) , a : C }) , b : ((< b : Float , e : B >) -> ({ e : Nat , c : A })) }) >) . (case (iszero b) of < d = d > => (case "apple" of < a = c > => c | < b = e > => (fix "apple")) | < a = b > => (< c = ({ a = unit , b = c }) > as String)))
(let a = ({ b = ((if false then 0 else true) . c) , a = (iszero (pred false)) }) in (\ b : (< a : (< d : Unit , d : String >) , a : ((< a : B , d : Unit >) -> Float) >) . (iszero (iszero false))))
(iszero (pred ({ e = ({ b = "boy" , b = 2 }) , a = "apple" })))
(({ b = ((< b = a > as A) . c) , e = ({ d = (case 1 of < e = d > => a | < d = d > => 2) , e = (iszero unit) }) }) ({ b = (fix 0) , b = (iszero unit) }))
((case (\ c : Unit . 0) of < e = c > => (succ 0) | < c = d > => (if (< c = c > as (String -> B)) then (0 . c) else (unit 2))) (< c = (if (case 0 of < b = b > => "boy" | < b = d > => b) then false else (case true of < e = e > => 2 | < a = d > => true)) > as (< d : C , c : String >)))
(if (\ a : (< c : (< e : String , e : Float >) , e : (C -> B) >) . (pred (iszero true))) then ({ d = ({ e = "apple" , a = 2 }) , b = ("apple" as A) }) else (fix (({ d = "apple" , e = "apple" }) (< e = "apple" > as Nat))))
((if (case unit of < e = b > => "boy" | < c = e > => 2) then (\ d : (< c : C , a : Unit >) . 1) else (if 0 then 0 else 2)) (let d = (\ c : ({ b : C , c : Bool }) . (unit as Bool)) in ({ b = "apple" , c = b })))
(if (succ (false . b)) then (case ({ c = (case false of < a = a > => true | < c = c > => "apple") , b = (if 2 then a else true) }) of < a = d > => ((let b = "apple" in "apple") . d) | < b = b > => (0 a)) else ({ c = (< e = true > as B) , d = (("boy" unit) as (< c : Unit , a : Unit >)) }))
(let d = ((fix (fix (2 as B))) as ((< d : (Bool -> C) , d : ({ e : Nat , d : C }) >) -> ((Nat -> B) -> Unit))) in (let b = ({ e = 1 , b = 1 }) in (if a then false else true)))
((succ (let c = true in ({ c = true , a = 1 }))) (succ (let b = (\ b : Unit . 2) in (succ a))))
((fix (if 0 then (2 1) else 1)) . c)
((iszero ({ b = a , a = (2 as Nat) })) (if (if "boy" then b else (false "boy")) then (if 1 then "apple" else unit) else (\ b : ({ d : B , a : C }) . (fix 0))))
({ e = (fix ((< e = c > as A) (let d = 2 in true))) , b = (case (false unit) of < e = d > => (iszero (iszero unit)) | < e = a > => ({ c = (succ false) , d = (if false then c else true) })) })
(succ ((fix (< e = 0 > as ({ d : Unit , c : Unit }))) (\ c : (< e : Unit , a : String >) . (iszero (if true then "boy" else "boy")))))
(if ({ b = (if unit then ({ c = unit , b = false }) else (1 . d)) , d = (case 0 of < a = a > => c | < e = b > => b) }) then (let d = ((succ a) . c) in (\ b : B . false)) else (case (pred ({ d = "apple" , e = true })) of < a = c > => (case 2 of < e = c > => 0 | < b = a > => true) | < b = b > => (case 1 of < e = b > => 2 | < e = a > => b)))
(if (< a = (let a = ("apple" as C) in (true unit)) > as (< d : Float , a : Float >)) then (case ({ a = (pred (unit as A)) , b = (if true then 0 else unit) }) of < b = c > => (let b = (2 as Float) in ((iszero 0) as A)) | < b = b > => (\ b : ({ c : Unit , d : A }) . 2)) else (let b = (if (b . a) then c else (succ c)) in (case (pred c) of < d = b > => (succ false) | < b = b > => 0)))
(case (iszero (\ a : (C -> Nat) . false)) of < d = d > => (fix (succ ({ a = 0 , e = "boy" }))) | < d = c > => (if (iszero 0) then (succ b) else (fix (c 1))))
(< b = (if (iszero 1) then (< d = 2 > as Float) else ({ b = (2 . d) , a = (< a = b > as C) })) > as ({ d : ({ a : Float , b : A }) , a : ({ e : B , b : ({ d : Bool , d : B }) }) }))
(pred (((succ b) as (< e : Unit , e : Nat >)) as ({ e : B , e : (< d : C , d : Unit >) })))
((iszero (\ a : Bool . c)) . d)
({ a = ({ e = (if (if c then 0 else unit) then (2 as B) else (succ 1)) , e = (< c = (< c = true > as A) > as (< b : C , d : C >)) }) , b = ((let c = (fix (case false of < e = b > => 1 | < d = d > => c)) in ("apple" as A)) . d) })
((succ (case a of < e = c > => true | < d = e > => (fix a))) . d)
(let c = (let a = (let a = ("apple" as Bool) in (case b of < b = d > => c | < a = d > => 2)) in (\ d : Bool . 2)) in (fix (let e = c in c)))
(if (\ c : ((< d : A , d : (Bool -> Nat) >) -> ({ a : ({ c : String , e : Float }) , b : (< d : Float , e : Bool >) })) . (if (0 (0 as Float)) then (case "apple" of < e = c > => (\ d : Unit . a) | < c = e > => (let d = false in "apple")) else (let c = 2 in unit))) then ((if (case c of < c = e > => c | < c = e > => unit) then (true "apple") else (iszero 2)) . c) else (case (iszero (succ (iszero false))) of < b = d > => (false (let b = true in true)) | < e = e > => (if (\ d : String . "apple") then (< c = (succ "boy") > as B) else ({ d = (iszero 0) , a = (fix b) }))))
(pred (if (iszero (unit as B)) then ({ b = a , a = a }) else (b . a)))
(\ b : (< c : ((< e : B , b : (< e : Bool , d : String >) >) -> (C -> A)) , e : ({ e : (< c : String , b : Float >) , e : ({ e : (Bool -> Float) , e : (Float -> C) }) }) >) . (\ b : ({ b : Bool , c : C }) . ((iszero false) false)))
(succ (if ({ d = (< a = true > as B) , a = (pred c) }) then (let e = false in a) else ({ e = false , d = "apple" })))
(\ a : ({ e : (< b : A , b : Float >) , a : (< c : A , e : String >) }) . (fix ((1 . e) as (Bool -> String))))
(< e = ((pred (let c = (< c = 2 > as Float) in (pred c))) as ({ d : ({ e : Float , c : Nat }) , c : (B -> A) })) > as (({ b : (Unit -> Unit) , c : (Float -> Float) }) -> ((< e : B , a : A >) -> B)))
(if (fix (iszero (unit . b))) then ((2 2) . b) else (< a = (succ a) > as (({ b : String , a : Nat }) -> ({ d : A , a : Bool }))))
((< a = ((succ 1) as (< c : Unit , b : A >)) > as (< b : C , a : B >)) . e)
((\ d : (< a : ({ d : C , c : A }) , c : (Unit -> Bool) >) . ({ a = (fix 0) , e = (2 as Bool) })) as ({ e : ({ c : A , e : (< a : Bool , b : Unit >) }) , e : ({ d : B , d : ({ d : B , a : C }) }) }))
({ e = (iszero (\ e : Nat . "apple")) , b = (if (pred unit) then (pred true) else (case (let a = "boy" in a) of < c = b > => (let a = "boy" in 2) | < a = c > => (true . b))) })
(pred (succ ((iszero a) 0)))
(pred (\ c : ({ a : C , d : Unit }) . (iszero (1 as B))))
({ b = (iszero ({ c = ("boy" . d) , a = (case 2 of < c = b > => unit | < c = c > => false) })) , c = (fix ((case b of < d = a > => false | < e = d > => false) as (< e : (B -> A) , a : A >))) })
(\ a : (< d : ({ d : Unit , b : Unit }) , e : (B -> (< d : String , d : Nat >)) >) . (iszero ((true 0) ("apple" true))))
(pred (fix ((< e = 1 > as String) (pred 2))))
(< a = ((fix false) . a) > as (< a : (< b : ({ d : B , b : A }) , b : (< d : B , d : Bool >) >) , b : (String -> Nat) >))
(\ d : (({ c : ({ b : C , c : Unit }) , a : Nat }) -> ((({ a : C , a : Float }) -> C) -> ({ b : Nat , a : B }))) . (((if true then b else "boy") as (< e : A , d : String >)) as (< c : (Unit -> C) , d : ({ b : Nat , d : Nat }) >)))
(fix (\ c : ((< c : Nat , c : Bool >) -> ({ c : Nat , a : A })) . (if 0 then "boy" else 1)))
((iszero ((let e = 1 in (\ a : Nat . false)) (succ true))) . b)
(let a = (case (fix (2 false)) of < d = c > => (0 unit) | < a = d > => (true as (< b : Nat , a : A >))) in (case (succ (false . e)) of < d = d > => (if b then a else "boy") | < e = b > => (< b = (true . b) > as Nat)))
(\ a : (< e : (({ d : Nat , a : Bool }) -> (C -> (< d : Bool , a : Float >))) , e : ({ a : ({ d : ({ b : Unit , a : B }) , d : A }) , d : (< a : B , e : Unit >) }) >) . (pred (case (fix 2) of < e = a > => 0 | < d = d > => (case a of < e = b > => 2 | < a = e > => "apple"))))
(< b = (< c = (fix a) > as (B -> C)) > as (< c : (String -> Unit) , b : ((< c : C , e : B >) -> ({ d : String , a : Bool })) >))
(if ((iszero (succ b)) (\ c : (Unit -> String) . (1 as Nat))) then (case (iszero 0) of < b = a > => (iszero 2) | < e = e > => ((< b = 1 > as Bool) (fix 0))) else (let a = (\ a : (< a : B , c : Bool >) . (< e = "boy" > as B)) in (1 as C)))
((\ b : (< d : A , c : Bool >) . (succ ("boy" as Unit))) as ({ d : (Bool -> Bool) , e : (({ d : Unit , b : Nat }) -> (< c : Nat , c : (Nat -> String) >)) }))
(if (case ("apple" "boy") of < e = d > => (false . e) | < d = e > => (if a then false else 2)) then (succ ((succ (case false of < a = c > => "boy" | < d = c > => 0)) . c)) else (\ a : ((< d : Bool , e : B >) -> (String -> Float)) . (< a = 0 > as Nat)))
({ a = (succ (1 as ({ c : C , e : C }))) , c = (\ e : ({ b : Nat , b : B }) . ({ c = true , c = 1 })) })
(succ (< e = ("boy" as B) > as ({ b : String , e : C })))
(fix (< a = (iszero a) > as (< a : ({ a : Nat , b : B }) , c : Bool >)))
(pred ((< a = a > as (< c : Bool , c : A >)) (pred (pred 1))))
(if (iszero (succ (false . a))) then ((< e = (case c of < c = b > => 2 | < b = b > => 2) > as A) . e) else (fix (case 1 of < e = b > => 0 | < b = e > => 1)))
(let d = ((iszero (pred "apple")) as (Bool -> B)) in (pred (< a = (pred 2) > as (< e : A , e : B >))))
(if ((iszero (< c = a > as C)) (if (succ a) then 1 else c)) then ((let a = a in c) as (< d : Bool , e : (< e : Float , a : Nat >) >)) else ((0 as Float) (pred 1)))
(pred (case (fix (\ b : Bool . 1)) of < d = d > => (c as Bool) | < e = b > => (\ e : Unit . 0)))
((\ c : (< c : ({ d : A , c : B }) , b : (< c : Unit , a : Float >) >) . (fix 1)) as (< b : (< c : (< b : String , b : Nat >) , b : ({ d : Unit , d : Unit }) >) , b : (({ b : Float , b : Unit }) -> Bool) >))
(succ (pred (pred "boy")))
((fix (case a of < e = c > => (fix 1) | < a = b > => (succ true))) as (((< d : Nat , a : Float >) -> ({ b : A , b : Bool })) -> (String -> String)))
(succ ((succ c) . d))
(let e = (< a = (case true of < b = b > => false | < e = a > => 2) > as (< c : String , c : C >)) in (case (< d = true > as B) of < e = e > => (iszero 2) | < c = b > => ((b c) unit)))
(case (fix (if (\ c : Bool . unit) then (c a) else (let b = "apple" in b))) of < e = c > => ((iszero (let e = (case false of < d = b > => 0 | < b = c > => b) in (iszero a))) (if (pred b) then (case a of < c = c > => 1 | < c = b > => 2) else true)) | < a = b > => (let d = (fix b) in ({ b = false , b = unit })))
((case (\ e : C . 0) of < e = d > => (pred "boy") | < d = c > => ({ e = unit , b = (fix false) })) as (< c : ({ e : (Nat -> String) , d : C }) , e : ((A -> C) -> Nat) >))
(iszero (iszero (< d = false > as String)))
({ e = (iszero (succ c)) , d = (fix (if "boy" then 0 else a)) })
((succ ({ d = (succ 2) , a = (let c = 0 in "boy") })) as ((< d : (< d : C , a : Nat >) , b : ((String -> B) -> (Float -> C)) >) -> (< d : (< d : ({ a : C , c : Bool }) , e : A >) , b : (< b : String , c : A >) >)))
((< e = (1 as (B -> B)) > as (A -> String)) . e)
(\ b : ((({ a : Bool , c : Float }) -> Bool) -> ({ c : ({ e : String , c : Unit }) , c : ({ e : Bool , e : A }) })) . (let d = (("boy" as Bool) . a) in ((< b = "apple" > as Nat) as String)))
(((case (pred false) of < b = d > => ({ d = "boy" , a = unit }) | < e = c > => (< c = "boy" > as (A -> String))) (iszero ({ c = "boy" , a = true }))) . c)
(succ (succ (iszero (succ 2))))
(({ d = (({ c = (\ e : B . false) , a = b }) (let b = ("boy" as Float) in (iszero "boy"))) , c = (a as (< d : Nat , e : Nat >)) }) . e)
(((a . b) as (A -> Nat)) ((let a = 0 in 1) . e))
(< d = (succ (\ a : (< d : Bool , e : C >) . c)) > as (< a : ({ c : (< b : Float , a : String >) , d : ({ c : (Bool -> Nat) , c : Bool }) }) , b : ({ d : (< a : Nat , d : Unit >) , c : (< c : (B -> Bool) , c : (< d : B , b : C >) >) }) >))
(fix (pred ({ c = (iszero (\ a : B . false)) , d = (succ b) })))
(\ d : (({ d : Float , b : Nat }) -> (C -> A)) . (if ({ c = false , c = "boy" }) then ({ a = 2 , b = 2 }) else ({ e = c , a = unit })))
(fix (succ (succ (< e = c > as B))))
(succ (((unit . a) . a) (pred (case b of < e = c > => true | < e = b > => 0))))
((fix (succ (pred 1))) . e)
(iszero (\ a : (Nat -> Bool) . (({ d = "boy" , c = "boy" }) "apple")))
(pred (< b = (case (case a of < e = e > => unit | < b = b > => "boy") of < a = e > => (let d = a in c) | < c = b > => a) > as ({ d : ((< c : B , e : String >) -> Unit) , d : ({ a : Nat , d : Bool }) })))
((< a = ({ e = (\ b : ({ e : C , e : B }) . c) , e = (case ("apple" b) of < a = a > => (unit . b) | < c = e > => b) }) > as ((String -> String) -> ({ e : String , a : B }))) (if (2 . c) then (< e = unit > as Unit) else (a as A)))
(case ((fix (fix (succ c))) . a) of < e = d > => (fix (if ({ a = unit , b = a }) then (\ a : Float . false) else false)) | < a = d > => (if (case ({ d = false , a = "apple" }) of < a = e > => (let a = 0 in true) | < b = a > => (unit 2)) then (("boy" "apple") . a) else ({ b = (iszero (let b = c in true)) , d = (let d = true in (succ "boy")) })))
(pred (< d = (if 0 then c else a) > as (String -> C)))
(let a = ((iszero unit) . d) in (((< a = false > as ({ e : Unit , a : Unit })) . d) (let c = 0 in ({ d = 1 , c = false }))))
({ a = (< a = (iszero ({ d = false , e = 0 })) > as (< e : ({ a : (< d : A , a : Nat >) , a : A }) , a : (< a : ({ b : Float , d : Unit }) , a : C >) >)) , c = (pred (iszero "boy")) })
((\ e : (C -> String) . (case 0 of < e = e > => a | < b = e > => b)) . b)
(((iszero ({ a = "boy" , e = c })) as ((B -> Bool) -> (< a : Unit , c : A >))) ({ c = (fix b) , c = (\ e : C . 2) }))
(((succ 1) . c) as ({ c : (Unit -> Bool) , e : ({ a : (< d : C , e : Bool >) , d : C }) }))
((pred (fix ({ d = c , c = c }))) ((c as Unit) ((if false then 2 else false) (\ c : A . false))))
(let a = (((let a = c in false) as A) as ({ e : Bool , d : Nat })) in (< b = (let d = (pred (pred 2)) in (let c = 2 in 2)) > as ((Bool -> String) -> (Nat -> C))))
(iszero (if (pred a) then ((\ a : (A -> Nat) . 0) . e) else ((fix (fix unit)) as ((< a : Unit , c : Unit >) -> ({ a : A , b : A })))))
(\ c : ({ e : (< c : B , c : (< d : Unit , c : Bool >) >) , b : (< c : (({ b : Unit , b : C }) -> ({ b : Bool , a : String })) , c : ({ e : Float , b : String }) >) }) . (if ({ e = 2 , b = (1 . c) }) then (fix a) else (\ d : A . (if b then false else c))))
(\ d : ({ d : (< a : Float , b : (< e : Unit , b : Unit >) >) , c : (B -> B) }) . (pred ({ e = 0 , b = (succ 0) })))
(if ((\ b : (< b : (A -> String) , b : Unit >) . (fix (a true))) . c) then (succ (< a = (true as Bool) > as (Nat -> Float))) else (case (iszero (< c = 2 > as Float)) of < d = d > => ((0 b) as B) | < d = b > => (\ a : (< e : Nat , d : A >) . (false 0))))
(< e = ({ a = (iszero (succ (false "boy"))) , e = (({ e = (let c = "apple" in a) , d = (\ a : Float . 2) }) . d) }) > as ({ c : (Unit -> Bool) , d : (Bool -> A) }))
((< b = (case a of < c = d > => "apple" | < c = c > => b) > as ({ e : C , e : (Unit -> Nat) })) (fix (\ d : Bool . (let c = a in "boy"))))
(\ d : ((< b : (Bool -> Nat) , d : ({ c : Float , c : Nat }) >) -> ((({ d : A , c : String }) -> C) -> (B -> ({ b : C , b : A })))) . ((iszero (pred b)) (a as Bool)))
(if (< b = (succ (if c then b else unit)) > as (< e : ({ b : Unit , d : B }) , a : (< e : A , b : Unit >) >)) then ({ c = (let a = b in false) , a = (b . d) }) else ((succ (let e = 1 in "boy")) (\ e : ({ a : Nat , e : A }) . (unit as String))))
(< c = (case ((iszero false) . b) of < b = e > => (\ c : Bool . a) | < c = a > => (iszero "boy")) > as (((< a : Bool , b : Bool >) -> ({ d : B , b : Float })) -> (< c : String , b : Nat >)))
(pred ((succ c) . a))
(fix (let d = (c as String) in (fix (iszero c))))
(\ b : ((Bool -> Bool) -> ({ d : A , a : B })) . ((pred 1) . c))
(\ e : ({ e : ({ c : A , c : ({ b : Unit , c : C }) }) , d : ({ d : ({ b : C , c : Unit }) , e : ({ e : A , b : Nat }) }) }) . (case (let a = c in unit) of < e = a > => (let b = 0 in 0) | < e = b > => ({ a = "boy" , e = unit })))
(case ((pred (fix b)) (let b = b in (case c of < b = a > => 0 | < b = e > => false))) of < a = a > => (let a = (fix (b a)) in (pred (fix 1))) | < b = b > => ((fix b) as ({ c : (< b : String , c : (< d : A , e : C >) >) , d : (B -> C) })))
(succ (((< b = 0 > as Unit) as (A -> Float)) (1 . a)))
(((< c = unit > as Unit) (succ (a as Float))) . b)
({ e = (if (fix (\ d : (C -> A) . (2 . e))) then (\ c : (< b : ({ b : Nat , e : C }) , d : (C -> A) >) . (pred 2)) else ((\ a : Bool . "boy") as ({ a : Nat , c : B }))) , b = (pred (\ e : (< a : C , d : Bool >) . (\ b : C . 2))) })
(pred ((\ e : (C -> C) . ({ e = b , c = 0 })) (if c then 2 else c)))
(case ((succ "boy") as ({ b : (Float -> String) , b : A })) of < a = d > => ({ c = (let d = b in (fix 0)) , d = (if 1 then 1 else a) }) | < a = c > => (if ({ c = a , d = (c . e) }) then (iszero a) else (if a then 1 else false)))
(\ a : ((< b : B , e : Nat >) -> (< b : Nat , c : B >)) . ((case "apple" of < d = b > => b | < c = a > => true) (\ c : B . 0)))
(if (\ a : ({ d : A , b : String }) . (if ({ c = "boy" , d = 1 }) then (if 1 then 0 else 1) else (case 0 of < d = c > => 2 | < d = b > => b))) then (if (fix (let d = 2 in 1)) then (pred (pred a)) else (< e = (\ b : C . c) > as ({ c : ({ a : Nat , e : A }) , c : (< e : Float , c : A >) }))) else (if ("apple" . c) then ({ a = b , c = 1 }) else (iszero unit)))
(iszero (pred (0 . b)))
(let e = (< e = (if (b 1) then ((pred "apple") . a) else ("apple" . b)) > as ({ d : (< c : (A -> Unit) , c : ({ c : B , a : Unit }) >) , d : (Bool -> ({ a : Bool , c : C })) })) in ((fix 2) (pred c)))
(({ e = (if (succ unit) then b else 2) , c = (pred 0) }) as (< d : ({ c : Float , b : Nat }) , d : (C -> (Bool -> A)) >))
(({ e = (succ (let c = "boy" in "apple")) , e = ((1 as B) ({ c = 1 , b = "apple" })) }) . d)
(< a = (pred (1 . c)) > as ({ e : ({ d : ({ a : Unit , e : A }) , e : ({ a : B , e : Nat }) }) , d : ({ e : String , b : ({ a : Unit , d : Bool }) }) }))
(iszero ((\ b : String . 2) as ({ b : ({ d : Nat , a : Bool }) , d : (< d : A , c : C >) })))
((< a = (fix 1) > as ({ d : (< d : B , c : A >) , a : (Unit -> B) })) . c)
(if ((if (if 2 then a else false) then (a 2) else (< a = false > as Unit)) (< c = a > as Nat)) then ((fix (case "apple" of < a = d > => a | < b = b > => 0)) . c) else (\ e : ({ c : (Unit -> Nat) , d : Nat }) . ("apple" . e)))
(< d = (let a = (pred (< e = "apple" > as A)) in (succ (c 0))) > as ((< e : Bool , b : A >) -> ({ b : (Unit -> Unit) , e : String })))
(fix ((iszero ({ e = b , d = b })) as (< b : (< e : B , e : String >) , e : ({ a : Float , e : Nat }) >)))
({ a = (succ (iszero (let a = false in "boy"))) , d = ((b true) . a) })
((let c = (iszero c) in (fix 1)) as ((({ c : A , d : Bool }) -> (A -> Float)) -> (< d : ({ c : Nat , e : Nat }) , d : Float >)))
((fix ((let b = "boy" in a) . b)) . b)
(\ a : ({ d : ((Unit -> Nat) -> C) , d : ({ c : ({ d : Bool , a : Nat }) , e : (Nat -> String) }) }) . (let a = (fix c) in (< b = b > as A)))
(\ d : ((< b : ({ a : String , d : A }) , a : (< e : String , e : C >) >) -> (Nat -> Float)) . (({ c = 0 , a = 0 }) as ({ e : A , d : B })))
(case ((pred (c . e)) . d) of < a = b > => (if (pred true) then (\ c : (Float -> String) . (< d = false > as B)) else (a "apple")) | < b = d > => (if (< a = "apple" > as (Nat -> Bool)) then (succ (true as Unit)) else (\ d : (< e : Float , a : A >) . ("apple" as B))))
(succ (((case 1 of < e = a > => "boy" | < a = d > => a) (1 as ({ c : Float , d : Float }))) (pred (b ("apple" as Bool)))))
(((\ e : ({ e : Nat , a : A }) . (iszero false)) . b) . c)
(fix (iszero ({ a = (case 0 of < b = b > => "boy" | < b = b > => b) , e = b })))
(iszero (< b = ({ c = (iszero "apple") , d = (iszero false) }) > as ({ d : (< d : String , d : C >) , d : (< c : Unit , c : String >) })))
(((pred (< a = (c false) > as ({ e : A , b : Unit }))) (< c = (0 . c) > as (< c : Nat , b : Float >))) (if (iszero (fix 0)) then (pred b) else ((< d = 2 > as Float) as (< a : Nat , a : Unit >))))
(< a = (succ (if (a . b) then "boy" else (case 0 of < c = d > => 0 | < e = d > => "boy"))) > as ({ d : (B -> C) , e : (< e : ({ a : B , d : String }) , a : ({ d : A , d : B }) >) }))
(< d = (if (1 . c) then (iszero (b as Float)) else (fix (succ true))) > as (< d : (< e : ({ b : A , c : A }) , a : Nat >) , b : ({ b : Unit , b : Nat }) >))
(fix (succ (\ c : (< b : Float , c : String >) . (< c = a > as String))))
((pred (pred b)) . c)
(< c = (if (fix unit) then ((case ("boy" . c) of < a = d > => (< b = 1 > as A) | < d = d > => ("boy" . c)) . d) else (if (pred true) then "boy" else (iszero 2))) > as (({ a : A , e : C }) -> (< e : (Nat -> Nat) , a : Bool >)))
({ c = ((\ b : C . 0) as ((A -> Unit) -> (B -> (A -> B)))) , e = (case (pred (case c of < b = e > => c | < e = e > => false)) of < e = d > => (if c then a else (iszero "boy")) | < e = c > => (iszero 2)) })
((if (true as B) then (fix (iszero (unit b))) else (\ c : A . (iszero "boy"))) ((pred (< d = 1 > as Bool)) . a))
(iszero (succ (case (\ c : Bool . unit) of < a = a > => (let b = ({ a = 0 , a = "apple" }) in a) | < c = d > => (\ a : String . 1))))
((if (({ c = 0 , c = b }) (fix b)) then ({ a = (false . a) , a = ((if b then b else "boy") 0) }) else ((false (\ d : Bool . 2)) . e)) as (({ a : (< d : String , c : String >) , e : (< d : String , c : Unit >) }) -> ((Nat -> Nat) -> Nat)))
(pred (if (succ (let e = (if true then unit else 1) in unit)) then (succ (pred 2)) else (succ (case unit of < e = e > => "apple" | < a = e > => b))))
(if (iszero (< d = (iszero (iszero c)) > as ({ b : ({ e : String , b : Nat }) , a : ({ c : Nat , b : C }) }))) then ((< d = (iszero true) > as C) . c) else (let a = (iszero ({ a = "apple" , d = (< b = false > as Unit) })) in ((false . d) (if 0 then 1 else b))))
(fix (pred (iszero "apple")))
((let c = (\ a : (< a : B , d : C >) . unit) in (fix (\ b : C . "boy"))) ((pred (false . c)) as ((< b : Nat , b : Unit >) -> B)))
((let c = (succ a) in (c . c)) . b)
(pred (iszero (< a = (fix 1) > as (< e : C , c : Float >))))
(< b = (< c = (if a then false else (false 0)) > as (Bool -> Bool)) > as (({ e : B , d : String }) -> (({ d : C , c : C }) -> (Bool -> ({ b : Bool , d : A })))))
({ e = ((pred (case "boy" of < d = d > => 1 | < b = c > => c)) . b) , a = ({ b = (2 as Unit) , d = (let a = c in 1) }) })
({ e = (let e = (\ e : Float . 2) in ({ e = (< d = 1 > as Nat) , b = ("boy" "boy") })) , e = (pred (let c = (< a = 1 > as Nat) in (succ a))) })
(\ a : (< d : (String -> String) , a : (< b : String , d : (Float -> Float) >) >) . (case (fix c) of < a = d > => (case b of < c = b > => a | < b = d > => c) | < a = e > => (case (fix 2) of < c = a > => "boy" | < b = a > => "boy")))
(iszero (let a = (case "boy" of < e = a > => ("apple" . c) | < e = a > => (if false then b else "apple")) in (< e = (succ true) > as (Bool -> B))))
(pred ((\ c : String . b) . e))
(iszero ((let a = a in (0 b)) . d))
(fix (iszero (\ a : B . unit)))
(\ c : (({ b : A , c : C }) -> (< a : Nat , c : A >)) . (case (pred c) of < d = a > => ({ a = false , c = 1 }) | < c = d > => (if a then b else false)))
