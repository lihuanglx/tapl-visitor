((iszero (pred 1)) (iszero (succ (iszero c))))
(\ b : ((((B -> Bool) -> (C -> A)) -> (B -> Nat)) -> (Bool -> (A -> Bool))) . ((succ 0) (if (iszero 0) then (true 2) else c)))
(iszero ((if false then (iszero 1) else (pred c)) (\ c : Bool . 1)))
(succ (iszero ((1 c) (succ 0))))
(pred (\ a : ((Bool -> Nat) -> (A -> (Nat -> A))) . (pred (iszero (iszero 1)))))
((pred (if ((iszero c) (pred a)) then (\ a : B . true) else (iszero true))) (\ a : (A -> C) . (pred (succ c))))
(succ (\ b : ((Nat -> B) -> (A -> Bool)) . (1 (pred b))))
(pred (iszero (succ (\ c : A . 2))))
(pred (\ a : (Nat -> Nat) . (pred (succ 2))))
(succ (if (succ c) then (iszero 2) else (\ a : C . a)))
(\ c : ((A -> (C -> Bool)) -> ((Bool -> Nat) -> (C -> Nat))) . (if (if (if false then 2 else a) then b else 2) then (pred (pred b)) else (if c then true else true)))
(\ d : (((B -> (C -> B)) -> (A -> Nat)) -> ((C -> Bool) -> (A -> B))) . ((succ (if true then false else c)) (if (if c then 1 else true) then (if 2 then b else 1) else b)))
(\ e : ((((B -> Nat) -> C) -> (C -> (C -> C))) -> ((A -> Nat) -> (Nat -> A))) . (((2 b) c) (succ 2)))
((succ (succ b)) (pred (succ a)))
(if ((if (\ c : B . a) then (succ 0) else (iszero (pred true))) (iszero (iszero false))) then (((succ b) a) (if ((iszero true) (iszero 0)) then (if a then b else false) else (iszero a))) else (succ (\ a : Nat . (false false))))
(if (if (pred c) then (succ (succ 0)) else (iszero a)) then (if (iszero (succ 0)) then (0 (2 a)) else (iszero (succ true))) else (pred (pred (if a then b else false))))
(\ b : ((Nat -> B) -> (A -> Nat)) . (pred (\ d : (A -> Nat) . (pred 0))))
(if ((pred (pred c)) ((false false) (pred c))) then (iszero (pred a)) else (if (1 true) then (pred (iszero false)) else (if true then (iszero 0) else (iszero a))))
(\ e : ((Nat -> A) -> (B -> (A -> Nat))) . ((if (if 0 then a else c) then (\ d : (A -> B) . 0) else (pred (iszero c))) (succ (succ 2))))
(pred (pred (succ false)))
(succ (\ c : ((A -> A) -> B) . (\ d : (Nat -> C) . (\ e : A . 0))))
(iszero (\ e : (A -> A) . (iszero (pred 1))))
(if (\ c : (A -> (B -> Bool)) . (\ c : (A -> A) . (false c))) then (if (\ a : (A -> A) . (if c then 0 else a)) then (succ (iszero (iszero a))) else (\ a : (Bool -> Bool) . (\ d : C . false))) else (\ b : (C -> B) . (iszero b)))
(iszero (pred (pred (\ e : B . 1))))
(if (iszero (iszero (if true then b else a))) then (\ a : (Bool -> C) . (succ 2)) else (pred ((succ true) ((iszero true) (pred a)))))
(if (if (if (iszero false) then (succ 1) else (iszero 1)) then (succ (b false)) else (succ (succ b))) then (\ b : (Nat -> B) . (\ e : (Nat -> A) . (succ 0))) else (pred ((succ b) true)))
(if (iszero (succ c)) then ((\ a : Nat . true) (pred 2)) else (pred (\ e : ((C -> A) -> Bool) . (false 0))))
(iszero (succ (iszero 1)))
((if (succ (iszero true)) then (pred b) else (iszero (if 1 then 1 else 2))) (if (if b then (\ d : B . 1) else 1) then (\ d : A . 1) else (false b)))
(if (succ (pred (if 0 then 2 else c))) then (iszero (\ b : B . false)) else (\ a : (Bool -> (A -> B)) . (pred (iszero false))))
((succ (succ false)) (iszero (succ (iszero c))))
(iszero (if ((iszero true) (a b)) then (succ (false 2)) else (b (false true))))
(succ (if (succ 1) then (1 c) else (iszero true)))
(if (succ (succ (succ c))) then (iszero (if a then true else 1)) else (iszero (iszero 2)))
(if (succ (pred (succ a))) then (succ (iszero (succ 0))) else (\ b : (((B -> C) -> (B -> A)) -> (A -> A)) . (b (succ a))))
(if ((iszero false) (1 0)) then (if (\ e : C . (pred 0)) then (\ b : C . 2) else (iszero (if true then 1 else 0))) else (iszero (succ c)))
(iszero (iszero ((succ 0) (\ d : A . 1))))
(pred (if (succ b) then (\ b : Bool . (succ c)) else (pred true)))
(iszero (if ((pred b) (\ d : C . false)) then (pred (\ e : B . c)) else (pred a)))
(\ d : (((A -> C) -> (A -> Bool)) -> ((Bool -> A) -> B)) . (\ d : (Nat -> (Nat -> C)) . (succ 0)))
(\ b : ((((Bool -> Bool) -> (Nat -> B)) -> (B -> Bool)) -> ((Bool -> C) -> (Bool -> Nat))) . (iszero (iszero 0)))
(\ c : ((C -> A) -> (Nat -> Nat)) . ((pred true) (1 1)))
(iszero (if (if b then c else 2) then (iszero 2) else (iszero 2)))
(succ (succ (pred false)))
(\ a : ((((A -> B) -> Nat) -> ((C -> Bool) -> C)) -> ((A -> A) -> (A -> C))) . (succ (succ (iszero true))))
(iszero (iszero (succ 1)))
(iszero (iszero (if 0 then b else 0)))
(iszero ((pred (succ (iszero false))) (\ d : (A -> Nat) . (iszero (true c)))))
((pred (if (2 a) then false else (if false then 0 else c))) (if (succ c) then (\ c : B . b) else (true a)))
(iszero (\ b : (C -> Bool) . (true (\ e : A . b))))
(iszero ((\ c : Bool . 1) (if true then (a 0) else 2)))
(if (iszero (\ b : (B -> B) . (iszero 1))) then ((succ (iszero 1)) (if (if 0 then false else 2) then false else 2)) else (iszero (if (\ d : Nat . false) then c else b)))
(if (\ b : ((B -> A) -> (C -> C)) . (true a)) then (\ e : (Bool -> Nat) . (iszero (0 b))) else (pred (succ (succ 2))))
((if (succ (iszero c)) then (\ a : A . (0 0)) else (false (c 2))) (if ((pred true) 0) then (if c then (succ a) else (1 false)) else (iszero (if 2 then a else 2))))
(iszero (iszero (if (if b then true else (2 2)) then (pred false) else (if (succ 1) then (if true then c else c) else (if 1 then false else false)))))
(iszero ((if false then 1 else (iszero c)) (succ (succ 1))))
((if (succ a) then (c 1) else (a c)) (if (iszero false) then ((pred b) 1) else (\ c : A . false)))
(if (if (iszero 1) then (iszero 2) else (pred (succ b))) then (iszero (0 0)) else (succ (iszero 2)))
((succ (\ d : A . (b false))) ((if c then b else a) (iszero 1)))
(if (succ ((succ b) (pred false))) then (\ a : (((C -> Nat) -> (C -> C)) -> (Bool -> Nat)) . (if (iszero (pred c)) then (true 2) else (pred (succ 2)))) else (if (\ a : B . b) then (if (iszero c) then (if c then 0 else false) else (pred c)) else (1 (if a then a else 0))))
(if (iszero (pred true)) then (pred (iszero 0)) else (pred ((false 2) (succ b))))
(pred (iszero (if a then 1 else c)))
(iszero (\ c : (B -> Bool) . (pred c)))
((pred (iszero (\ b : Nat . a))) (iszero (\ e : (Bool -> Bool) . (iszero c))))
(pred (iszero (2 a)))
(if (\ a : ((C -> B) -> (C -> C)) . (iszero (iszero false))) then ((true a) (\ a : (B -> Bool) . c)) else (\ b : ((Nat -> C) -> Bool) . (\ c : (C -> Bool) . (pred true))))
(((\ a : Bool . 0) (iszero a)) (\ c : ((Bool -> Bool) -> (Bool -> B)) . (if 1 then (succ 1) else a)))
(iszero (iszero ((pred 0) (succ a))))
(iszero ((pred a) (pred (pred false))))
(iszero (\ d : ((B -> A) -> (Nat -> B)) . (pred false)))
(if ((pred (\ d : Bool . (succ 1))) (pred ((\ d : B . true) c))) then (pred (iszero (\ d : Nat . true))) else (succ (\ c : Nat . 0)))
(pred (iszero (succ false)))
(succ (\ e : ((Nat -> (C -> Nat)) -> ((B -> Nat) -> A)) . (iszero (pred (if true then 1 else true)))))
(\ d : ((B -> (Nat -> Nat)) -> (Nat -> C)) . (if (pred 2) then (1 false) else (2 true)))
(\ a : ((C -> B) -> (B -> A)) . (if (iszero true) then (iszero c) else (\ e : Nat . b)))
(\ b : (((C -> C) -> (A -> C)) -> (B -> C)) . ((\ b : ((Nat -> Bool) -> (Nat -> Bool)) . (succ a)) (iszero (0 b))))
(\ e : ((A -> (B -> Nat)) -> (Bool -> B)) . (iszero (\ b : C . false)))
(iszero ((c (iszero b)) (pred 0)))
(if (iszero (iszero a)) then (\ b : ((Nat -> C) -> (B -> Bool)) . ((succ (succ 0)) (iszero (pred c)))) else (iszero (if b then a else b)))
(if (iszero ((succ true) (iszero b))) then (succ (iszero (iszero (pred 1)))) else (pred (if (b 2) then (succ b) else (pred c))))
(\ a : ((C -> B) -> (C -> (Nat -> A))) . (\ a : ((Bool -> Nat) -> (Bool -> Bool)) . (iszero true)))
(succ (if (2 false) then ((iszero b) 1) else (iszero (if 2 then 2 else 1))))
(if (if (iszero 0) then (succ (iszero 0)) else (iszero true)) then (succ (pred (2 1))) else ((\ d : (B -> Bool) . (succ b)) (iszero true)))
(pred (pred (if 2 then (pred 0) else (if 2 then true else false))))
(if (if (if b then (if a then 0 else 2) else false) then (c b) else (succ (if 0 then true else a))) then (iszero (pred (\ e : Bool . b))) else (\ b : ((A -> A) -> C) . (\ a : A . c)))
((succ (\ d : (C -> B) . (succ true))) (pred (\ b : A . b)))
(if (succ ((\ e : Nat . a) (pred true))) then (pred ((\ a : (Nat -> Nat) . true) (\ c : Nat . false))) else (succ (false false)))
(if (\ c : ((B -> Nat) -> (C -> B)) . (a 0)) then (iszero (\ e : A . b)) else (iszero (pred 2)))
(pred (iszero (\ a : C . (if 2 then a else 2))))
(succ (\ e : (((Bool -> Bool) -> Nat) -> (B -> Nat)) . ((if b then b else a) (pred (succ false)))))
(pred (succ (if (succ c) then (if a then true else false) else (pred b))))
(succ (succ (iszero (iszero (pred c)))))
(iszero (if (succ 0) then (iszero (pred true)) else (pred c)))
(((succ (if 0 then a else false)) (if 1 then b else 1)) (succ (pred b)))
(\ e : (((C -> Nat) -> ((A -> B) -> (Nat -> A))) -> (C -> Nat)) . ((succ (\ a : Nat . a)) (\ c : B . b)))
(if (succ (iszero 1)) then (if (pred (iszero 1)) then (iszero a) else (\ d : A . c)) else (\ c : ((A -> C) -> (C -> Bool)) . ((b b) (if 2 then b else true))))
(iszero (iszero (iszero true)))
((if (\ a : A . b) then (if 0 then (succ b) else 1) else (iszero false)) ((succ true) (succ (if a then b else 2))))
(if (\ a : ((C -> B) -> (C -> A)) . (\ a : (B -> B) . (pred true))) then (succ (if 2 then a else a)) else (pred (if 2 then (if false then a else false) else (pred b))))
(pred (\ a : (A -> B) . (iszero b)))
(succ ((2 b) (b (pred 1))))
((\ c : ((Nat -> B) -> (A -> C)) . (\ d : Nat . false)) ((iszero (pred a)) (1 a)))
(if (iszero (iszero (b 1))) then (\ a : (((B -> Nat) -> (A -> B)) -> (Nat -> A)) . (if false then false else true)) else (pred (if true then true else c)))
(\ d : (((Nat -> A) -> B) -> ((C -> A) -> (Bool -> Nat))) . (succ (\ a : (A -> C) . (iszero c))))
(\ b : ((Nat -> (A -> C)) -> (B -> B)) . (if (pred true) then ((pred (c 1)) (succ c)) else (\ b : (B -> B) . (iszero b))))
((iszero (if (pred 2) then (succ c) else (iszero false))) ((\ d : Nat . (if 0 then b else a)) (if (iszero 2) then ((\ b : C . 0) (succ a)) else (succ (\ c : A . true)))))
(\ d : (((C -> C) -> (B -> A)) -> (B -> C)) . ((if 1 then 1 else false) (pred false)))
(pred (iszero (b a)))
(iszero (succ (false true)))
(if (pred (iszero true)) then (succ ((true (succ b)) (\ b : Nat . 2))) else (((\ e : Bool . b) true) (if (if 0 then true else true) then a else c)))
(succ (if (iszero c) then (succ (pred 2)) else (if 1 then 0 else (if false then 2 else c))))
((if (iszero (iszero 2)) then (pred (pred 0)) else (succ false)) (\ e : ((C -> C) -> (Bool -> Nat)) . (succ a)))
(iszero (pred (iszero (pred 0))))
(if (\ c : (C -> C) . (iszero 2)) then ((if (iszero c) then (false 1) else ((\ e : A . 2) (pred 2))) (iszero (if a then 2 else false))) else (iszero (\ c : (A -> Bool) . false)))
(pred (\ d : (Bool -> (B -> Bool)) . ((pred 1) (iszero b))))
(if (succ ((if true then b else 0) (succ true))) then ((0 (succ 0)) (succ true)) else ((pred 0) (\ a : Bool . b)))
(succ (if (if (succ 1) then (\ a : Bool . 0) else (pred 2)) then (if (pred (succ 0)) then (if 1 then a else a) else (iszero (b 2))) else (if (if 0 then (0 true) else false) then (iszero (if c then a else 2)) else (if b then c else (if a then true else b)))))
((if (iszero b) then (2 2) else (\ b : B . 1)) ((succ (\ e : (A -> Nat) . b)) (succ (iszero (iszero 2)))))
(if (succ (succ (0 c))) then (iszero (succ c)) else (\ e : (C -> Bool) . (iszero a)))
(\ e : (((Nat -> A) -> (Bool -> Bool)) -> (C -> Nat)) . (\ e : ((Nat -> C) -> B) . (iszero (if (if c then 1 else b) then (if 1 then b else b) else 0))))
(\ c : ((B -> A) -> ((Nat -> B) -> B)) . (succ (succ 0)))
(pred (pred (\ c : ((Bool -> B) -> (B -> A)) . (pred true))))
(pred (\ b : ((B -> Bool) -> (Nat -> C)) . (iszero (\ e : B . 2))))
(iszero ((succ (\ c : B . (\ e : C . a))) (if (\ c : B . 1) then (iszero 1) else ((succ b) (iszero 1)))))
(iszero (\ b : (Nat -> (B -> C)) . ((succ a) (\ a : (A -> C) . b))))
(succ (succ (\ c : (C -> Nat) . 0)))
(pred (pred (iszero (iszero c))))
(pred (\ e : ((C -> C) -> (B -> Nat)) . (if (pred 2) then (iszero (false a)) else (c (if b then 1 else false)))))
(succ (if (succ (if 2 then true else true)) then (if (\ a : Bool . 0) then (succ b) else (\ e : (Bool -> B) . a)) else (if 0 then (pred c) else (pred 0))))
(succ (iszero (\ e : Nat . 0)))
(\ e : ((Nat -> A) -> (A -> A)) . (iszero (\ a : C . (b true))))
(pred (iszero (\ e : Nat . b)))
(\ a : (((Nat -> Bool) -> Nat) -> ((B -> A) -> (B -> A))) . (iszero (iszero 2)))
((iszero (iszero (succ true))) (succ (pred false)))
(iszero (if (false b) then (if b then 2 else (\ c : Nat . b)) else (pred 0)))
(pred (succ (if (b b) then (0 1) else (succ true))))
(pred (pred (\ b : Bool . 2)))
((succ (succ (pred 2))) (if (\ a : (Bool -> (Bool -> C)) . (succ true)) then (succ (if 2 then b else false)) else (iszero (succ false))))
(((\ e : (B -> (C -> Bool)) . (iszero a)) (pred (\ e : Bool . true))) (succ (succ false)))
(succ ((pred 2) (0 c)))
(\ b : (((B -> B) -> (Bool -> B)) -> (B -> (C -> Nat))) . (iszero (((iszero 1) b) (pred false))))
(iszero (pred (iszero true)))
(iszero (succ (succ (iszero false))))
(pred (succ ((1 false) (pred a))))
(\ e : ((Nat -> B) -> (Bool -> C)) . (iszero (succ 2)))
(succ (pred (iszero 0)))
((iszero (succ false)) ((0 (iszero 2)) ((pred b) 1)))
(if (pred (iszero c)) then (pred (succ false)) else (iszero ((2 true) (iszero 2))))
(if (iszero (2 (pred 2))) then (if (succ 1) then (pred 0) else (iszero (if false then 1 else 0))) else (pred (iszero true)))
(\ a : (((Nat -> B) -> ((Bool -> Nat) -> Bool)) -> (Bool -> A)) . (iszero (\ c : Bool . 0)))
(if ((succ b) (succ (iszero 0))) then (if (\ a : C . a) then (succ (pred 1)) else (if (iszero 1) then (if 2 then (b b) else false) else (\ c : Bool . true))) else (iszero (\ c : (Nat -> A) . a)))
(((\ d : C . (succ true)) (\ a : (B -> Bool) . (\ b : C . (succ 2)))) (succ ((if 2 then c else 1) b)))
(\ d : ((C -> (C -> B)) -> (A -> C)) . (\ c : (A -> Bool) . (false false)))
(if (iszero (iszero (\ a : Bool . true))) then (succ (succ (succ false))) else (if (pred 0) then (if a then (succ 1) else false) else (\ b : A . 2)))
(succ ((iszero c) (if a then false else b)))
(succ (\ b : (Bool -> A) . (false (succ 0))))
(if (\ d : (Nat -> Bool) . (\ c : (Bool -> B) . (iszero a))) then (\ a : ((Bool -> A) -> ((C -> Nat) -> Bool)) . ((succ c) b)) else (succ (\ c : (A -> (A -> Bool)) . (pred false))))
(succ (\ a : ((A -> A) -> (C -> Bool)) . (pred (0 c))))
(pred (if ((iszero 2) (iszero a)) then ((iszero (if c then a else 2)) (\ d : (Nat -> Bool) . (pred a))) else (if (2 a) then (\ b : C . false) else (\ e : A . 0))))
(pred (iszero (pred (false false))))
(if (succ (pred (2 c))) then (succ (if b then (0 b) else (succ 2))) else (pred (0 b)))
(pred (pred ((\ d : C . 2) (if (succ true) then (0 1) else 2))))
(\ b : (((Nat -> Bool) -> (C -> A)) -> ((A -> Bool) -> (B -> Bool))) . ((\ a : (Nat -> Nat) . ((if true then a else false) 0)) (if (pred 0) then (if (if false then 2 else false) then (0 1) else true) else (iszero (if b then 0 else true)))))
(\ a : ((Bool -> A) -> ((Nat -> Nat) -> (A -> Bool))) . (iszero (\ d : (A -> Nat) . (pred true))))
(\ c : ((Bool -> Nat) -> (Nat -> Bool)) . (pred (succ false)))
(\ c : (((Nat -> C) -> (Nat -> B)) -> ((B -> Nat) -> B)) . (if (if true then (if false then 2 else 1) else 0) then (\ e : A . (c 2)) else (iszero (if c then a else c))))
(pred ((\ a : Bool . 0) (2 b)))
(\ a : ((A -> B) -> (C -> Nat)) . (if (pred 1) then (pred 2) else (b a)))
(iszero (pred (pred b)))
(if (succ (succ (succ true))) then (if (pred (2 c)) then (\ a : C . (a a)) else (\ c : ((C -> Bool) -> (A -> A)) . (iszero 0))) else (\ d : (Bool -> C) . (succ (succ 0))))
(pred (if (iszero 2) then (iszero a) else (succ (succ 2))))
(iszero (\ a : (Nat -> B) . (succ (iszero 0))))
(\ d : ((A -> A) -> (C -> Bool)) . (pred (1 2)))
(pred (if (iszero (iszero 2)) then (pred (pred 1)) else (succ (iszero false))))
(succ (succ (false 0)))
(\ b : ((Bool -> Nat) -> ((B -> Nat) -> A)) . (iszero (if (\ d : A . false) then (if false then false else c) else (\ b : Nat . (\ e : Nat . b)))))
(\ d : ((C -> A) -> (Nat -> Bool)) . (succ (succ (\ e : C . a))))
(iszero ((pred 2) (iszero (\ e : B . true))))
(if (pred ((pred (\ e : C . 2)) ((if a then true else 2) (if false then 1 else false)))) then (iszero (iszero b)) else (succ (iszero (if a then c else c))))
((iszero (iszero (\ e : (Bool -> Nat) . (if a then 0 else a)))) (pred (\ d : C . c)))
(pred ((if 2 then 1 else (pred true)) (succ ((\ b : A . 0) 2))))
((pred (succ a)) (succ (true (iszero 1))))
(pred (if (succ 0) then (succ (succ 0)) else (c 1)))
(\ a : ((((Nat -> A) -> A) -> (B -> Bool)) -> ((C -> Nat) -> (Bool -> A))) . (iszero (\ a : Nat . (iszero b))))
(\ e : ((C -> Nat) -> ((Nat -> C) -> (A -> Bool))) . (pred (succ 2)))
(pred (if (if (succ 1) then (\ c : Nat . (c 0)) else (\ b : C . 2)) then (iszero (iszero a)) else (\ d : (C -> Nat) . (pred 2))))
((if (iszero false) then (\ e : C . 0) else (pred false)) (if (pred (2 a)) then (\ b : (B -> A) . 0) else (if (if (b true) then (iszero c) else b) then (\ a : (Nat -> C) . 1) else (succ (\ a : B . 0)))))
(\ d : (((Bool -> Bool) -> (A -> Nat)) -> (Bool -> Nat)) . ((\ d : B . c) (\ d : Bool . a)))
(if ((\ d : (Bool -> Bool) . b) (\ a : (A -> Nat) . (if 0 then 2 else (iszero 2)))) then (iszero (succ (a 1))) else (succ (succ 1)))
(succ ((\ a : (C -> Nat) . true) (\ e : Bool . 0)))
((succ (pred 0)) ((succ b) (\ b : Nat . (if c then a else true))))
(succ (succ (true (iszero 1))))
(if (\ b : ((B -> Nat) -> (A -> B)) . (succ c)) then (\ e : (Bool -> Bool) . (iszero 0)) else (\ a : (((A -> B) -> (A -> C)) -> (B -> (B -> Nat))) . (if (if 0 then b else a) then (iszero true) else (\ d : Nat . 1))))
(succ ((iszero (0 b)) (iszero false)))
(pred ((if 2 then (iszero false) else (b 2)) (\ e : (Nat -> A) . 2)))
(\ a : ((A -> C) -> (B -> Bool)) . (pred (\ a : (C -> Bool) . (\ c : Nat . false))))
(iszero (\ a : ((C -> B) -> (Bool -> Bool)) . (pred b)))
(\ b : ((Nat -> C) -> ((B -> Nat) -> (Nat -> C))) . (succ (succ (\ b : Nat . 1))))
((iszero (if (\ d : A . false) then false else (pred false))) (succ (iszero (pred 2))))
(pred (\ a : (B -> C) . (if 1 then (if c then 0 else 2) else (succ a))))
(\ e : ((A -> Nat) -> (B -> (Nat -> Bool))) . (if (if (if 0 then 1 else 0) then (if 2 then b else (pred 1)) else (iszero (c a))) then (succ (iszero (succ a))) else (if false then 0 else 2)))
(\ c : (((B -> B) -> A) -> (A -> (C -> C))) . (if (b (iszero a)) then (if (\ a : Nat . 2) then (succ a) else (succ false)) else (pred (true 1))))
(\ e : (((B -> Bool) -> C) -> ((C -> C) -> A)) . ((if false then c else (succ 2)) (if b then 1 else (iszero a))))
(\ c : (((Nat -> B) -> (Bool -> C)) -> ((Nat -> C) -> (A -> C))) . (if (pred (succ (\ d : Bool . false))) then (pred (pred a)) else ((iszero 1) 1)))
(succ (if (pred (pred (a c))) then (iszero (iszero 0)) else ((iszero 1) (if a then true else 0))))
(\ c : ((C -> Bool) -> (A -> (B -> C))) . ((succ (pred false)) (if 1 then (\ c : C . c) else 1)))
(if (pred (c false)) then ((succ 1) (iszero 0)) else (iszero (((succ 1) (2 2)) ((2 2) 1))))
(pred (succ (succ 0)))
(\ d : ((((Bool -> B) -> Bool) -> ((Bool -> B) -> C)) -> (Bool -> Nat)) . (iszero (pred 2)))
(\ b : (((C -> C) -> C) -> (Bool -> Nat)) . (if (iszero true) then (if b then false else false) else (pred a)))
(\ c : (((A -> A) -> (Nat -> A)) -> (B -> (Nat -> B))) . (succ (iszero (\ e : B . true))))
(pred (succ (iszero a)))
(pred (iszero (succ b)))
(pred (pred (if (pred 0) then (0 2) else (pred b))))
(pred (iszero ((succ b) (\ d : Bool . (pred c)))))
((succ (if (iszero (succ b)) then (\ a : Bool . 0) else (if 1 then (true 2) else (1 1)))) ((iszero 2) (\ a : B . true)))
(if ((iszero (iszero (b a))) (if (pred false) then (a (if b then c else true)) else (if b then b else a))) then (iszero (if (if false then b else b) then ((iszero c) a) else (succ a))) else (succ (succ (succ b))))
(succ (\ e : ((A -> (C -> Bool)) -> (B -> A)) . (succ true)))
(succ (if (\ d : ((A -> A) -> (Bool -> Bool)) . (pred (\ d : Bool . a))) then (if (\ d : Bool . c) then (\ b : B . (if b then true else c)) else (iszero b)) else (\ c : (Nat -> Bool) . 2)))
(\ b : ((Nat -> C) -> ((C -> B) -> (C -> Nat))) . ((succ a) (pred (succ (if c then b else true)))))
((if (if (pred true) then 1 else (pred true)) then (if b then b else c) else (succ false)) (\ a : ((Nat -> Bool) -> ((Bool -> Bool) -> B)) . (if (\ c : (Nat -> C) . (\ e : A . c)) then (iszero a) else (succ 1))))
(pred ((iszero (pred 1)) (pred (pred 1))))
(iszero (if (if (pred (if false then 2 else c)) then (if b then a else b) else (pred (iszero 0))) then (if (0 0) then (pred true) else (iszero false)) else (iszero (\ b : Bool . 0))))
(if (pred (succ (iszero 1))) then (\ e : (C -> C) . (succ a)) else (\ e : (Bool -> (A -> A)) . (pred c)))
(pred (\ d : ((C -> Bool) -> ((A -> A) -> A)) . (true (iszero 0))))
(iszero (\ c : (((A -> Bool) -> B) -> (C -> (Nat -> C))) . (succ c)))
(succ ((if a then a else 2) (0 true)))
((iszero (0 2)) (if (\ e : (C -> C) . (succ (if c then a else 1))) then (\ d : (Bool -> B) . (2 (pred true))) else (pred a)))
(\ d : ((Nat -> A) -> ((A -> (Nat -> B)) -> (B -> B))) . (succ (succ 1)))
(pred (if (\ d : C . 1) then (\ d : Nat . a) else (pred (1 false))))
(iszero (succ (\ a : C . (succ false))))
((pred (succ (succ true))) (iszero (succ (2 false))))
((((iszero true) (succ b)) (\ c : (A -> C) . (pred (if 2 then 0 else false)))) (pred (iszero c)))
(succ (\ e : (Bool -> Bool) . (succ (iszero 2))))
((if (pred (succ false)) then (iszero b) else (if 0 then false else (pred 0))) (succ (pred 0)))
(iszero (succ (iszero (\ b : A . true))))
(if (if (pred c) then (succ c) else (pred (succ b))) then (iszero (b 2)) else (pred (iszero c)))
(succ (iszero (succ 2)))
(\ d : ((C -> (B -> Nat)) -> (A -> Nat)) . ((iszero (pred b)) (iszero (pred false))))
(if (if (if (iszero (b 2)) then (iszero (pred false)) else (succ b)) then (\ e : Nat . false) else (pred b)) then (if (iszero (pred c)) then (succ (\ c : (B -> C) . b)) else (pred (2 2))) else (pred (a a)))
(succ (iszero ((\ b : Nat . false) (if false then b else 1))))
(pred ((\ e : (Nat -> Nat) . (\ b : Nat . 2)) (iszero 1)))
(succ (\ a : (C -> (Nat -> C)) . (if (iszero b) then (a true) else (true (pred b)))))
(iszero (if (if (pred (iszero false)) then (\ e : (C -> Bool) . false) else (b false)) then (((\ c : A . a) 0) (\ c : C . 0)) else (succ true)))
(\ b : ((C -> (A -> Bool)) -> ((Nat -> C) -> A)) . (pred (pred (succ a))))
(iszero (if (2 1) then (if a then false else 0) else (iszero b)))
((iszero (iszero (b 1))) (pred ((2 c) (pred false))))
(if ((iszero (\ d : B . c)) (succ (\ d : Nat . a))) then ((\ d : C . b) ((if 0 then b else 0) a)) else (pred (\ b : C . 0)))
(if (\ c : (Nat -> Nat) . (if 0 then b else b)) then ((pred c) (succ b)) else (succ (succ (iszero a))))
(pred ((succ 2) (succ a)))
(iszero (if (succ 0) then (iszero a) else (\ c : (C -> Nat) . (\ b : B . 2))))
(if (\ b : ((A -> B) -> ((B -> C) -> (B -> C))) . (if (iszero b) then (pred c) else (\ b : B . a))) then (pred (c (\ d : A . true))) else ((pred 2) (iszero 1)))
(succ (pred ((\ b : (C -> C) . c) (\ d : B . (pred c)))))
(succ (pred (iszero (1 true))))
(\ b : ((A -> A) -> (C -> A)) . (if (if (if false then 0 else false) then (iszero 1) else b) then ((\ b : Bool . a) (if 0 then 0 else 2)) else (if (\ c : Nat . false) then (succ 1) else 2)))
((if (false 1) then ((succ false) (iszero c)) else (\ b : A . 2)) (iszero (\ c : A . true)))
((succ (iszero 0)) (pred (succ (pred false))))
(succ (pred (pred 2)))
(iszero (iszero (succ (c false))))
(if (pred (iszero (iszero 0))) then ((b (if 2 then b else b)) (iszero 0)) else (if (if (pred b) then a else b) then (pred false) else (pred 2)))
(\ e : (((Bool -> A) -> Nat) -> ((C -> C) -> (A -> A))) . (iszero ((\ e : A . 2) b)))
(iszero (if (pred a) then (iszero (if 2 then b else 1)) else (\ c : A . false)))
(pred (pred (if (1 c) then (\ d : C . 0) else b)))
(iszero (pred (\ a : Bool . b)))
(if (succ (iszero (if (succ a) then (a 2) else 1))) then (pred (iszero true)) else (if (\ b : (A -> Nat) . (\ b : C . true)) then (succ (\ d : Bool . b)) else (if (succ 2) then (succ (b 1)) else (succ false))))
(if (\ b : (Nat -> B) . ((iszero true) (iszero a))) then (pred (if (succ 2) then (if b then true else false) else false)) else ((if a then 1 else b) (iszero c)))
(if (pred (\ d : Bool . b)) then (succ (pred (if c then 1 else (succ c)))) else (if (a true) then (\ d : C . false) else (iszero 2)))
(if (iszero (if c then (pred a) else (\ c : B . 2))) then (if (if true then false else a) then (succ 2) else (false 0)) else ((succ (if a then 2 else 2)) (a a)))
(pred (\ e : ((Bool -> (B -> C)) -> ((B -> C) -> B)) . (succ (succ 0))))
(iszero (if (iszero 2) then (if (if b then c else b) then (\ c : C . true) else ((succ true) b)) else ((pred b) 2)))
((iszero (succ b)) (\ c : ((A -> Bool) -> (A -> B)) . (if c then 1 else (pred true))))
((\ d : ((A -> C) -> (C -> A)) . (iszero false)) ((if (1 2) then 0 else c) (if b then true else b)))
(\ a : (((Bool -> Bool) -> B) -> ((C -> A) -> ((Nat -> C) -> A))) . (succ (\ e : C . b)))
(\ a : (((Nat -> B) -> Bool) -> (A -> A)) . (if ((succ b) true) then (if 1 then b else c) else (iszero 1)))
((\ a : (B -> A) . (\ d : Nat . c)) (if ((succ 1) (if false then a else c)) then (\ d : (Nat -> B) . (pred 2)) else (\ e : (C -> Bool) . c)))
(if (pred (succ (succ false))) then (if (succ (1 0)) then (1 b) else (if (iszero 0) then (\ c : Bool . (if false then a else c)) else (\ d : (B -> C) . (iszero 0)))) else (\ a : (Bool -> Nat) . (\ b : Bool . (\ a : C . b))))
(\ e : ((B -> A) -> (B -> Bool)) . ((succ a) (pred (a c))))
(succ (if (succ a) then (if 0 then b else 2) else (succ (succ a))))
(\ d : ((((B -> Bool) -> (Bool -> Bool)) -> (C -> Bool)) -> ((Nat -> Bool) -> A)) . (\ c : (A -> (Nat -> A)) . ((\ e : Bool . a) c)))
(iszero (((\ c : Bool . c) (if (if 1 then false else 1) then c else (c true))) (if a then a else true)))
(pred (if (\ e : B . a) then (iszero false) else (iszero true)))
(if (succ (\ d : (B -> Nat) . a)) then (iszero (pred 0)) else (iszero (pred (pred 2))))
(pred (iszero (\ e : (A -> Nat) . b)))
(pred (\ a : ((Bool -> Nat) -> (C -> B)) . ((false false) (iszero (\ d : B . c)))))
((iszero (succ (succ b))) (\ c : ((C -> Nat) -> (C -> Bool)) . (\ d : B . a)))
((if (if b then (succ c) else (1 c)) then (if b then b else b) else ((if 0 then 2 else b) (succ (succ true)))) (\ b : ((A -> A) -> ((B -> A) -> Nat)) . ((succ b) (\ a : C . 0))))
(if ((succ (\ b : Bool . 0)) (if a then 2 else c)) then (pred (pred (\ d : Bool . false))) else ((succ (succ 2)) (if c then c else 1)))
(succ (\ a : (B -> B) . (0 c)))
(\ d : ((Bool -> C) -> (Bool -> B)) . ((if 2 then a else 2) (iszero (pred a))))
(succ (if (if false then (2 c) else (if false then b else c)) then (iszero (0 false)) else (pred (pred 2))))
(succ (pred (iszero (if b then a else a))))
(\ a : ((A -> Nat) -> (Nat -> Bool)) . (\ d : ((B -> C) -> (A -> C)) . (iszero 0)))
(\ c : (((Bool -> A) -> (A -> A)) -> ((A -> A) -> (Nat -> Nat))) . (succ (true false)))
(pred (\ c : (B -> Nat) . (succ 2)))
((iszero (\ c : (A -> C) . (pred true))) (iszero (\ d : C . c)))
((((pred 1) (\ a : Nat . (pred 2))) (b a)) (iszero (pred (iszero 0))))
((succ (if (iszero false) then (if 0 then 0 else 2) else b)) (iszero (iszero 2)))
(pred (if (if false then b else b) then (\ c : (Bool -> Nat) . (false c)) else (iszero b)))
((succ (succ false)) (\ e : (((A -> A) -> A) -> ((Nat -> C) -> B)) . (if (pred false) then (a 0) else b)))
((pred ((succ 2) false)) (iszero (if (\ b : A . false) then (pred 0) else c)))
(succ ((succ (succ (pred true))) (if (b true) then false else (iszero 0))))
((succ (2 0)) (if (iszero 2) then (pred 0) else (pred 1)))
(iszero (iszero ((if (\ a : B . 0) then c else false) (iszero c))))
((pred (succ (pred 1))) (if (pred (if 1 then a else (iszero b))) then (iszero 1) else (a c)))
(pred (pred (\ d : ((A -> B) -> A) . (if b then c else (succ a)))))
(succ (iszero (iszero 2)))
(pred (if (if a then 2 else (succ b)) then (iszero (0 1)) else (pred (0 true))))
(if ((if 2 then (if false then 1 else 2) else true) (\ a : ((Bool -> C) -> A) . (pred true))) then (succ (if 1 then 0 else true)) else (iszero (\ c : A . (\ a : Nat . a))))
((pred (if false then 0 else false)) (\ d : (A -> A) . (\ e : (Bool -> C) . b)))
(\ d : ((Bool -> (C -> C)) -> (B -> Bool)) . (succ (\ c : (A -> A) . false)))
(pred (\ c : ((A -> Nat) -> Bool) . (\ d : (C -> Bool) . (\ b : B . 1))))
(\ b : ((Nat -> A) -> (A -> (A -> A))) . (\ a : (A -> (B -> A)) . (succ b)))
(iszero (succ ((pred true) (2 c))))
(if (if (iszero false) then (\ a : (C -> B) . c) else ((\ d : A . 0) (iszero a))) then (succ (\ b : C . 0)) else ((if false then 1 else b) (succ 0)))
(\ a : ((A -> Nat) -> (B -> A)) . ((iszero (if false then 0 else a)) (\ a : (A -> B) . (succ true))))
(pred (\ e : ((C -> A) -> B) . (if true then (if 0 then c else 0) else 0)))
(if ((if (iszero (\ d : Bool . 2)) then (pred 2) else (iszero false)) ((c a) a)) then (\ c : (((Nat -> A) -> Nat) -> (C -> A)) . (pred (2 b))) else ((iszero true) (if true then true else true)))
(if (pred (pred b)) then (succ (if (false 1) then (if a then true else false) else c)) else ((iszero (if 1 then a else b)) (\ e : (C -> (A -> B)) . (pred 1))))
(iszero ((pred false) (iszero (1 1))))
(if ((pred 2) (succ (true 0))) then (((succ 1) (true b)) (succ (if false then c else b))) else (iszero (pred 1)))
(if (pred (succ (\ d : Bool . b))) then (iszero (\ b : Nat . c)) else (if (succ 2) then (iszero (pred 2)) else (succ (succ 2))))
(if (succ (\ b : (A -> A) . a)) then (if (if b then 1 else a) then (iszero c) else (\ e : A . b)) else ((\ e : Bool . 2) ((iszero 0) (if b then c else c))))
(iszero (pred (true true)))
(\ b : (((C -> A) -> (Bool -> B)) -> (Bool -> A)) . ((if (iszero true) then 2 else (iszero c)) (if true then (succ b) else (succ c))))
(pred (pred (iszero a)))
(\ e : (((B -> Nat) -> (B -> Nat)) -> (Bool -> Bool)) . (iszero (iszero 2)))
(\ e : (((C -> Nat) -> (Bool -> B)) -> (((B -> Bool) -> (Nat -> B)) -> (Bool -> Nat))) . ((succ (if 1 then b else c)) (\ b : (Nat -> B) . (succ true))))
(if (succ (\ a : (C -> B) . (succ a))) then (\ d : (C -> C) . (if (iszero c) then (succ 0) else (\ e : C . (a 0)))) else (succ (if (\ a : Nat . 1) then (0 c) else (iszero (if a then 1 else true)))))
(succ (pred ((false true) (iszero b))))
(pred (iszero (if (0 a) then (succ 0) else (false (pred b)))))
(succ (succ (\ a : B . b)))
(succ (iszero (pred (if a then true else c))))
((pred (\ a : C . 2)) ((\ b : Bool . b) (pred 2)))
(if (iszero (succ (\ c : C . 1))) then (iszero (2 2)) else (\ a : (((A -> C) -> Nat) -> ((C -> B) -> C)) . ((if (succ true) then a else (true b)) (iszero 2))))
(iszero (iszero (if b then c else 0)))
(iszero (succ (pred b)))
(if (\ e : ((B -> B) -> Bool) . (iszero a)) then (\ c : (C -> A) . (\ d : Bool . b)) else ((\ c : A . true) (if true then (iszero 1) else (iszero 0))))
(iszero (pred (pred 1)))
(pred (iszero (pred (\ a : (Nat -> Bool) . c))))
(pred (iszero (if ((if 0 then true else b) 1) then (pred false) else (pred 2))))
(succ (succ (\ b : Bool . a)))
(iszero (\ c : ((B -> B) -> B) . (pred (pred false))))
(succ (succ (\ a : (Bool -> B) . 2)))
(\ b : (((A -> Nat) -> (Bool -> C)) -> (A -> A)) . (succ (iszero true)))
(\ d : (((A -> Nat) -> (A -> B)) -> (A -> B)) . (succ (iszero (succ 2))))
(\ c : (((B -> (Bool -> B)) -> (Bool -> B)) -> ((C -> C) -> C)) . (iszero (succ 1)))
((succ (iszero (pred 0))) (((succ true) 1) (\ b : Nat . true)))
((\ e : ((Nat -> Nat) -> C) . (c b)) ((iszero (if 0 then true else false)) (\ a : A . 2)))
(if (if (1 1) then (succ (iszero 1)) else ((if 1 then c else 0) (\ a : Nat . false))) then (if (\ a : (B -> A) . (succ (\ e : Nat . 0))) then (pred 1) else (\ b : (C -> C) . (\ c : A . 2))) else (\ e : ((A -> B) -> C) . (\ e : A . 0)))
((pred (\ d : (B -> Nat) . (\ b : B . c))) (iszero ((\ e : B . 1) (\ d : A . false))))
(succ ((pred c) (iszero (succ 0))))
(if (\ b : (A -> (A -> Nat)) . (\ b : A . c)) then (iszero (pred b)) else (succ (iszero (0 c))))
(if (pred ((\ c : A . true) (succ a))) then (\ d : (Bool -> A) . (\ a : Bool . false)) else (succ (\ c : (Nat -> B) . 2)))
(succ ((if (iszero true) then (succ 1) else (pred (pred 0))) (succ (succ (2 c)))))
(succ (succ (\ e : ((B -> Bool) -> (A -> Nat)) . (iszero 1))))
(((pred (b true)) (if b then b else true)) (if (\ c : B . (pred 0)) then (iszero 2) else (if (if a then 0 else c) then (if 0 then b else 1) else (succ 1))))
(pred (if (\ e : (Nat -> B) . (succ 1)) then (pred (iszero (iszero 2))) else (\ e : (Bool -> Bool) . (pred true))))
(succ (succ ((\ c : C . (a 2)) (pred 2))))
(if ((a 1) (if false then true else b)) then ((0 false) (c 1)) else (succ (a c)))
(if ((if (succ c) then (succ (if 1 then 0 else b)) else (iszero false)) (succ (\ b : B . 2))) then ((\ e : B . 0) (pred 1)) else (if (pred 1) then (\ c : C . 2) else (if c then (iszero 0) else (pred b))))
(succ ((succ (iszero 2)) ((\ d : A . c) (succ true))))
((pred (iszero (iszero (0 true)))) ((if (true a) then (pred 2) else (pred false)) (\ c : Bool . c)))
(if (pred (succ c)) then (succ (iszero 0)) else (iszero (\ e : (Bool -> C) . (\ d : Nat . 1))))
(iszero (pred (iszero (0 (if 0 then 2 else true)))))
(\ e : ((B -> Bool) -> (A -> Bool)) . (iszero (succ (pred 0))))
(\ e : ((C -> Bool) -> ((C -> C) -> Bool)) . (pred ((succ a) (b 2))))
(pred (pred (pred ((1 a) b))))
(pred (if (pred (succ false)) then (succ (false (if c then true else 1))) else (if true then 2 else 2)))
(\ c : ((B -> (Bool -> A)) -> (((A -> B) -> Bool) -> (Bool -> A))) . (pred (\ e : B . false)))
(succ (iszero (\ e : (B -> (C -> A)) . (true 1))))
(\ d : (((Bool -> (Nat -> Bool)) -> (Nat -> C)) -> ((Bool -> A) -> (Nat -> C))) . (if (\ a : (B -> A) . (succ false)) then (if (pred false) then (succ 0) else (\ a : C . true)) else (iszero (iszero 0))))
(iszero (if (iszero 0) then (succ 2) else ((succ a) true)))
(iszero (if (pred c) then (\ d : (B -> (Nat -> Bool)) . (a c)) else (succ (succ a))))
(pred (\ d : ((B -> Bool) -> ((C -> C) -> A)) . (iszero true)))
(\ a : (((Bool -> C) -> (B -> C)) -> ((B -> A) -> ((A -> Bool) -> (A -> B)))) . ((succ b) (if a then true else true)))
(iszero (pred (succ (succ b))))
(pred (succ (2 true)))
(pred (succ (iszero (0 b))))
(if (pred ((b true) (iszero false))) then (pred (iszero (succ b))) else ((iszero true) (iszero (iszero c))))
((succ ((if 2 then 2 else 0) a)) (\ c : ((C -> C) -> (Nat -> A)) . (if (iszero b) then b else 1)))
(iszero (iszero ((pred (succ c)) (if b then 2 else a))))
(\ b : ((B -> Bool) -> (C -> Nat)) . (succ (2 (if b then true else b))))
(if ((pred (a false)) (succ 0)) then (\ a : ((Bool -> C) -> (C -> Bool)) . (if (iszero true) then true else 0)) else (\ a : ((A -> B) -> Nat) . (succ a)))
(pred (\ c : ((B -> Nat) -> (A -> Nat)) . (iszero true)))
(\ e : ((((Bool -> Nat) -> (B -> A)) -> (A -> Nat)) -> ((Bool -> Bool) -> (C -> A))) . (if (\ c : (Bool -> C) . ((\ b : A . a) (false 1))) then (a (pred true)) else (succ (iszero 0))))
(if (pred (if a then c else 0)) then (\ d : ((Bool -> Nat) -> (B -> Nat)) . (if (if c then 1 else 0) then (if (pred b) then 0 else b) else (iszero true))) else (pred (if (iszero c) then (pred 0) else (\ b : C . true))))
(if ((pred (succ 2)) (pred c)) then ((pred 0) (iszero a)) else (iszero (false (if b then a else b))))
(if (pred (iszero b)) then (succ (\ e : Nat . (iszero b))) else (succ ((\ a : Nat . false) 0)))
(pred (iszero (1 2)))
((succ (if b then 1 else 0)) (succ (if (pred 0) then (iszero b) else c)))
((iszero ((pred a) a)) ((\ e : Nat . (b 2)) (\ d : (A -> B) . (succ false))))
(succ (iszero (if 1 then a else 1)))
(pred (if (a a) then (iszero (if false then a else true)) else (succ (iszero 2))))
(succ ((if b then 2 else c) (\ e : Bool . c)))
(\ a : (((Nat -> A) -> (Nat -> Nat)) -> (((Nat -> B) -> A) -> (C -> B))) . (pred (0 c)))
(if (iszero (iszero a)) then (if (if (iszero c) then (succ true) else (\ d : A . 2)) then (\ b : ((Bool -> B) -> A) . (pred a)) else (iszero (succ b))) else (succ (succ 1)))
(pred (succ (pred (iszero true))))
((if (iszero (pred c)) then (pred (\ b : Bool . (iszero 2))) else (iszero (\ c : (A -> B) . (\ b : B . 1)))) (if (iszero (b 2)) then (if 1 then (true b) else (\ e : Bool . c)) else (iszero (\ b : (Bool -> A) . (\ e : C . b)))))
(\ d : (((B -> A) -> ((Nat -> B) -> (Nat -> B))) -> (((B -> Bool) -> (Nat -> A)) -> (A -> Nat))) . ((pred b) (iszero false)))
(pred (succ (succ (a a))))
(if (\ b : ((A -> Nat) -> (C -> Nat)) . (if a then false else b)) then (pred (succ c)) else ((1 (2 b)) (succ (succ (succ b)))))
(pred (pred (pred a)))
(iszero (pred (\ e : B . 2)))
(iszero (\ b : ((C -> C) -> (Nat -> A)) . (if (if true then 2 else c) then true else 0)))
(if (\ d : (A -> B) . (\ a : C . (if 2 then a else 2))) then (iszero (if 1 then 1 else b)) else (succ (if 2 then b else true)))
(if ((iszero (succ false)) (if (succ (true true)) then (succ 1) else (iszero a))) then (iszero (if c then 2 else 1)) else (succ (pred true)))
(succ (\ d : ((C -> A) -> ((B -> A) -> (A -> A))) . (succ (if false then 1 else b))))
(iszero (\ a : (A -> A) . (iszero b)))
((succ (if b then (succ 2) else 0)) (if (\ a : A . b) then (succ (\ d : Bool . false)) else (c true)))
((iszero (\ b : Bool . true)) (iszero (if c then (if true then true else 1) else c)))
((\ d : (A -> Bool) . (\ e : Nat . true)) (pred (if 0 then a else a)))
(if (pred ((iszero b) 2)) then (if (\ b : (A -> (A -> C)) . (iszero c)) then (pred (succ false)) else (\ e : (B -> Nat) . (\ b : C . true))) else (pred (iszero (iszero 1))))
(iszero (pred (\ a : C . a)))
(\ e : ((Nat -> C) -> (Bool -> Bool)) . (iszero (if (1 2) then (a c) else (c true))))
((if (if (if false then c else a) then (succ true) else (succ a)) then (iszero (pred a)) else (iszero 1)) (\ a : ((B -> (A -> B)) -> (B -> C)) . (pred (if 0 then b else b))))
(if ((if c then 2 else (succ b)) (iszero (iszero b))) then (iszero (\ c : Nat . (iszero 0))) else (if ((\ c : B . c) c) then (pred b) else (if (if false then false else true) then false else 0)))
(if (iszero ((iszero (iszero a)) (pred 2))) then (\ e : ((Nat -> C) -> C) . (pred (if b then 1 else 0))) else (pred (if (pred c) then (\ e : C . (succ 1)) else (\ e : (Nat -> Nat) . a))))
(succ (iszero (iszero (0 true))))
(((succ b) (succ (\ c : C . 2))) (\ c : ((Bool -> A) -> (B -> Nat)) . (iszero (iszero 1))))
(iszero (iszero (\ a : A . (iszero c))))
(if (if (iszero false) then (succ 1) else (succ c)) then (\ b : (Nat -> B) . (if 2 then (succ 0) else (\ a : B . 0))) else (iszero (if b then c else false)))
(succ (pred (iszero (c a))))
(succ (pred (pred (if false then b else 0))))
(\ e : ((B -> (B -> Nat)) -> (B -> (C -> A))) . (succ (if (true b) then (if (if a then a else c) then a else true) else (pred a))))
((pred (iszero (false true))) (if (if b then (if c then false else c) else (pred 2)) then (iszero a) else (pred 2)))
(\ c : ((Bool -> A) -> (A -> C)) . (iszero ((if (succ 1) then c else 0) (iszero b))))
(iszero (succ (iszero (\ a : Bool . true))))
((\ b : (A -> Nat) . (iszero (iszero c))) (iszero (false b)))
(iszero (\ d : ((Bool -> Nat) -> (B -> B)) . (\ e : (A -> C) . 2)))
(if (iszero (succ false)) then (\ e : ((Bool -> A) -> B) . ((pred false) true)) else (succ (\ e : Nat . 2)))
(((0 0) (succ false)) (succ (\ a : A . true)))
(iszero (iszero (iszero (\ b : (Nat -> B) . 2))))
((if (pred false) then (if (if 2 then c else true) then 0 else 2) else (if (iszero a) then c else a)) (iszero ((succ 1) (succ (if true then 0 else 0)))))
(if (iszero ((\ d : (Bool -> Nat) . (pred false)) (pred b))) then (\ a : (A -> B) . ((iszero 0) (\ a : B . 0))) else (\ a : ((C -> B) -> (A -> B)) . (\ c : (Bool -> C) . (succ 2))))
(if ((succ (\ c : A . true)) (1 c)) then (\ a : (A -> (C -> A)) . (\ c : (Bool -> A) . (\ b : C . a))) else (\ c : (A -> B) . (if (1 1) then b else 1)))
(iszero (if (pred false) then (pred a) else (pred (true false))))
(iszero (iszero (pred (succ (iszero false)))))
(\ b : (((B -> Bool) -> (B -> A)) -> (C -> B)) . (if (if 0 then 2 else c) then (if b then c else 0) else (succ 2)))
(succ (iszero (if 2 then c else 1)))
(succ ((if (\ b : C . a) then ((succ c) (b b)) else (a (pred c))) (succ (pred true))))
((if ((pred 1) (pred 2)) then (if true then false else a) else (if 1 then a else 2)) (if (iszero (iszero true)) then ((if b then a else c) (1 1)) else (pred (succ 1))))
(if (pred (pred (pred 2))) then ((succ c) (iszero c)) else (pred (iszero (succ b))))
((succ ((\ e : A . true) a)) (succ (if 1 then 2 else a)))
(succ ((if a then a else 0) (\ d : Bool . false)))
(pred (iszero (\ d : (Nat -> B) . true)))
(succ (iszero ((\ d : Bool . 2) b)))
(if (iszero (if (if true then true else 2) then (pred b) else (\ c : A . 1))) then (succ (if 1 then a else c)) else ((iszero true) (if a then true else 2)))
(((\ e : (Nat -> B) . (if c then a else 0)) (\ a : (B -> B) . (pred 0))) (iszero (\ b : (A -> A) . true)))
(pred (iszero (\ c : B . 0)))
(if (iszero (pred (succ (\ e : B . b)))) then (\ e : (C -> A) . (\ c : A . true)) else (\ d : ((A -> Bool) -> (Bool -> Bool)) . (if 0 then 0 else b)))
(succ (if (iszero (iszero b)) then (\ a : A . (succ false)) else (if (\ d : (C -> Bool) . (if 1 then 0 else true)) then (\ e : A . true) else (iszero (\ c : C . true)))))
(iszero (succ (if (iszero 1) then (iszero (iszero true)) else (iszero false))))
(iszero (succ (iszero (\ b : Bool . 1))))
(\ b : ((B -> B) -> (Bool -> B)) . (\ d : ((Bool -> C) -> A) . (succ a)))
(if (\ b : ((Nat -> Bool) -> (Nat -> B)) . (pred 0)) then (\ e : (A -> (A -> C)) . (\ d : A . b)) else (pred (iszero true)))
((pred (iszero false)) ((if (iszero 2) then true else (if c then a else false)) (\ e : (Nat -> (C -> Nat)) . (pred a))))
(pred (succ (pred (iszero 2))))
(if (\ d : ((C -> C) -> (Nat -> C)) . (iszero (false a))) then ((iszero c) (\ e : Bool . (iszero 1))) else (\ a : ((Nat -> B) -> B) . (iszero a)))
(iszero (pred (\ d : Bool . 2)))
((if (succ (succ 1)) then (\ c : (Bool -> Bool) . ((pred false) 0)) else (if (\ b : B . c) then (\ e : A . c) else (\ e : Bool . true))) (iszero (1 1)))
(iszero (\ e : ((C -> C) -> Bool) . (succ (b 2))))
(pred ((pred 0) (iszero c)))
(\ b : (((Nat -> C) -> (Nat -> C)) -> (Nat -> (A -> A))) . ((\ a : (A -> A) . (succ a)) (succ a)))
(pred (pred (if (iszero true) then (iszero true) else (iszero b))))
((\ d : (B -> Nat) . (iszero true)) (if (\ e : B . c) then (\ b : Bool . (\ d : Nat . false)) else (iszero b)))
((pred (\ c : Nat . 0)) (iszero (\ d : (C -> C) . (1 2))))
((\ b : ((C -> C) -> ((C -> Nat) -> (Bool -> Bool))) . (iszero c)) (pred (pred (succ (succ 1)))))
(if (if ((iszero true) (if false then c else false)) then (pred false) else (if (pred 0) then (pred true) else (succ true))) then (pred (succ (false c))) else (pred (succ true)))
((iszero (iszero 0)) (pred (\ c : A . a)))
((if (pred a) then (\ b : Bool . (iszero true)) else (\ c : A . (iszero a))) (pred (\ a : ((C -> A) -> (C -> Bool)) . (2 2))))
(iszero (pred (if (false false) then a else (if 1 then a else false))))
((pred (pred (pred c))) (succ (pred (0 a))))
(pred (succ (iszero 0)))
(\ b : ((((Nat -> B) -> C) -> (B -> B)) -> ((Nat -> C) -> ((Nat -> Nat) -> B))) . (succ (pred 2)))
(succ (succ (iszero (if 0 then false else true))))
(iszero (if (iszero true) then (\ c : Bool . (1 false)) else (succ 1)))
(succ (if (pred true) then (iszero b) else (if (true a) then (if b then true else 0) else (c false))))
(succ ((if 1 then b else 2) (iszero c)))
(if (if (0 c) then (succ 2) else (if 1 then true else 2)) then (if (succ 1) then (if 2 then 1 else false) else (\ b : Bool . 2)) else (\ c : (A -> (Bool -> Nat)) . (\ a : Bool . (iszero c))))
((if (succ 2) then (iszero 1) else ((succ false) (\ c : A . 0))) (iszero (iszero 1)))
(succ ((iszero (\ b : B . b)) (if (succ 1) then (pred (b a)) else (pred (iszero true)))))
(pred (if (if (0 1) then (succ c) else (2 2)) then (pred (\ c : C . 0)) else (succ (pred false))))
(pred (if (if (if a then 1 else 2) then (succ 1) else (if 1 then c else (true 2))) then (\ c : C . 0) else (iszero (iszero b))))
(pred ((pred true) (\ a : (C -> B) . (succ 0))))
(succ (iszero (iszero 1)))
((pred (pred (iszero (\ c : B . 1)))) (if (\ a : A . c) then (\ a : (B -> (B -> Bool)) . (succ false)) else (b 0)))
(\ e : ((Nat -> Nat) -> (C -> Bool)) . (\ d : (C -> A) . (if false then b else c)))
(\ a : ((C -> B) -> ((Nat -> A) -> A)) . (iszero (pred (succ a))))
(pred (succ (\ c : B . 0)))
(succ (succ (\ d : (C -> Nat) . (0 c))))
(iszero (\ e : ((B -> (A -> C)) -> ((C -> B) -> A)) . (iszero true)))
(\ b : ((A -> C) -> ((B -> B) -> (Nat -> Bool))) . ((if (iszero false) then a else (succ true)) (\ d : (A -> A) . (iszero c))))
(pred (\ e : ((C -> Nat) -> (C -> C)) . (succ (iszero 0))))
(if (pred (\ b : Bool . (iszero 1))) then (if (\ a : Nat . c) then (\ d : Nat . 0) else (iszero (if c then true else 1))) else (if (succ (false 0)) then (succ (2 c)) else ((pred true) (a false))))
(pred ((\ c : (A -> Bool) . (pred (iszero 2))) (\ e : (C -> (B -> C)) . (pred true))))
((if (if (if 0 then b else c) then (if 1 then true else a) else (true (succ b))) then (pred (succ (\ d : Bool . a))) else (iszero (pred (succ a)))) (if (\ e : A . 0) then (iszero 1) else (pred true)))
(\ c : ((C -> A) -> (B -> Bool)) . (\ c : (B -> B) . (iszero c)))
(succ (pred (pred 2)))
(pred (if ((false b) false) then (pred b) else (\ e : A . (false b))))
(pred (pred ((a 1) (if true then c else false))))
((succ (succ (\ b : C . 0))) ((pred (\ d : Nat . 2)) (pred b)))
((succ (succ a)) (\ c : (B -> Nat) . (succ true)))
((iszero (pred ((succ true) c))) (iszero (\ c : ((B -> C) -> (Bool -> Nat)) . ((if 1 then 2 else false) c))))
(if (if (pred false) then (succ (iszero c)) else (\ c : (B -> A) . (iszero 2))) then (iszero ((c 2) (succ 1))) else (pred (iszero b)))
(succ (succ (succ c)))
(pred (succ (iszero 2)))
(\ a : ((Nat -> (A -> A)) -> (A -> (C -> C))) . (succ (if 2 then 1 else true)))
(\ a : (((C -> C) -> (Bool -> A)) -> ((Bool -> C) -> (B -> Nat))) . ((pred (\ b : (C -> B) . (\ d : B . a))) (\ c : (B -> C) . 0)))
(succ (pred (\ d : C . true)))
(iszero (\ b : ((C -> Nat) -> Nat) . (true a)))
(iszero (if (succ (pred false)) then (if 2 then c else 0) else (if b then (iszero b) else (2 0))))
((((succ 1) 0) (succ (iszero c))) (succ (iszero false)))
(((succ (\ a : (A -> Bool) . (if false then a else a))) (if (\ e : Nat . 1) then (if false then 1 else false) else a)) (if ((\ b : C . 1) 1) then (if (pred 0) then a else b) else (\ d : (Bool -> B) . (0 1))))
(succ (\ e : (B -> Nat) . (0 true)))
(iszero (succ (succ (succ true))))
(iszero (\ e : (Nat -> B) . (0 1)))
(iszero (if (if (iszero b) then true else (if 2 then 1 else false)) then (\ a : (C -> B) . (pred (pred a))) else (succ (1 true))))
(pred (succ (if a then false else true)))
(((\ b : (Bool -> (A -> A)) . (if true then a else false)) (if c then (\ a : Bool . c) else (if 1 then a else false))) (pred (\ d : (C -> A) . (\ a : A . 1))))
(succ (if (\ a : (A -> C) . b) then (if (if b then true else c) then (pred 2) else (pred 0)) else (\ a : ((Nat -> Bool) -> C) . (succ (1 c)))))
(pred (pred (if c then true else 0)))
((iszero (iszero (succ a))) (\ d : ((Bool -> Bool) -> (Nat -> B)) . (\ a : (C -> A) . a)))
(succ (if (succ (iszero a)) then (pred false) else (\ e : (Nat -> (Nat -> Bool)) . (\ e : Nat . a))))
(succ ((iszero (succ 0)) (\ d : (Nat -> B) . (iszero true))))
(pred (pred (if (\ a : C . 1) then 1 else c)))
(succ (iszero (true b)))
(\ d : ((B -> Nat) -> ((B -> B) -> (B -> A))) . (pred (\ c : Bool . false)))
(if (if (iszero (\ e : A . true)) then (\ d : A . 0) else (true b)) then (pred ((iszero b) (iszero c))) else (if (succ 0) then (pred c) else (pred (pred c))))
(pred (iszero (if b then (pred true) else true)))
(iszero ((\ a : Bool . (if true then 1 else c)) (if false then (iszero 2) else (2 true))))
(\ e : ((A -> Nat) -> ((B -> A) -> A)) . (succ (\ e : A . true)))
(succ (pred (succ ((pred 1) (iszero 1)))))
(succ (succ (succ (succ b))))
(if (pred (iszero c)) then (iszero (iszero true)) else (iszero (iszero (pred true))))
(pred (iszero (iszero (if c then 0 else 2))))
(pred (if (\ e : Nat . 0) then (pred 2) else (if false then 0 else 1)))
(succ ((\ d : (Bool -> B) . (\ b : B . 1)) (\ c : (Nat -> B) . c)))
(if (if (succ c) then (pred 1) else (if c then 0 else false)) then (iszero (\ d : B . (\ e : Bool . false))) else ((if 0 then c else c) (if a then (if true then b else 2) else a)))
(iszero (iszero (pred (iszero false))))
(iszero (pred (a c)))
(if (\ c : ((A -> A) -> ((A -> C) -> (Bool -> A))) . (pred (\ b : Bool . (pred false)))) then (pred (pred (if 0 then 2 else false))) else (\ e : (C -> B) . (succ (if false then a else true))))
(pred (succ (pred (succ true))))
(pred (pred (if c then 2 else (pred 0))))
(if (succ (pred (true false))) then (iszero ((if 0 then c else c) (iszero 1))) else (\ e : ((B -> Nat) -> (B -> Bool)) . (if ((iszero b) (2 false)) then (if c then a else 1) else ((true 2) true))))
(succ (iszero (if (\ c : (Nat -> C) . c) then (succ (pred a)) else (iszero a))))
(succ (if (pred (succ true)) then (succ (pred c)) else ((succ 1) (if 1 then true else 0))))
(if (iszero (succ (\ b : Nat . 2))) then (iszero ((\ a : Nat . true) (succ a))) else (if (pred b) then (\ e : C . a) else (iszero 0)))
(if (succ (b 2)) then (((succ a) (true 2)) (iszero (succ false))) else (\ d : ((Nat -> B) -> (A -> B)) . (pred 2)))
(if (if (\ c : A . 2) then (a 0) else (iszero false)) then (succ (if true then 1 else c)) else (pred (2 true)))
(succ (\ d : ((A -> C) -> C) . (pred (c c))))
(if (iszero (pred (succ true))) then (iszero (succ 0)) else (if (succ b) then (succ false) else (if a then c else b)))
(pred (if (pred a) then (\ a : Nat . (pred b)) else (\ e : (Bool -> B) . (pred 1))))
(((succ (if 2 then b else true)) (iszero 1)) (succ (if (pred c) then (if (if true then 2 else 1) then (if c then 2 else true) else a) else (iszero false))))
((pred (if (\ b : Nat . 0) then (succ (succ false)) else (succ b))) (pred (\ d : (A -> Bool) . true)))
(\ d : (((B -> Bool) -> (Bool -> Nat)) -> (Nat -> (Nat -> Bool))) . ((succ (pred b)) (\ d : (Bool -> Nat) . (\ a : (A -> A) . (iszero 1)))))
((iszero ((pred true) (\ a : (C -> B) . true))) (\ b : (A -> C) . (succ (if b then b else 1))))
(if (\ b : (B -> (A -> A)) . (pred c)) then (\ a : (Bool -> B) . ((succ true) (pred true))) else (\ b : ((C -> Bool) -> (B -> C)) . (\ d : ((A -> B) -> (B -> A)) . (if b then 1 else (iszero c)))))
(((pred b) (2 2)) (succ (pred c)))
((succ ((iszero true) (\ d : Bool . b))) (pred (pred (pred false))))
(\ a : ((B -> (B -> Nat)) -> (B -> (Bool -> C))) . (iszero (succ c)))
(\ a : ((((C -> Nat) -> Bool) -> (B -> C)) -> (C -> (B -> B))) . (\ c : (Nat -> (A -> A)) . (pred c)))
(pred (pred (succ 1)))
(iszero (pred (if (pred a) then (if 1 then 2 else 1) else (iszero false))))
(if ((2 false) (if (iszero false) then (\ b : Bool . true) else (\ c : A . a))) then (iszero (c true)) else (succ (succ (iszero true))))
(pred ((succ c) (iszero false)))
((succ (iszero 2)) (pred (iszero (\ c : Bool . 0))))
(iszero (succ (succ (pred 0))))
(\ d : (((Nat -> Bool) -> (Nat -> B)) -> ((Bool -> Bool) -> B)) . (\ d : ((B -> Bool) -> A) . (succ 2)))
(pred (iszero (if (if a then 2 else 2) then (pred b) else (\ a : Nat . false))))
((pred (pred c)) (pred (\ b : (Bool -> A) . (\ c : (Nat -> C) . false))))
(iszero (pred (if true then 2 else false)))
(((succ (iszero 0)) (iszero true)) (\ d : (C -> A) . (\ d : (A -> C) . (if a then false else 2))))
(((iszero 2) (\ d : (Bool -> Bool) . (pred 1))) (pred (pred (iszero 1))))
(if (iszero (pred a)) then (if (\ e : B . c) then (\ a : A . 1) else (iszero c)) else (iszero (if (iszero 0) then c else 2)))
((if (pred false) then (succ false) else (pred a)) (iszero (1 1)))
(iszero (if (b false) then (pred a) else (succ a)))
(\ a : ((A -> C) -> ((Bool -> B) -> B)) . (if (pred 0) then (\ b : B . 1) else (pred (\ d : Nat . true))))
((if (if a then false else true) then (if (pred c) then 1 else true) else (if c then c else (succ false))) (iszero (if 2 then a else true)))
(succ (if (iszero true) then (if (succ false) then (0 false) else (\ a : B . b)) else (if b then a else 0)))
(iszero (\ e : (C -> B) . (succ false)))
(succ (if (if (\ e : A . 1) then (\ e : Bool . (if false then false else c)) else (1 b)) then (iszero (pred b)) else (pred (pred b))))
(pred (\ c : (Nat -> B) . (iszero (c 0))))
(iszero ((c 0) (pred false)))
(succ (iszero (iszero (1 1))))
(pred (pred ((pred (succ 1)) (\ c : Nat . a))))
(pred (\ c : ((C -> B) -> (Bool -> Bool)) . (if ((pred 0) c) then (\ d : C . 1) else (if 1 then a else 1))))
(iszero (iszero (succ (\ b : B . true))))
(succ (succ (pred (succ false))))
(if (if (iszero b) then (\ a : C . (iszero b)) else (pred (if 1 then 2 else 2))) then (if (\ e : Bool . true) then (\ c : B . true) else (iszero (b 0))) else ((pred false) (if b then true else false)))
(succ (iszero (pred b)))
(iszero (iszero (succ c)))
((iszero (\ c : (B -> A) . (pred 1))) (succ (succ b)))
((\ a : (Bool -> B) . (\ b : (Bool -> Bool) . (succ false))) (\ a : ((A -> A) -> ((B -> Bool) -> (A -> C))) . (pred (succ a))))
(succ ((pred ((iszero c) (iszero b))) (\ d : (B -> Nat) . (c false))))
((\ b : (Bool -> Nat) . (iszero (pred 2))) (if ((succ (\ a : B . true)) (succ (\ e : Nat . 1))) then (pred (iszero (succ false))) else (iszero (if b then true else false))))
(\ c : (((B -> Nat) -> (C -> A)) -> ((Bool -> B) -> (A -> Bool))) . (((true 2) 0) (pred (if 2 then true else b))))
((succ (succ a)) ((pred (pred 1)) (a c)))
(pred (pred (true false)))
(if (iszero (iszero (if a then 2 else 1))) then ((pred (b 0)) (\ b : (A -> B) . (pred 0))) else ((iszero b) (\ e : (B -> Nat) . 1)))
(if (pred (\ d : A . false)) then (pred (a (pred 1))) else (\ b : (Bool -> (B -> B)) . (iszero (iszero a))))
(iszero (pred (pred b)))
(pred (iszero (a c)))
(succ (pred (if 2 then (iszero false) else c)))
(if (succ (1 false)) then (pred (iszero 2)) else (iszero (succ 0)))
(\ b : ((B -> A) -> (A -> Nat)) . ((\ a : (B -> Bool) . (\ e : (A -> Bool) . false)) (iszero 2)))
(\ d : ((A -> C) -> (C -> Bool)) . (if (iszero (a 2)) then (succ 2) else (succ c)))
(if (\ c : ((C -> A) -> (C -> Bool)) . (\ b : ((B -> A) -> C) . (pred (iszero true)))) then (pred (\ b : C . (succ c))) else (\ e : ((Nat -> Bool) -> B) . (\ a : C . true)))
(if (\ d : (B -> Bool) . (if (if 0 then 2 else a) then (\ b : C . (iszero c)) else (1 0))) then (succ (iszero (pred a))) else (succ (pred (iszero 1))))
(iszero (pred (\ d : (B -> (B -> A)) . (succ 2))))
(\ c : (((C -> C) -> Bool) -> (Bool -> (B -> C))) . (((if (pred b) then (iszero false) else (a a)) (iszero c)) (\ d : (C -> Bool) . (iszero (pred 2)))))
(if (succ (iszero (if (succ true) then (iszero false) else (\ d : Nat . 2)))) then (pred (iszero 1)) else (iszero (false b)))
(iszero (\ c : (C -> (Bool -> Bool)) . (\ d : ((Bool -> A) -> (C -> B)) . (iszero (pred true)))))
(if (succ (\ e : Nat . b)) then (iszero (succ (succ true))) else (if (iszero 1) then (false 1) else (\ b : (Nat -> B) . (succ false))))
(if (iszero (pred a)) then (if (pred (if (if a then b else true) then (c c) else (iszero a))) then (succ b) else ((pred c) (if 0 then true else true))) else (\ b : (Nat -> B) . (pred c)))
(((succ c) (if c then true else (iszero 2))) (iszero (true a)))
(iszero (\ e : (A -> (Bool -> C)) . (\ c : (B -> Bool) . (iszero 1))))
(succ (succ (pred c)))
(\ a : (((C -> C) -> (C -> B)) -> ((C -> C) -> (B -> (B -> A)))) . (pred (pred (succ c))))
(pred (iszero (iszero (if 0 then (pred false) else (\ c : A . true)))))
(if ((succ (if b then 1 else b)) (iszero true)) then (if (pred (succ 1)) then (iszero (iszero true)) else ((iszero a) (if 0 then a else b))) else ((pred 2) (if (\ c : Nat . b) then (pred c) else a)))
(\ c : ((((Nat -> A) -> Nat) -> (Nat -> A)) -> ((C -> B) -> (Bool -> A))) . (\ b : (A -> A) . (iszero (\ e : A . b))))
(\ b : ((Nat -> (B -> Bool)) -> ((C -> Nat) -> C)) . (succ (iszero 2)))
(pred (\ b : (B -> B) . (iszero true)))
(if (if (pred (if (if c then 0 else 0) then a else b)) then (iszero (\ a : Bool . 2)) else (pred c)) then (iszero (pred (iszero true))) else (pred (pred true)))
(iszero (iszero (iszero 1)))
(pred ((\ a : ((B -> A) -> (Bool -> Nat)) . (\ d : C . c)) (\ c : ((Nat -> A) -> C) . (if true then c else 2))))
(if (\ b : (A -> A) . (iszero (c a))) then (pred (true b)) else (iszero (iszero (pred b))))
(if (succ (\ c : B . false)) then (iszero (if false then 0 else 0)) else (iszero (pred (succ false))))
(\ d : ((A -> Nat) -> ((C -> Bool) -> (B -> B))) . (iszero (pred (c c))))
(if (if (if (iszero a) then 0 else 1) then (iszero (\ d : Nat . false)) else (if (if c then b else c) then 0 else 2)) then (succ (\ e : Bool . b)) else ((c true) (pred (\ c : Bool . a))))
((succ (iszero 1)) (if ((iszero 1) (if 2 then false else a)) then (pred false) else (if (pred true) then true else b)))
(pred (iszero (a 0)))
(iszero (\ d : (A -> C) . (succ (false b))))
(\ a : ((B -> C) -> (B -> A)) . ((pred (if a then b else true)) (true c)))
(pred (iszero (iszero c)))
(if (\ d : ((Nat -> Nat) -> (B -> Bool)) . (pred (iszero a))) then (iszero (iszero (\ a : B . 0))) else (iszero (pred 1)))
(pred (pred (succ 1)))
(pred (succ (if 0 then false else (iszero true))))
(succ (pred (if (iszero b) then (if c then 2 else c) else (b b))))
(pred (pred ((2 (if a then true else 2)) (iszero a))))
(if (pred (iszero 0)) then (succ (pred true)) else ((succ (if false then 1 else 0)) (succ (\ c : A . a))))
(if (succ (pred (true 1))) then (iszero (iszero c)) else (iszero ((succ a) (iszero true))))
(if (pred (succ (pred (pred false)))) then ((succ (1 b)) (pred c)) else (\ c : ((A -> C) -> ((Nat -> C) -> (A -> Nat))) . (iszero (2 true))))
(pred (\ d : (Bool -> C) . (b 1)))
(succ ((1 (a 0)) (if (\ e : C . a) then (iszero 2) else ((if 0 then 0 else 2) (pred a)))))
((\ c : (A -> Nat) . (iszero b)) (\ b : ((Bool -> Bool) -> (B -> A)) . (iszero b)))
((pred (pred 2)) (\ c : ((Bool -> B) -> (C -> (Bool -> A))) . (\ d : C . (iszero c))))
((succ (iszero (succ a))) (\ d : (A -> (B -> A)) . (pred (succ false))))
((pred (pred 2)) (\ c : ((A -> Bool) -> (B -> A)) . (\ c : (Nat -> B) . (if (pred b) then (\ c : A . c) else 2))))
(if (pred (pred (\ c : A . 0))) then (\ e : ((B -> C) -> (C -> Bool)) . (succ c)) else (succ (false (if false then 2 else 0))))
(iszero (succ (iszero (if c then 2 else true))))
(if (\ d : (B -> Bool) . (pred false)) then (iszero (pred c)) else (if (iszero true) then (if a then (succ c) else (iszero true)) else (succ (succ 1))))
(pred (if (iszero (\ d : C . b)) then (succ (2 false)) else (pred (succ 2))))
(if ((pred 1) (succ c)) then (succ (pred (if false then 1 else false))) else (iszero (\ c : A . (if c then 1 else 0))))
(pred (pred (iszero a)))
(pred (\ e : (C -> (B -> B)) . (if (iszero 1) then false else (iszero false))))
((pred (succ (1 true))) (pred (if (pred a) then 0 else (\ a : B . 2))))
((pred (a true)) (pred (2 b)))
(iszero (pred (if 2 then 0 else 1)))
(pred ((succ a) (succ 2)))
(\ c : ((C -> (Bool -> C)) -> ((C -> B) -> (B -> Nat))) . (if (b 0) then (succ 2) else (succ b)))
(if (iszero (if true then 1 else 0)) then (succ (a b)) else (iszero (iszero (pred 0))))
(iszero (iszero (pred (\ a : Bool . a))))
(succ (iszero ((iszero 0) b)))
(pred (pred (iszero 2)))
(if (iszero (iszero (\ b : C . false))) then (\ a : (C -> A) . (false c)) else ((if (iszero b) then (2 b) else (succ 0)) (pred (iszero c))))
(((\ a : Bool . (if 0 then 0 else 1)) (0 c)) (succ (\ c : (Bool -> Nat) . true)))
(succ (if (pred (succ c)) then (iszero (iszero (b b))) else (iszero (if 0 then 2 else 2))))
(\ a : ((Bool -> (C -> A)) -> ((B -> Nat) -> (B -> Bool))) . (if (a 0) then (if c then 0 else 1) else (pred c)))
(succ (if (\ e : ((Bool -> Nat) -> (Nat -> Nat)) . (succ (if a then a else false))) then ((if 1 then 0 else 0) (b 1)) else (iszero (0 0))))
(if (if (succ (pred 1)) then (iszero (\ b : Bool . c)) else (pred (1 1))) then (if (succ (succ false)) then (\ c : Nat . (iszero false)) else (pred c)) else (\ a : (Nat -> (A -> C)) . (iszero ((iszero true) b))))
((if (\ c : (Nat -> C) . (\ c : Nat . true)) then (if c then true else (pred b)) else (iszero (pred (true 1)))) ((\ a : (A -> Bool) . (\ a : Nat . false)) (iszero (pred a))))
(if (if (pred (succ a)) then (c a) else (succ (pred c))) then (succ (\ a : (A -> Bool) . (iszero 1))) else (succ (succ (if a then 2 else 1))))
(pred (pred (pred (iszero 0))))
(if ((true a) (succ false)) then (\ b : ((Nat -> Nat) -> B) . (pred 1)) else (\ c : (Nat -> Bool) . (\ e : A . 2)))
(iszero (if (succ a) then (iszero (if (if c then 1 else true) then true else (pred 0))) else (if (\ a : A . (\ d : C . c)) then (succ (if c then 0 else false)) else (true true))))
(succ (succ (\ a : C . c)))
(succ (iszero (pred (iszero a))))
(succ (iszero (0 2)))
(if ((pred (iszero true)) (pred (\ a : A . b))) then ((if a then false else c) (c (iszero b))) else (pred (pred (a a))))
(if (pred (if (succ 0) then b else 1)) then (succ (iszero (\ e : A . 1))) else ((succ c) (\ e : Bool . b)))
(iszero (pred (\ b : Bool . false)))
((pred (\ a : (Bool -> Nat) . (iszero 2))) (succ ((if 1 then true else b) (pred (succ 1)))))
(pred ((\ c : (A -> C) . (iszero b)) (((if 0 then true else c) false) (\ a : Bool . 0))))
(\ c : (((Bool -> A) -> (C -> Nat)) -> ((Nat -> A) -> (B -> Bool))) . ((\ c : (B -> Bool) . (iszero b)) (b b)))
(pred (\ e : (Bool -> C) . (iszero b)))
(if (pred (succ (succ a))) then (if (\ a : ((C -> Bool) -> B) . (if false then 0 else b)) then (if (succ 2) then (1 0) else b) else (succ (pred (iszero true)))) else (iszero (1 (iszero 0))))
((\ d : ((Nat -> C) -> ((A -> C) -> (A -> A))) . (succ 2)) (pred (if 0 then 2 else (if b then true else 2))))
((\ c : (((C -> B) -> (B -> B)) -> (Bool -> B)) . ((iszero true) (a 2))) ((\ a : (Nat -> Bool) . (pred true)) (if (b 0) then (if (succ c) then (succ c) else c) else (pred a))))
(pred (if (succ c) then (iszero 0) else ((pred 2) (pred false))))
(\ e : ((Bool -> B) -> (Bool -> (A -> Bool))) . ((if (c 1) then (pred 1) else 1) (if 0 then c else (pred c))))
(if (iszero (true 2)) then (pred (\ d : C . 2)) else (succ (succ (false a))))
(succ (pred ((succ b) (2 b))))
(if (succ (succ true)) then ((\ d : C . false) (iszero (iszero 0))) else (succ (succ 2)))
(pred (succ (iszero c)))
(iszero (iszero (if (if true then b else 0) then (\ d : C . false) else a)))
(iszero (iszero ((b false) (if (if c then 1 else true) then (\ b : A . 0) else (if false then true else 2)))))
(pred (if (iszero b) then (iszero c) else (\ c : (Bool -> C) . true)))
(succ (\ d : (((B -> B) -> Nat) -> ((Nat -> B) -> (A -> C))) . (if (iszero 0) then b else 0)))
(\ c : (((Nat -> (A -> C)) -> (C -> A)) -> ((C -> Bool) -> (A -> A))) . (succ (if 2 then a else 0)))
(iszero ((if (iszero 2) then (succ false) else ((pred true) (pred 1))) (succ (succ 0))))
((pred (succ (succ 1))) (if (\ a : Bool . (b true)) then (succ c) else (1 true)))
(\ d : ((Bool -> Nat) -> (C -> Nat)) . (\ d : (C -> (B -> Nat)) . (if (false false) then (succ a) else false)))
((pred (iszero (pred 0))) (pred (iszero b)))
(if (\ a : ((A -> Bool) -> (C -> Nat)) . (\ a : (C -> B) . (pred c))) then (succ (true c)) else (if (pred c) then (1 (if 1 then 2 else b)) else (pred 1)))
(succ (pred (pred a)))
(succ ((if a then b else 0) (if c then false else 0)))
(iszero (if (pred true) then (iszero false) else (pred false)))
(\ a : ((A -> Bool) -> ((C -> B) -> C)) . (succ (\ a : Bool . 2)))
(if (succ (iszero a)) then (succ (pred b)) else (succ (iszero (a b))))
(if (if ((\ d : C . true) (if a then 1 else 0)) then (if c then a else (pred 2)) else ((c a) (iszero 1))) then (if (\ e : Nat . c) then (\ a : A . 1) else (\ b : Bool . 2)) else (pred (succ (if (1 1) then 2 else (2 true)))))
(if (pred ((1 1) (iszero c))) then ((a true) (pred (if 1 then a else true))) else (if (if (0 (\ b : Nat . a)) then (\ d : Nat . (succ false)) else (if 1 then b else 0)) then (\ d : ((Bool -> Bool) -> (C -> C)) . (succ b)) else (pred (\ b : B . c))))
((pred (pred (succ 1))) ((iszero (iszero 2)) (pred (succ c))))
(succ ((\ b : A . 0) (if (succ 1) then (succ false) else a)))
((iszero (iszero 2)) (\ a : ((Bool -> B) -> (Nat -> B)) . (if a then 0 else 1)))
(pred (\ d : ((Nat -> Nat) -> (Bool -> Bool)) . (if (iszero 1) then (true 1) else c)))
(succ ((\ c : (B -> (A -> B)) . (c b)) (\ a : (A -> (Bool -> B)) . (succ a))))
(pred (succ (\ a : ((Nat -> Bool) -> (A -> B)) . (\ b : (A -> Bool) . true))))
(pred (if (c true) then (pred b) else (\ b : (A -> Nat) . true)))
(succ ((succ a) (pred 1)))
(iszero (pred (\ d : (A -> C) . 2)))
(\ c : ((C -> Bool) -> ((B -> A) -> (B -> Nat))) . (iszero (pred (iszero true))))
(if ((succ b) (pred (succ 2))) then (iszero (iszero a)) else (iszero (pred (succ b))))
(\ d : (((Bool -> A) -> (B -> B)) -> (B -> C)) . (succ (succ (2 2))))
(succ (iszero (\ c : ((A -> B) -> Nat) . (\ c : Bool . (succ a)))))
(if (succ (\ e : (A -> Bool) . (if 0 then c else true))) then (iszero (\ a : C . true)) else (pred (\ d : (C -> Bool) . (if 2 then 0 else c))))
((pred (iszero 1)) ((if 1 then (if c then 2 else 0) else c) (if a then b else a)))
(iszero (if (iszero (succ (if true then a else b))) then (\ b : (B -> Bool) . c) else ((pred (pred true)) (0 2))))
(succ (iszero (pred (if true then 0 else 2))))
(succ ((0 (iszero b)) (pred (succ (false 1)))))
(\ a : ((B -> Nat) -> ((A -> B) -> Bool)) . (pred (if a then false else false)))
(succ (\ e : (A -> B) . (succ 2)))
(if (iszero (if (\ e : B . a) then (iszero a) else 2)) then (iszero (c (pred a))) else ((pred a) (if (if b then b else b) then (succ 2) else (c 2))))
(succ (pred (pred a)))
(if ((pred 0) (if (pred true) then (succ false) else 0)) then ((iszero b) (succ (\ d : Nat . a))) else ((iszero b) (iszero (pred b))))
((\ c : (Bool -> B) . (\ c : (Bool -> A) . (c 1))) (pred (succ a)))
(if (succ (if 2 then c else (pred c))) then (iszero (succ (if a then false else a))) else (iszero (pred (pred false))))
(if (succ (succ 2)) then (succ (true c)) else (\ c : ((C -> Bool) -> ((Bool -> A) -> C)) . (succ 0)))
((\ a : ((Nat -> Nat) -> (Nat -> Bool)) . (succ (iszero b))) (iszero (\ a : (C -> Nat) . (pred 1))))
(\ e : ((B -> B) -> (B -> A)) . (pred (\ a : (Bool -> Nat) . c)))
(pred (iszero (succ c)))
(\ c : ((A -> C) -> (C -> C)) . (iszero (iszero (iszero 0))))
(iszero (pred (pred true)))
(iszero (iszero (succ true)))
(pred (pred ((\ b : Bool . 1) c)))
(iszero (succ (if (pred true) then (succ true) else (succ a))))
(pred (pred (\ a : A . (succ a))))
(pred (iszero (iszero c)))
(pred (iszero (pred 0)))
(pred (\ d : (Bool -> A) . (0 c)))
(\ a : ((C -> (Bool -> C)) -> (C -> C)) . (iszero (succ false)))
(if (succ (iszero false)) then (\ e : (B -> Bool) . (if false then a else c)) else (iszero (iszero 1)))
(\ b : (((A -> Bool) -> ((Bool -> Bool) -> C)) -> ((Nat -> C) -> Nat)) . (if (if (pred 2) then 2 else (c a)) then (\ d : (Nat -> Nat) . (1 1)) else (if (iszero false) then ((if true then a else false) (b 0)) else (true a))))
(succ (iszero ((b 2) true)))
(succ (if (iszero (false 1)) then ((0 c) true) else ((pred b) true)))
(succ (pred (if (pred c) then (pred (\ e : Nat . 2)) else (\ a : A . c))))
(iszero ((pred (pred b)) (if 2 then false else 1)))
(\ b : ((C -> A) -> ((C -> Bool) -> (Nat -> Nat))) . (if (iszero b) then (pred (if (if 1 then b else c) then (\ c : B . 2) else true)) else (\ e : (B -> Nat) . (pred b))))
(if (iszero (iszero (\ b : C . a))) then (succ (if c then (\ c : A . 0) else (succ a))) else (\ d : (Bool -> C) . (\ a : (Bool -> Nat) . (succ a))))
((pred (pred b)) (if (a (iszero b)) then (iszero false) else (\ d : A . b)))
(if (\ d : (((A -> Nat) -> (A -> B)) -> (B -> (Bool -> C))) . (if (iszero false) then (pred c) else (pred 0))) then (pred (if (iszero false) then 2 else 2)) else (((b false) (\ a : C . 2)) ((succ (\ c : A . a)) (if 1 then (pred a) else (\ b : C . true)))))
(if (pred (iszero (pred b))) then (succ (pred 2)) else (succ ((succ b) (0 false))))
(pred ((\ b : (Nat -> Bool) . (succ 0)) (\ b : Bool . (pred b))))
(\ b : ((B -> (Nat -> B)) -> ((Bool -> Nat) -> (C -> (A -> A)))) . (if (if (pred c) then (iszero true) else (c c)) then (succ (pred (1 1))) else (c (pred c))))
((\ d : (((B -> Nat) -> (Bool -> B)) -> (Bool -> C)) . (pred (true 1))) (if (\ c : B . 1) then (\ e : Bool . true) else (if c then 1 else (iszero a))))
(succ ((succ (if c then a else b)) (succ 1)))
(iszero (iszero (succ (iszero 1))))
(\ a : ((C -> Bool) -> ((A -> C) -> A)) . (((if (1 0) then (\ c : Bool . 2) else false) (if b then 2 else 1)) (\ e : (Bool -> C) . (c false))))
((iszero (succ (\ e : C . true))) (if ((pred 1) (iszero true)) then (0 c) else (iszero (iszero true))))
(succ (pred (\ e : (Bool -> Nat) . false)))
(((iszero (\ e : C . 0)) (iszero b)) (iszero (if (succ 1) then false else a)))
(iszero (iszero ((succ true) true)))
(pred (succ (succ (\ a : B . 0))))
(\ b : ((Bool -> (A -> B)) -> ((B -> Bool) -> ((Bool -> B) -> C))) . (iszero (if (pred false) then (pred (2 b)) else (\ a : B . 2))))
((pred (pred b)) ((iszero (succ 1)) (iszero b)))
(iszero (pred ((if b then b else 0) (if 1 then 2 else 0))))
(pred (if (true 1) then (\ d : Bool . 1) else (pred false)))
(iszero (iszero (pred (succ 2))))
((pred (succ (succ a))) (succ (pred (\ d : Nat . false))))
(iszero (iszero (\ d : (Bool -> B) . (c c))))
((if (\ b : Bool . true) then (pred true) else (pred (0 true))) (pred (iszero (pred true))))
(pred (pred (if (if 2 then false else false) then (succ 1) else (false 2))))
((\ e : (A -> (C -> A)) . ((0 false) (\ a : C . 2))) (if (succ b) then (pred (succ true)) else (\ a : C . 2)))
(\ a : (((C -> C) -> (Nat -> Nat)) -> (Nat -> Bool)) . (pred (\ d : C . (false b))))
(pred (iszero (pred (c b))))
(pred (if (a a) then (iszero 1) else (if true then a else a)))
(if (\ c : (A -> (Bool -> Bool)) . ((pred true) (iszero b))) then (iszero (pred 1)) else (iszero (succ 2)))
(\ e : ((C -> Nat) -> (B -> C)) . ((\ b : C . 1) (iszero c)))
(\ a : ((C -> Nat) -> ((A -> B) -> (A -> B))) . (\ d : (Nat -> (B -> Nat)) . (succ (succ false))))
(succ ((if (1 true) then (pred true) else 2) (\ b : (C -> Nat) . (iszero 1))))
(if (iszero (\ c : (C -> Bool) . (if false then a else true))) then (pred (if (pred c) then (succ 1) else true)) else (if (0 a) then ((0 2) (if c then b else a)) else (pred (iszero a))))
(iszero (\ d : ((B -> A) -> B) . (pred 2)))
(iszero ((iszero 2) (pred (false false))))
(if ((iszero (iszero a)) ((iszero 0) 1)) then (pred (if a then (pred 0) else (succ false))) else (\ d : (B -> C) . (pred false)))
(pred (succ (iszero (iszero (succ b)))))
(if (iszero (pred false)) then ((succ (pred b)) (succ (succ true))) else (pred (succ a)))
(pred (iszero (if true then a else false)))
(iszero (iszero (succ (succ true))))
((iszero (if (succ true) then (\ d : Nat . 1) else (\ e : B . b))) ((false (pred 1)) (if true then 2 else b)))
(if (if (iszero (if b then 0 else 1)) then (pred false) else (pred b)) then (if ((if (\ a : C . 1) then (pred c) else (pred b)) (pred 0)) then (iszero (pred (1 b))) else (if (\ e : C . false) then (if c then false else a) else (false 0))) else (iszero (if (pred 2) then (\ a : Nat . false) else (iszero b))))
(iszero (if (if (succ (succ true)) then (if a then 2 else false) else (\ d : A . b)) then (if (if b then 0 else 2) then (succ b) else (succ false)) else (pred false)))
((succ (\ a : (C -> Bool) . (succ c))) (iszero (false (iszero 1))))
(if (succ (true a)) then ((if 1 then 2 else c) (succ 2)) else ((pred (pred 2)) (succ (false true))))
(pred (if (c true) then ((succ (if c then c else b)) (iszero 0)) else (iszero 1)))
((((true (succ 2)) (\ c : B . 1)) (succ c)) (pred (pred (\ d : Nat . true))))
((succ ((pred a) true)) (pred (iszero (\ a : A . (iszero 0)))))
((succ (\ d : (C -> Nat) . 1)) (\ b : ((Nat -> B) -> (B -> Bool)) . (\ c : B . 1)))
((iszero (\ c : (Nat -> Nat) . (if 0 then 2 else 0))) ((succ ((iszero b) true)) (succ (if true then c else true))))
(succ (pred ((pred true) (succ true))))
(succ (\ e : (A -> Nat) . (pred 2)))
(succ (\ d : ((Bool -> Nat) -> (Nat -> C)) . (if (if a then (succ a) else false) then (succ b) else (\ c : (C -> B) . (\ b : Nat . c)))))
(pred ((succ 2) (\ e : B . b)))
(succ (pred (\ d : (B -> C) . (if 0 then c else 1))))
(pred (iszero (if (if 0 then b else true) then b else (pred 2))))
(iszero (\ b : (Bool -> C) . (\ d : Nat . false)))
((iszero (pred (iszero false))) (if (iszero a) then ((succ false) (false 0)) else (pred 2)))
((succ (\ a : C . (iszero b))) (if (succ (\ c : C . b)) then (pred (\ d : (A -> Nat) . false)) else (if (succ (if 2 then 2 else a)) then (iszero true) else (2 b))))
(\ e : ((Nat -> A) -> (Bool -> C)) . ((iszero 2) (iszero c)))
((\ b : ((C -> A) -> (Nat -> C)) . (succ 1)) (pred (\ b : (Bool -> B) . (succ 0))))
(succ (pred (succ 1)))
((\ a : (((Bool -> B) -> A) -> (Bool -> Bool)) . ((\ e : C . a) (\ b : C . b))) (iszero (\ b : B . true)))
(pred (iszero (succ (succ b))))
(\ a : ((A -> A) -> ((B -> B) -> (A -> B))) . (iszero (succ (pred (false 2)))))
(\ a : (((B -> A) -> ((Bool -> Nat) -> C)) -> ((A -> Bool) -> ((Bool -> Bool) -> (A -> C)))) . (iszero (false (succ a))))
(iszero (iszero (if b then 1 else (succ c))))
((pred (iszero (pred 2))) (((\ b : Bool . c) (if false then c else 0)) (pred (iszero true))))
(succ (iszero ((iszero true) (succ a))))
(succ (if (iszero 0) then (pred (if a then true else b)) else (succ true)))
(\ a : (((Nat -> C) -> (Bool -> Bool)) -> ((A -> (A -> B)) -> (Nat -> Bool))) . (succ (succ false)))
((iszero ((iszero 2) (iszero c))) (iszero (succ (if c then 2 else a))))
(pred ((succ 0) (\ a : Nat . 1)))
(pred (pred ((iszero 2) false)))
((\ c : (A -> Bool) . (\ e : Bool . false)) (iszero (pred (iszero false))))
(if (iszero ((succ b) ((\ e : Nat . 2) (\ a : B . true)))) then (if (a b) then (pred false) else (if a then (iszero b) else (iszero a))) else (if (\ c : (A -> C) . 0) then (iszero (iszero true)) else ((pred c) a)))
(iszero ((pred 2) (iszero 2)))
(if (\ a : (A -> (C -> Bool)) . (pred 2)) then (\ e : (Nat -> (Bool -> B)) . (iszero (if 0 then 0 else a))) else (\ b : ((Bool -> A) -> (C -> A)) . (succ (pred (iszero a)))))
(\ a : (((C -> Nat) -> (Bool -> B)) -> (B -> (C -> Bool))) . (pred (if (a 2) then (\ d : C . c) else b)))
(succ (pred (c b)))
(\ c : ((A -> A) -> (C -> Bool)) . (succ (\ d : C . true)))
(\ e : ((B -> B) -> (Nat -> Bool)) . (iszero (iszero (succ 0))))
(iszero ((iszero c) (\ a : (Nat -> Bool) . (succ true))))
(iszero ((\ c : B . 0) (1 2)))
(((succ 0) (\ b : B . b)) (succ (iszero c)))
(\ a : ((A -> (C -> Nat)) -> (Nat -> (Bool -> A))) . (succ (\ e : (Bool -> Nat) . 2)))
(((pred (succ true)) (\ d : C . c)) (pred ((a true) (pred a))))
(pred (succ (iszero b)))
(if (\ d : (C -> Bool) . (iszero (if 2 then 1 else 2))) then (\ d : ((Nat -> C) -> (C -> C)) . (iszero a)) else (if (iszero 2) then ((pred c) false) else (iszero b)))
(pred (\ c : ((Nat -> C) -> (C -> A)) . (pred (if c then 2 else (succ 1)))))
((pred (if (iszero 1) then 1 else (\ a : Nat . 1))) (\ d : (A -> B) . (iszero 1)))
(succ (pred (iszero b)))
((if (iszero (\ d : B . 1)) then (pred c) else (\ b : (B -> Bool) . (if false then 2 else 2))) (if (iszero (if 2 then a else false)) then (succ false) else (iszero 1)))
(\ a : (((Nat -> B) -> Nat) -> ((A -> B) -> (A -> C))) . (pred (\ c : Nat . a)))
(pred (\ b : ((C -> C) -> A) . (\ c : (C -> Nat) . true)))
(\ d : ((Nat -> B) -> ((Nat -> A) -> Bool)) . (iszero (if b then false else a)))
(if (iszero (\ d : (Nat -> Nat) . (pred 0))) then (succ (succ (\ e : C . 2))) else (succ (succ 2)))
(\ c : ((((Bool -> A) -> (B -> C)) -> (Nat -> C)) -> ((Nat -> C) -> Bool)) . (succ (pred false)))
(if (\ c : (((C -> C) -> Nat) -> ((Bool -> A) -> C)) . (if 2 then (succ 0) else 0)) then (succ (succ (iszero false))) else (\ b : (Bool -> C) . (pred c)))
((if (\ d : ((B -> Nat) -> (B -> A)) . (if 0 then true else 1)) then (a (succ a)) else (if a then (pred 2) else 0)) (if (succ (\ b : B . false)) then (if (iszero (\ d : Bool . a)) then (pred (pred b)) else (\ a : Nat . 1)) else ((pred true) (2 false))))
(pred (pred ((pred 0) (if 1 then a else 0))))
(if (\ b : ((B -> C) -> (C -> Bool)) . (iszero true)) then ((if (pred 0) then (succ a) else (iszero 1)) (pred (iszero false))) else (iszero (iszero a)))
(if (succ (succ (c (succ 2)))) then ((succ b) (if 2 then true else (iszero 0))) else (\ e : (B -> B) . (pred false)))
(succ (if (\ a : Nat . false) then (iszero b) else (pred false)))
((pred (pred (succ 1))) (if (true (succ c)) then (iszero 1) else (succ false)))
(iszero (iszero (pred (iszero (iszero 2)))))
(pred (succ (pred 1)))
(if (iszero (iszero (pred true))) then (\ b : ((C -> A) -> Bool) . (pred (iszero c))) else (if (pred (iszero false)) then (pred true) else (pred true)))
(succ ((succ a) (if true then 2 else (\ a : B . a))))
(if (if (if b then true else false) then (iszero 0) else (c 1)) then (\ e : (Nat -> (A -> Bool)) . (if c then (pred false) else 2)) else ((succ (succ false)) (\ c : (Nat -> Bool) . true)))
(succ (pred (pred 2)))
(if (if (iszero true) then (\ c : B . false) else (iszero a)) then (succ (if 1 then b else b)) else (if (succ (iszero false)) then (if (\ c : A . a) then (2 1) else (pred true)) else (false 0)))
(if (succ (\ d : C . 1)) then (\ e : (((C -> Bool) -> (C -> A)) -> ((B -> Bool) -> (A -> B))) . (pred (pred 0))) else (pred (pred (pred (if a then 1 else 1)))))
(\ a : ((Bool -> A) -> (A -> (C -> Nat))) . (\ a : (Bool -> C) . (iszero false)))
(succ (pred (succ (succ c))))
(pred (succ (succ c)))
(if (iszero (a b)) then (succ (if b then 2 else 1)) else (\ a : ((A -> B) -> ((Nat -> Bool) -> B)) . (succ (a (succ 2)))))
(\ b : (((C -> C) -> (Nat -> Bool)) -> (Nat -> A)) . (iszero (pred (pred 1))))
(if ((iszero (iszero 2)) (iszero (iszero 0))) then ((1 (a b)) (if (iszero b) then ((\ a : A . 2) (a 2)) else (if 2 then 2 else 2))) else ((if 1 then false else b) (if false then true else 1)))
(\ d : (((Nat -> Nat) -> ((Bool -> C) -> (B -> Bool))) -> ((A -> C) -> (Nat -> B))) . ((iszero (if (iszero b) then c else (0 true))) (iszero 2)))
(((iszero false) (pred true)) ((pred (\ e : C . a)) (pred (iszero 2))))
(succ (\ d : (C -> A) . (succ (\ e : C . false))))
(((succ (succ false)) (if false then 2 else c)) (iszero (succ (pred true))))
((pred (succ 1)) (pred (succ 1)))
(\ d : ((B -> B) -> (C -> C)) . (iszero (iszero (iszero c))))
(iszero ((if (if 0 then 0 else c) then 2 else (pred b)) (iszero true)))
(iszero (succ (\ e : Bool . b)))
(iszero (iszero (if c then 1 else 2)))
(iszero ((pred 0) (\ e : B . false)))
(succ (if (iszero c) then (\ e : (Nat -> A) . false) else (\ e : A . 2)))
(if (iszero (if false then true else 0)) then (pred (iszero (\ d : Nat . c))) else (\ c : (Bool -> Nat) . (\ b : Bool . b)))
((pred (1 b)) (\ c : (Bool -> Bool) . (pred 0)))
(iszero (succ (iszero 1)))
(pred (pred (succ 0)))
(pred (if (succ (\ a : A . false)) then (iszero 0) else (if (succ b) then 2 else 1)))
(succ (succ (succ (iszero false))))
(if (iszero (succ (succ a))) then (pred (\ c : (B -> C) . (b false))) else (if (b false) then (iszero false) else (iszero 1)))
(pred (iszero (b 1)))
(succ (pred (if a then (if 2 then b else b) else (iszero false))))
(\ e : ((Bool -> Nat) -> ((B -> B) -> B)) . (succ (if (succ false) then (0 a) else (if 0 then 2 else c))))
(if ((succ (true 0)) (\ d : A . (if 2 then 0 else 2))) then (if ((iszero (pred 0)) (iszero true)) then (succ (if true then 1 else 0)) else (\ c : Nat . 0)) else (if (iszero (\ b : Nat . b)) then (pred false) else (succ a)))
(succ (iszero (if false then 1 else 2)))
(pred (pred (iszero (succ 1))))
(if (succ (if b then (iszero 2) else (0 b))) then (pred (\ a : B . (succ 2))) else (succ (if (succ a) then 1 else (succ false))))
(pred (if (\ e : (B -> B) . (\ d : Bool . c)) then ((iszero false) (\ c : A . 1)) else (\ e : C . 2)))
(if (\ e : (Nat -> Bool) . (if 0 then b else (\ c : Bool . false))) then ((\ e : (A -> Nat) . (succ 2)) (\ c : (Bool -> Nat) . (iszero 2))) else (\ c : ((C -> B) -> ((A -> B) -> (A -> C))) . (pred (pred 0))))
(\ e : (((C -> B) -> C) -> ((Bool -> Nat) -> ((C -> B) -> B))) . (pred (succ (succ false))))
(succ (succ (iszero true)))
(succ (pred (pred (if (0 0) then true else (\ b : Nat . a)))))
(if (succ (succ (succ true))) then (succ (succ 2)) else (pred (2 1)))
(succ (\ e : ((Bool -> Nat) -> (Nat -> C)) . (if (pred false) then (pred b) else (succ false))))
(if (succ (iszero (iszero 1))) then (pred (iszero false)) else (\ a : (A -> A) . (\ a : Nat . 0)))
(\ d : ((Nat -> Bool) -> ((Nat -> Bool) -> C)) . (\ b : (Bool -> B) . (if 2 then true else b)))
(\ c : (((Bool -> Nat) -> A) -> (A -> A)) . (if (false (succ b)) then (if true then false else 2) else (if a then b else 0)))
((succ (b 1)) (pred (if (pred a) then (succ true) else (if 0 then a else c))))
((succ (\ e : (B -> Nat) . c)) (pred (\ e : (C -> A) . false)))
((\ d : (Bool -> Bool) . (\ b : (C -> Nat) . (c a))) (succ ((\ c : C . b) (if false then a else false))))
(if ((iszero (succ (\ a : A . b))) (false (succ 2))) then (\ b : (C -> A) . (iszero b)) else (\ a : ((C -> A) -> B) . (b (succ a))))
(succ (if (iszero 0) then (\ d : (Nat -> Bool) . (succ 1)) else (2 2)))
(iszero (if (\ c : Nat . (if a then 0 else false)) then (\ a : C . a) else (if (succ false) then 0 else 0)))
(if ((c (\ b : B . 2)) (pred 0)) then (succ (pred (if true then a else true))) else ((if c then (succ false) else (pred true)) (iszero (pred 1))))
(iszero (if ((if 2 then c else 1) true) then (succ false) else (iszero 0)))
(if (if (succ 2) then (0 c) else (if 2 then 1 else false)) then ((if false then true else 2) (b 1)) else (\ a : ((B -> B) -> B) . (pred 0)))
((pred (if (iszero c) then b else (pred 2))) (iszero ((\ e : A . 0) (pred (0 false)))))
(iszero (if (\ b : Bool . b) then (iszero a) else (iszero true)))
((\ a : (C -> (Bool -> Bool)) . ((1 a) b)) (succ (succ 0)))
(succ ((pred a) (\ c : Bool . (succ a))))
(iszero (if (pred true) then (iszero a) else (iszero 0)))
(if (if (pred false) then (if a then c else a) else (c 2)) then (if (iszero b) then (\ d : B . b) else (if a then b else a)) else (succ (succ 1)))
((pred (0 a)) (iszero (pred 0)))
(iszero (iszero (\ e : A . (pred 2))))
(\ d : (((Nat -> (B -> A)) -> (A -> B)) -> (A -> Nat)) . (\ a : (Nat -> A) . (succ true)))
((\ a : (Bool -> Nat) . ((c 2) b)) (succ (pred a)))
(iszero (if (pred (iszero (pred b))) then ((iszero b) (succ 0)) else ((2 0) b)))
(\ b : ((C -> (A -> B)) -> ((B -> Bool) -> (A -> (A -> Bool)))) . (pred (succ b)))
(\ a : ((A -> C) -> (((Bool -> C) -> B) -> (Bool -> (Nat -> C)))) . ((pred 0) (if a then 2 else c)))
(iszero (pred (succ 2)))
(\ a : ((B -> A) -> ((Bool -> B) -> (Nat -> Nat))) . (\ b : ((A -> Bool) -> (Nat -> Bool)) . (if (if a then false else 2) then (iszero a) else (iszero true))))
(if (pred (pred 2)) then (iszero ((\ b : Bool . a) (pred false))) else (iszero (iszero (pred (succ c)))))
(pred ((\ d : Bool . 1) (pred a)))
(pred (pred (c false)))
(pred ((pred (pred c)) (pred (if a then 2 else c))))
(\ a : ((B -> C) -> (Nat -> (C -> A))) . (iszero (\ c : (C -> A) . (if a then c else b))))
((if (if (if (pred 0) then (false 0) else (\ a : A . 2)) then (\ d : B . (succ 2)) else (\ b : Bool . (if c then 2 else b))) then (succ (succ a)) else (iszero 1)) (if (pred (pred b)) then (if true then c else 2) else (\ e : Bool . 1)))
(pred (pred (iszero (false c))))
(succ (pred (succ (succ false))))
(pred (pred (\ b : (C -> Nat) . 0)))
(pred (\ e : ((Nat -> Bool) -> Nat) . (\ c : Nat . (if c then 1 else 0))))
((\ b : ((Nat -> Nat) -> (Nat -> A)) . (pred (pred a))) (\ d : (Bool -> B) . (a false)))
(if (pred (pred 2)) then (\ e : (Nat -> Nat) . (pred (if 1 then a else b))) else (\ c : ((Bool -> Bool) -> ((C -> A) -> (B -> B))) . (iszero true)))
((pred (pred (if 0 then true else a))) ((iszero a) (succ true)))
(if (succ (if 1 then a else 2)) then (succ (a c)) else (pred (2 0)))
(iszero (succ (b 1)))
(\ a : (((C -> A) -> (Bool -> B)) -> ((A -> A) -> (Nat -> Bool))) . (iszero (pred (c (c 0)))))
(if (if (succ (if 2 then false else a)) then (if (succ true) then (1 c) else 0) else ((succ b) (0 2))) then (\ c : (((Nat -> C) -> A) -> (A -> A)) . (\ b : C . 1)) else (\ b : ((C -> Bool) -> ((C -> C) -> (C -> C))) . (if c then (if b then a else a) else c)))
(if (pred (\ c : (Nat -> A) . a)) then (\ e : (Bool -> C) . (if (c b) then (pred 0) else (if (b 2) then (pred 1) else (iszero 0)))) else (if (if false then 1 else b) then (succ b) else (false b)))
(pred (pred (\ e : (C -> Nat) . (iszero 1))))
((succ (\ d : C . (iszero 2))) (succ (if (if a then 0 else 1) then b else 1)))
(succ (succ (iszero (\ e : Bool . 0))))
(iszero (succ (pred (a a))))
(if (iszero (\ b : (Nat -> A) . (succ c))) then (if (pred 1) then (\ c : B . (iszero a)) else (iszero a)) else (pred (if (pred true) then (true b) else (0 false))))
(if (if (iszero (\ c : C . 2)) then (succ (iszero 2)) else (\ c : B . 2)) then (succ ((if (pred b) then (succ c) else c) (succ b))) else (succ (pred b)))
(iszero (if (pred (if 2 then false else true)) then (if (pred 2) then (iszero 0) else c) else (succ (pred b))))
(\ b : (((Bool -> B) -> (Bool -> A)) -> (((Nat -> Nat) -> Bool) -> (C -> Nat))) . (iszero (1 2)))
(pred ((if (if (iszero 0) then (\ d : Nat . 1) else a) then ((succ b) (c b)) else ((a c) 2)) (succ 1)))
(succ (iszero ((succ c) (\ d : C . c))))
(\ c : ((Bool -> Bool) -> ((B -> Nat) -> (C -> C))) . (succ (succ (succ (\ a : A . 1)))))
(iszero ((succ 2) (if b then 0 else (succ b))))
(pred (if (succ false) then (iszero a) else (succ false)))
((pred (\ b : (A -> C) . (if false then 2 else b))) (succ (succ (\ b : C . (\ d : A . true)))))
(pred (pred (pred 1)))
(succ (succ (if 2 then 1 else 0)))
(succ (\ e : (Bool -> (Bool -> A)) . (\ a : Nat . 0)))
((succ (pred b)) (succ (iszero (1 c))))
(\ d : (((B -> B) -> (B -> B)) -> ((C -> Bool) -> A)) . (if (succ 2) then (if (iszero a) then a else 1) else (succ 2)))
((\ e : ((B -> B) -> (C -> Nat)) . (iszero (pred 1))) (((pred 0) (succ 0)) (succ (iszero true))))
(if (if (pred (succ true)) then (\ b : A . false) else (succ 0)) then (succ (pred (succ 2))) else (\ a : (B -> C) . (pred a)))
(iszero (succ ((if false then b else a) 0)))
(if (pred (succ (if b then 0 else a))) then (succ (succ c)) else (\ c : ((C -> B) -> (C -> A)) . (0 true)))
(pred (pred (iszero (2 2))))
(\ c : (((B -> C) -> (A -> A)) -> ((A -> A) -> B)) . (iszero (iszero true)))
(if (\ e : (B -> Bool) . (0 (iszero b))) then (if (pred (if 1 then 0 else true)) then (succ (iszero (if 2 then a else 0))) else ((pred 2) (if 2 then 0 else c))) else (\ e : (C -> Bool) . (pred true)))
((\ d : (B -> (Bool -> Nat)) . (a a)) (succ (iszero (if a then b else true))))
(iszero (\ b : ((C -> B) -> (B -> B)) . (pred 1)))
(succ (if (succ c) then (if b then 2 else false) else (succ c)))
(if (if (iszero c) then (\ b : ((C -> Nat) -> (C -> C)) . (true (iszero true))) else (if (if b then 0 else c) then (\ d : Bool . 0) else (if true then 1 else c))) then (pred (\ c : Nat . true)) else (pred (iszero 0)))
(\ d : ((C -> Bool) -> (Nat -> A)) . (if (if c then 1 else 0) then (pred 2) else (pred 0)))
(iszero (iszero (succ 1)))
(((succ (if a then 1 else 0)) (iszero 1)) (if (iszero (pred (pred false))) then ((\ a : A . b) (succ (pred false))) else (iszero (iszero c))))
(pred (pred (\ b : A . a)))
(if ((\ b : A . 1) (iszero (pred false))) then (if (iszero (\ a : Bool . true)) then ((pred 0) (pred true)) else ((succ 1) (pred a))) else (succ (succ 0)))
((if (succ c) then (if 1 then 0 else b) else (pred (succ 1))) (pred ((if b then false else true) (iszero c))))
(if (pred (iszero 0)) then (pred (if false then 1 else c)) else (if (iszero (if 2 then false else 0)) then (if c then (c c) else a) else (iszero (if 1 then 0 else 2))))
(succ (succ (if (if false then 1 else true) then (a a) else (\ d : A . true))))
((if (\ e : A . 1) then (iszero 2) else (true true)) (\ a : (C -> C) . (succ false)))
(pred (\ d : ((C -> A) -> ((B -> C) -> (Bool -> Nat))) . (iszero (succ 0))))
((iszero (if (1 (1 false)) then (if b then true else 0) else (iszero a))) (if (\ d : (A -> Nat) . (pred c)) then (\ c : (B -> Bool) . (iszero a)) else (pred b)))
((iszero (\ d : C . b)) (\ b : (((B -> Bool) -> A) -> (Bool -> A)) . (iszero (\ a : B . (pred false)))))
(pred (succ (pred 2)))
(succ (\ c : ((Nat -> B) -> Nat) . (pred (iszero c))))
(\ d : ((A -> Bool) -> (Nat -> Bool)) . (if (pred 2) then (iszero 1) else (pred (\ d : C . false))))
(iszero ((iszero (\ d : (A -> Bool) . 2)) (if (succ 1) then (2 2) else (\ e : Nat . c))))
